ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIdleTask,"ax",%progbits
  20              		.align	1
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvIdleTask, %function
  24              	prvIdleTask:
  25              	.LFB53:
  26              		.file 1 "freertos\\src\\tasks.c"
   1:freertos\src/tasks.c **** /*
   2:freertos\src/tasks.c ****     FreeRTOS V7.6.0 - Copyright (C) 2013 Real Time Engineers Ltd.
   3:freertos\src/tasks.c ****     All rights reserved
   4:freertos\src/tasks.c **** 
   5:freertos\src/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:freertos\src/tasks.c **** 
   7:freertos\src/tasks.c ****     ***************************************************************************
   8:freertos\src/tasks.c ****      *                                                                       *
   9:freertos\src/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:freertos\src/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:freertos\src/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:freertos\src/tasks.c ****      *                                                                       *
  13:freertos\src/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:freertos\src/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:freertos\src/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:freertos\src/tasks.c ****      *                                                                       *
  17:freertos\src/tasks.c ****      *    Thank you!                                                         *
  18:freertos\src/tasks.c ****      *                                                                       *
  19:freertos\src/tasks.c ****     ***************************************************************************
  20:freertos\src/tasks.c **** 
  21:freertos\src/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:freertos\src/tasks.c **** 
  23:freertos\src/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:freertos\src/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:freertos\src/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:freertos\src/tasks.c **** 
  27:freertos\src/tasks.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:freertos\src/tasks.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:freertos\src/tasks.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:freertos\src/tasks.c ****     >>! kernel.
  31:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 2


  32:freertos\src/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:freertos\src/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:freertos\src/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:freertos\src/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:freertos\src/tasks.c **** 
  37:freertos\src/tasks.c ****     1 tab == 4 spaces!
  38:freertos\src/tasks.c **** 
  39:freertos\src/tasks.c ****     ***************************************************************************
  40:freertos\src/tasks.c ****      *                                                                       *
  41:freertos\src/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:freertos\src/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:freertos\src/tasks.c ****      *                                                                       *
  44:freertos\src/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:freertos\src/tasks.c ****      *                                                                       *
  46:freertos\src/tasks.c ****     ***************************************************************************
  47:freertos\src/tasks.c **** 
  48:freertos\src/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:freertos\src/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:freertos\src/tasks.c **** 
  51:freertos\src/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:freertos\src/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:freertos\src/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:freertos\src/tasks.c **** 
  55:freertos\src/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:freertos\src/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:freertos\src/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:freertos\src/tasks.c **** 
  59:freertos\src/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:freertos\src/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:freertos\src/tasks.c ****     mission critical applications that require provable dependability.
  62:freertos\src/tasks.c **** 
  63:freertos\src/tasks.c ****     1 tab == 4 spaces!
  64:freertos\src/tasks.c **** */
  65:freertos\src/tasks.c **** 
  66:freertos\src/tasks.c **** /* Standard includes. */
  67:freertos\src/tasks.c **** #include <stdlib.h>
  68:freertos\src/tasks.c **** #include <string.h>
  69:freertos\src/tasks.c **** 
  70:freertos\src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:freertos\src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:freertos\src/tasks.c **** task.h is included from an application file. */
  73:freertos\src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:freertos\src/tasks.c **** 
  75:freertos\src/tasks.c **** /* FreeRTOS includes. */
  76:freertos\src/tasks.c **** #include "FreeRTOS.h"
  77:freertos\src/tasks.c **** #include "task.h"
  78:freertos\src/tasks.c **** #include "timers.h"
  79:freertos\src/tasks.c **** #include "StackMacros.h"
  80:freertos\src/tasks.c **** 
  81:freertos\src/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:freertos\src/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:freertos\src/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:freertos\src/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:freertos\src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:freertos\src/tasks.c **** 
  87:freertos\src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:freertos\src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 3


  89:freertos\src/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:freertos\src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:freertos\src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:freertos\src/tasks.c **** 	#include <stdio.h>
  93:freertos\src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:freertos\src/tasks.c **** 
  95:freertos\src/tasks.c **** /* Sanity check the configuration. */
  96:freertos\src/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:freertos\src/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:freertos\src/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:freertos\src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:freertos\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:freertos\src/tasks.c **** 
 102:freertos\src/tasks.c **** /*
 103:freertos\src/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:freertos\src/tasks.c ****  */
 105:freertos\src/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:freertos\src/tasks.c **** 
 107:freertos\src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 108:freertos\src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 109:freertos\src/tasks.c **** 	performed just because a higher priority task has been woken. */
 110:freertos\src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 111:freertos\src/tasks.c **** #else
 112:freertos\src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 113:freertos\src/tasks.c **** #endif
 114:freertos\src/tasks.c **** 
 115:freertos\src/tasks.c **** /*
 116:freertos\src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 117:freertos\src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 118:freertos\src/tasks.c ****  * (the task's run time environment, including register values)
 119:freertos\src/tasks.c ****  */
 120:freertos\src/tasks.c **** typedef struct tskTaskControlBlock
 121:freertos\src/tasks.c **** {
 122:freertos\src/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
 123:freertos\src/tasks.c **** 
 124:freertos\src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 125:freertos\src/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
 126:freertos\src/tasks.c **** 	#endif
 127:freertos\src/tasks.c **** 
 128:freertos\src/tasks.c **** 	xListItem				xGenericListItem;	/*< The list that the state list item of a task is reference from d
 129:freertos\src/tasks.c **** 	xListItem				xEventListItem;		/*< Used to reference a task from an event list. */
 130:freertos\src/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 131:freertos\src/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
 132:freertos\src/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
 133:freertos\src/tasks.c **** 
 134:freertos\src/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 135:freertos\src/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Points to the end of the stack on architectures where the sta
 136:freertos\src/tasks.c **** 	#endif
 137:freertos\src/tasks.c **** 
 138:freertos\src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 139:freertos\src/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting; /*< Holds the critical section nesting depth for ports 
 140:freertos\src/tasks.c **** 	#endif
 141:freertos\src/tasks.c **** 
 142:freertos\src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 143:freertos\src/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< Stores a number that increments each time a TCB is create
 144:freertos\src/tasks.c **** 		unsigned portBASE_TYPE  uxTaskNumber;	/*< Stores a number specifically for use by third party tra
 145:freertos\src/tasks.c **** 	#endif
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 4


 146:freertos\src/tasks.c **** 
 147:freertos\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 148:freertos\src/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 149:freertos\src/tasks.c **** 	#endif
 150:freertos\src/tasks.c **** 
 151:freertos\src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 152:freertos\src/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 153:freertos\src/tasks.c **** 	#endif
 154:freertos\src/tasks.c **** 
 155:freertos\src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 156:freertos\src/tasks.c **** 		unsigned long ulRunTimeCounter;			/*< Stores the amount of time the task has spent in the Running
 157:freertos\src/tasks.c **** 	#endif
 158:freertos\src/tasks.c **** 
 159:freertos\src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 160:freertos\src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 161:freertos\src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 162:freertos\src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 163:freertos\src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 164:freertos\src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 165:freertos\src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 166:freertos\src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 167:freertos\src/tasks.c **** 		struct _reent xNewLib_reent;
 168:freertos\src/tasks.c **** 	#endif
 169:freertos\src/tasks.c **** 
 170:freertos\src/tasks.c **** } tskTCB;
 171:freertos\src/tasks.c **** 
 172:freertos\src/tasks.c **** 
 173:freertos\src/tasks.c **** /*
 174:freertos\src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 175:freertos\src/tasks.c ****  * be global, rather than file scope.
 176:freertos\src/tasks.c ****  */
 177:freertos\src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 178:freertos\src/tasks.c **** 	#define static
 179:freertos\src/tasks.c **** #endif
 180:freertos\src/tasks.c **** 
 181:freertos\src/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 182:freertos\src/tasks.c **** static variables must be declared volatile. */
 183:freertos\src/tasks.c **** 
 184:freertos\src/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 185:freertos\src/tasks.c **** 
 186:freertos\src/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 187:freertos\src/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 188:freertos\src/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 189:freertos\src/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 190:freertos\src/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList;				/*< Points to the delayed task list c
 191:freertos\src/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 192:freertos\src/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 193:freertos\src/tasks.c **** 
 194:freertos\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 195:freertos\src/tasks.c **** 
 196:freertos\src/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 197:freertos\src/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 198:freertos\src/tasks.c **** 
 199:freertos\src/tasks.c **** #endif
 200:freertos\src/tasks.c **** 
 201:freertos\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 202:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 5


 203:freertos\src/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 204:freertos\src/tasks.c **** 
 205:freertos\src/tasks.c **** #endif
 206:freertos\src/tasks.c **** 
 207:freertos\src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 208:freertos\src/tasks.c **** 
 209:freertos\src/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task
 210:freertos\src/tasks.c **** 
 211:freertos\src/tasks.c **** #endif
 212:freertos\src/tasks.c **** 
 213:freertos\src/tasks.c **** /* Other file private variables. --------------------------------*/
 214:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 215:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 216:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 217:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 218:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 219:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxPendedTicks 			= ( unsigned portBASE_TYPE 
 220:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xYieldPending 					= pdFALSE;
 221:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 222:freertos\src/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 223:freertos\src/tasks.c **** PRIVILEGED_DATA static volatile portTickType xNextTaskUnblockTime				= portMAX_DELAY;
 224:freertos\src/tasks.c **** 
 225:freertos\src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 226:freertos\src/tasks.c **** 
 227:freertos\src/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 228:freertos\src/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTotalRunTime = 0UL;			/*< Holds the total amount of executi
 229:freertos\src/tasks.c **** 
 230:freertos\src/tasks.c **** #endif
 231:freertos\src/tasks.c **** 
 232:freertos\src/tasks.c **** /*lint +e956 */
 233:freertos\src/tasks.c **** 
 234:freertos\src/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 235:freertos\src/tasks.c **** 
 236:freertos\src/tasks.c **** /*
 237:freertos\src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 238:freertos\src/tasks.c ****  * is used purely for checking the high water mark for tasks.
 239:freertos\src/tasks.c ****  */
 240:freertos\src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 241:freertos\src/tasks.c **** 
 242:freertos\src/tasks.c **** /*
 243:freertos\src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 244:freertos\src/tasks.c ****  */
 245:freertos\src/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 246:freertos\src/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 247:freertos\src/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 248:freertos\src/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 249:freertos\src/tasks.c **** 
 250:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 251:freertos\src/tasks.c **** 
 252:freertos\src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 253:freertos\src/tasks.c **** 
 254:freertos\src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 255:freertos\src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 256:freertos\src/tasks.c **** 	microcontroller architecture. */
 257:freertos\src/tasks.c **** 
 258:freertos\src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 259:freertos\src/tasks.c **** 	state task. */
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 6


 260:freertos\src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )																		\
 261:freertos\src/tasks.c **** 	{																													\
 262:freertos\src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )																		\
 263:freertos\src/tasks.c **** 		{																												\
 264:freertos\src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );																		\
 265:freertos\src/tasks.c **** 		}																												\
 266:freertos\src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 267:freertos\src/tasks.c **** 
 268:freertos\src/tasks.c **** 	/*-----------------------------------------------------------*/
 269:freertos\src/tasks.c **** 
 270:freertos\src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()																			\
 271:freertos\src/tasks.c **** 	{																													\
 272:freertos\src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */												\
 273:freertos\src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )										\
 274:freertos\src/tasks.c **** 		{																												\
 275:freertos\src/tasks.c **** 			configASSERT( uxTopReadyPriority );																			\
 276:freertos\src/tasks.c **** 			--uxTopReadyPriority;																						\
 277:freertos\src/tasks.c **** 		}																												\
 278:freertos\src/tasks.c **** 																														\
 279:freertos\src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of										\
 280:freertos\src/tasks.c **** 		the	same priority get an equal share of the processor time. */													\
 281:freertos\src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );						\
 282:freertos\src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 283:freertos\src/tasks.c **** 
 284:freertos\src/tasks.c **** 	/*-----------------------------------------------------------*/
 285:freertos\src/tasks.c **** 
 286:freertos\src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 287:freertos\src/tasks.c **** 	they are only required when a port optimised method of task selection is
 288:freertos\src/tasks.c **** 	being used. */
 289:freertos\src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 290:freertos\src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 291:freertos\src/tasks.c **** 
 292:freertos\src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 293:freertos\src/tasks.c **** 
 294:freertos\src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 295:freertos\src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 296:freertos\src/tasks.c **** 	architecture being used. */
 297:freertos\src/tasks.c **** 
 298:freertos\src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 299:freertos\src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 300:freertos\src/tasks.c **** 
 301:freertos\src/tasks.c **** 	/*-----------------------------------------------------------*/
 302:freertos\src/tasks.c **** 
 303:freertos\src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 304:freertos\src/tasks.c **** 	{																								\
 305:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTopPriority;															\
 306:freertos\src/tasks.c **** 																									\
 307:freertos\src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 308:freertos\src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 309:freertos\src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 310:freertos\src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 311:freertos\src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 312:freertos\src/tasks.c **** 
 313:freertos\src/tasks.c **** 	/*-----------------------------------------------------------*/
 314:freertos\src/tasks.c **** 
 315:freertos\src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 316:freertos\src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 7


 317:freertos\src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 318:freertos\src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )													\
 319:freertos\src/tasks.c **** 	{																								\
 320:freertos\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )				\
 321:freertos\src/tasks.c **** 		{																							\
 322:freertos\src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );						\
 323:freertos\src/tasks.c **** 		}																							\
 324:freertos\src/tasks.c **** 	}
 325:freertos\src/tasks.c **** 
 326:freertos\src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 327:freertos\src/tasks.c **** 
 328:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 329:freertos\src/tasks.c **** 
 330:freertos\src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 331:freertos\src/tasks.c **** count overflows. */
 332:freertos\src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 333:freertos\src/tasks.c **** {																									\
 334:freertos\src/tasks.c **** 	xList *pxTemp;																					\
 335:freertos\src/tasks.c **** 																									\
 336:freertos\src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 337:freertos\src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 338:freertos\src/tasks.c **** 																									\
 339:freertos\src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 340:freertos\src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 341:freertos\src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 342:freertos\src/tasks.c **** 	xNumOfOverflows++;																				\
 343:freertos\src/tasks.c **** 																									\
 344:freertos\src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )											\
 345:freertos\src/tasks.c **** 	{																								\
 346:freertos\src/tasks.c **** 		/* The new current delayed list is empty.  Set												\
 347:freertos\src/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is									\
 348:freertos\src/tasks.c **** 		extremely unlikely that the																	\
 349:freertos\src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until								\
 350:freertos\src/tasks.c **** 		there is an item in the delayed list. */													\
 351:freertos\src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;														\
 352:freertos\src/tasks.c **** 	}																								\
 353:freertos\src/tasks.c **** 	else																							\
 354:freertos\src/tasks.c **** 	{																								\
 355:freertos\src/tasks.c **** 		/* The new current delayed list is not empty, get the value of								\
 356:freertos\src/tasks.c **** 		the item at the head of the delayed list.  This is the time at								\
 357:freertos\src/tasks.c **** 		which the task at the head of the delayed list should be removed							\
 358:freertos\src/tasks.c **** 		from the Blocked state. */																	\
 359:freertos\src/tasks.c **** 		pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );						\
 360:freertos\src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );				\
 361:freertos\src/tasks.c **** 	}																								\
 362:freertos\src/tasks.c **** }
 363:freertos\src/tasks.c **** 
 364:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 365:freertos\src/tasks.c **** 
 366:freertos\src/tasks.c **** /*
 367:freertos\src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 368:freertos\src/tasks.c ****  * the task.  It is inserted at the end of the list.
 369:freertos\src/tasks.c ****  */
 370:freertos\src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																				\
 371:freertos\src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )																			\
 372:freertos\src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																\
 373:freertos\src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 8


 374:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 375:freertos\src/tasks.c **** 
 376:freertos\src/tasks.c **** /*
 377:freertos\src/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 378:freertos\src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 379:freertos\src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 380:freertos\src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 381:freertos\src/tasks.c ****  */
 382:freertos\src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 383:freertos\src/tasks.c **** 
 384:freertos\src/tasks.c **** /* Callback function prototypes. --------------------------*/
 385:freertos\src/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle xTask, signed char *pcTaskName );
 386:freertos\src/tasks.c **** extern void vApplicationTickHook( void );
 387:freertos\src/tasks.c **** 
 388:freertos\src/tasks.c **** /* File private functions. --------------------------------*/
 389:freertos\src/tasks.c **** 
 390:freertos\src/tasks.c **** /*
 391:freertos\src/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 392:freertos\src/tasks.c ****  * into the TCB structure.
 393:freertos\src/tasks.c ****  */
 394:freertos\src/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 395:freertos\src/tasks.c **** 
 396:freertos\src/tasks.c **** /*
 397:freertos\src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 398:freertos\src/tasks.c ****  * automatically upon the creation of the first task.
 399:freertos\src/tasks.c ****  */
 400:freertos\src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 401:freertos\src/tasks.c **** 
 402:freertos\src/tasks.c **** /*
 403:freertos\src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 404:freertos\src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 405:freertos\src/tasks.c ****  * creation of the first user task.
 406:freertos\src/tasks.c ****  *
 407:freertos\src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 408:freertos\src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 409:freertos\src/tasks.c ****  *
 410:freertos\src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 411:freertos\src/tasks.c ****  *
 412:freertos\src/tasks.c ****  */
 413:freertos\src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 414:freertos\src/tasks.c **** 
 415:freertos\src/tasks.c **** /*
 416:freertos\src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 417:freertos\src/tasks.c ****  * including the stack pointed to by the TCB.
 418:freertos\src/tasks.c ****  *
 419:freertos\src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 420:freertos\src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 421:freertos\src/tasks.c ****  */
 422:freertos\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 423:freertos\src/tasks.c **** 
 424:freertos\src/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 425:freertos\src/tasks.c **** 
 426:freertos\src/tasks.c **** #endif
 427:freertos\src/tasks.c **** 
 428:freertos\src/tasks.c **** /*
 429:freertos\src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 430:freertos\src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 9


 431:freertos\src/tasks.c ****  * and its TCB deleted.
 432:freertos\src/tasks.c ****  */
 433:freertos\src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 434:freertos\src/tasks.c **** 
 435:freertos\src/tasks.c **** /*
 436:freertos\src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 437:freertos\src/tasks.c ****  * either the current or the overflow delayed task list.
 438:freertos\src/tasks.c ****  */
 439:freertos\src/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 440:freertos\src/tasks.c **** 
 441:freertos\src/tasks.c **** /*
 442:freertos\src/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 443:freertos\src/tasks.c ****  * allocation was successful.
 444:freertos\src/tasks.c ****  */
 445:freertos\src/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 446:freertos\src/tasks.c **** 
 447:freertos\src/tasks.c **** /*
 448:freertos\src/tasks.c ****  * Fills an xTaskStatusType structure with information on each task that is
 449:freertos\src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 450:freertos\src/tasks.c ****  * a suspended list, etc.).
 451:freertos\src/tasks.c ****  *
 452:freertos\src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 453:freertos\src/tasks.c ****  * NORMAL APPLICATION CODE.
 454:freertos\src/tasks.c ****  */
 455:freertos\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 456:freertos\src/tasks.c **** 
 457:freertos\src/tasks.c **** 	static unsigned portBASE_TYPE prvListTaskWithinSingleList( xTaskStatusType *pxTaskStatusArray, xLi
 458:freertos\src/tasks.c **** 
 459:freertos\src/tasks.c **** #endif
 460:freertos\src/tasks.c **** 
 461:freertos\src/tasks.c **** /*
 462:freertos\src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 463:freertos\src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 464:freertos\src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 465:freertos\src/tasks.c ****  */
 466:freertos\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 467:freertos\src/tasks.c **** 
 468:freertos\src/tasks.c **** 	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_
 469:freertos\src/tasks.c **** 
 470:freertos\src/tasks.c **** #endif
 471:freertos\src/tasks.c **** 
 472:freertos\src/tasks.c **** /*
 473:freertos\src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 474:freertos\src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 475:freertos\src/tasks.c ****  *
 476:freertos\src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 477:freertos\src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 478:freertos\src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 479:freertos\src/tasks.c ****  * set to a value other than 1.
 480:freertos\src/tasks.c ****  */
 481:freertos\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 482:freertos\src/tasks.c **** 
 483:freertos\src/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 484:freertos\src/tasks.c **** 
 485:freertos\src/tasks.c **** #endif
 486:freertos\src/tasks.c **** 
 487:freertos\src/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 10


 488:freertos\src/tasks.c **** {
 489:freertos\src/tasks.c **** signed portBASE_TYPE xReturn;
 490:freertos\src/tasks.c **** tskTCB * pxNewTCB;
 491:freertos\src/tasks.c **** 
 492:freertos\src/tasks.c **** 	configASSERT( pxTaskCode );
 493:freertos\src/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 494:freertos\src/tasks.c **** 
 495:freertos\src/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 496:freertos\src/tasks.c **** 	checking that the allocation was successful. */
 497:freertos\src/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 498:freertos\src/tasks.c **** 
 499:freertos\src/tasks.c **** 	if( pxNewTCB != NULL )
 500:freertos\src/tasks.c **** 	{
 501:freertos\src/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 502:freertos\src/tasks.c **** 
 503:freertos\src/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 504:freertos\src/tasks.c **** 			/* Should the task be created in privileged mode? */
 505:freertos\src/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 506:freertos\src/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 507:freertos\src/tasks.c **** 			{
 508:freertos\src/tasks.c **** 				xRunPrivileged = pdTRUE;
 509:freertos\src/tasks.c **** 			}
 510:freertos\src/tasks.c **** 			else
 511:freertos\src/tasks.c **** 			{
 512:freertos\src/tasks.c **** 				xRunPrivileged = pdFALSE;
 513:freertos\src/tasks.c **** 			}
 514:freertos\src/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 515:freertos\src/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 516:freertos\src/tasks.c **** 
 517:freertos\src/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 518:freertos\src/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 519:freertos\src/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 520:freertos\src/tasks.c **** 		required by the port. */
 521:freertos\src/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 522:freertos\src/tasks.c **** 		{
 523:freertos\src/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 524:freertos\src/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 525:freertos\src/tasks.c **** 
 526:freertos\src/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 527:freertos\src/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 528:freertos\src/tasks.c **** 		}
 529:freertos\src/tasks.c **** 		#else /* portSTACK_GROWTH */
 530:freertos\src/tasks.c **** 		{
 531:freertos\src/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 532:freertos\src/tasks.c **** 
 533:freertos\src/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 534:freertos\src/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 535:freertos\src/tasks.c **** 
 536:freertos\src/tasks.c **** 			/* If we want to use stack checking on architectures that use
 537:freertos\src/tasks.c **** 			a positive stack growth direction then we also need to store the
 538:freertos\src/tasks.c **** 			other extreme of the stack space. */
 539:freertos\src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 540:freertos\src/tasks.c **** 		}
 541:freertos\src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 542:freertos\src/tasks.c **** 
 543:freertos\src/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 544:freertos\src/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 11


 545:freertos\src/tasks.c **** 
 546:freertos\src/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 547:freertos\src/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 548:freertos\src/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 549:freertos\src/tasks.c **** 		the	top of stack variable is updated. */
 550:freertos\src/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 551:freertos\src/tasks.c **** 		{
 552:freertos\src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 553:freertos\src/tasks.c **** 		}
 554:freertos\src/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 555:freertos\src/tasks.c **** 		{
 556:freertos\src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 557:freertos\src/tasks.c **** 		}
 558:freertos\src/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 559:freertos\src/tasks.c **** 
 560:freertos\src/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 561:freertos\src/tasks.c **** 		{
 562:freertos\src/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 563:freertos\src/tasks.c **** 			task can use this as a handle to delete the task later if
 564:freertos\src/tasks.c **** 			required.*/
 565:freertos\src/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 566:freertos\src/tasks.c **** 		}
 567:freertos\src/tasks.c **** 
 568:freertos\src/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 569:freertos\src/tasks.c **** 		updated. */
 570:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
 571:freertos\src/tasks.c **** 		{
 572:freertos\src/tasks.c **** 			uxCurrentNumberOfTasks++;
 573:freertos\src/tasks.c **** 			if( pxCurrentTCB == NULL )
 574:freertos\src/tasks.c **** 			{
 575:freertos\src/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 576:freertos\src/tasks.c **** 				the suspended state - make this the current task. */
 577:freertos\src/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 578:freertos\src/tasks.c **** 
 579:freertos\src/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 580:freertos\src/tasks.c **** 				{
 581:freertos\src/tasks.c **** 					/* This is the first task to be created so do the preliminary
 582:freertos\src/tasks.c **** 					initialisation required.  We will not recover if this call
 583:freertos\src/tasks.c **** 					fails, but we will report the failure. */
 584:freertos\src/tasks.c **** 					prvInitialiseTaskLists();
 585:freertos\src/tasks.c **** 				}
 586:freertos\src/tasks.c **** 			}
 587:freertos\src/tasks.c **** 			else
 588:freertos\src/tasks.c **** 			{
 589:freertos\src/tasks.c **** 				/* If the scheduler is not already running, make this task the
 590:freertos\src/tasks.c **** 				current task if it is the highest priority task to be created
 591:freertos\src/tasks.c **** 				so far. */
 592:freertos\src/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 593:freertos\src/tasks.c **** 				{
 594:freertos\src/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 595:freertos\src/tasks.c **** 					{
 596:freertos\src/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 597:freertos\src/tasks.c **** 					}
 598:freertos\src/tasks.c **** 				}
 599:freertos\src/tasks.c **** 			}
 600:freertos\src/tasks.c **** 
 601:freertos\src/tasks.c **** 			uxTaskNumber++;
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 12


 602:freertos\src/tasks.c **** 
 603:freertos\src/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 604:freertos\src/tasks.c **** 			{
 605:freertos\src/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 606:freertos\src/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 607:freertos\src/tasks.c **** 			}
 608:freertos\src/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 609:freertos\src/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 610:freertos\src/tasks.c **** 
 611:freertos\src/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 612:freertos\src/tasks.c **** 
 613:freertos\src/tasks.c **** 			xReturn = pdPASS;
 614:freertos\src/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 615:freertos\src/tasks.c **** 		}
 616:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
 617:freertos\src/tasks.c **** 	}
 618:freertos\src/tasks.c **** 	else
 619:freertos\src/tasks.c **** 	{
 620:freertos\src/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 621:freertos\src/tasks.c **** 		traceTASK_CREATE_FAILED();
 622:freertos\src/tasks.c **** 	}
 623:freertos\src/tasks.c **** 
 624:freertos\src/tasks.c **** 	if( xReturn == pdPASS )
 625:freertos\src/tasks.c **** 	{
 626:freertos\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 627:freertos\src/tasks.c **** 		{
 628:freertos\src/tasks.c **** 			/* If the created task is of a higher priority than the current task
 629:freertos\src/tasks.c **** 			then it should run now. */
 630:freertos\src/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 631:freertos\src/tasks.c **** 			{
 632:freertos\src/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 633:freertos\src/tasks.c **** 			}
 634:freertos\src/tasks.c **** 		}
 635:freertos\src/tasks.c **** 	}
 636:freertos\src/tasks.c **** 
 637:freertos\src/tasks.c **** 	return xReturn;
 638:freertos\src/tasks.c **** }
 639:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 640:freertos\src/tasks.c **** 
 641:freertos\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 642:freertos\src/tasks.c **** 
 643:freertos\src/tasks.c **** 	void vTaskDelete( xTaskHandle xTaskToDelete )
 644:freertos\src/tasks.c **** 	{
 645:freertos\src/tasks.c **** 	tskTCB *pxTCB;
 646:freertos\src/tasks.c **** 
 647:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
 648:freertos\src/tasks.c **** 		{
 649:freertos\src/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 650:freertos\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 651:freertos\src/tasks.c **** 
 652:freertos\src/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 653:freertos\src/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 654:freertos\src/tasks.c **** 			the termination list and free up any memory allocated by the
 655:freertos\src/tasks.c **** 			scheduler for the TCB and stack. */
 656:freertos\src/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 657:freertos\src/tasks.c **** 			{
 658:freertos\src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 13


 659:freertos\src/tasks.c **** 			}
 660:freertos\src/tasks.c **** 
 661:freertos\src/tasks.c **** 			/* Is the task waiting on an event also? */
 662:freertos\src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 663:freertos\src/tasks.c **** 			{
 664:freertos\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 665:freertos\src/tasks.c **** 			}
 666:freertos\src/tasks.c **** 
 667:freertos\src/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 668:freertos\src/tasks.c **** 
 669:freertos\src/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 670:freertos\src/tasks.c **** 			there is a task that has been deleted and that it should therefore
 671:freertos\src/tasks.c **** 			check the xTasksWaitingTermination list. */
 672:freertos\src/tasks.c **** 			++uxTasksDeleted;
 673:freertos\src/tasks.c **** 
 674:freertos\src/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 675:freertos\src/tasks.c **** 			can detect that the task lists need re-generating. */
 676:freertos\src/tasks.c **** 			uxTaskNumber++;
 677:freertos\src/tasks.c **** 
 678:freertos\src/tasks.c **** 			traceTASK_DELETE( pxTCB );
 679:freertos\src/tasks.c **** 		}
 680:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
 681:freertos\src/tasks.c **** 
 682:freertos\src/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 683:freertos\src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 684:freertos\src/tasks.c **** 		{
 685:freertos\src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 686:freertos\src/tasks.c **** 			{
 687:freertos\src/tasks.c **** 				portYIELD_WITHIN_API();
 688:freertos\src/tasks.c **** 			}
 689:freertos\src/tasks.c **** 		}
 690:freertos\src/tasks.c **** 	}
 691:freertos\src/tasks.c **** 
 692:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 693:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 694:freertos\src/tasks.c **** 
 695:freertos\src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 696:freertos\src/tasks.c **** 
 697:freertos\src/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 698:freertos\src/tasks.c **** 	{
 699:freertos\src/tasks.c **** 	portTickType xTimeToWake;
 700:freertos\src/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 701:freertos\src/tasks.c **** 
 702:freertos\src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 703:freertos\src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 704:freertos\src/tasks.c **** 
 705:freertos\src/tasks.c **** 		vTaskSuspendAll();
 706:freertos\src/tasks.c **** 		{
 707:freertos\src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 708:freertos\src/tasks.c **** 			block. */
 709:freertos\src/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
 710:freertos\src/tasks.c **** 
 711:freertos\src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 712:freertos\src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 713:freertos\src/tasks.c **** 
 714:freertos\src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 715:freertos\src/tasks.c **** 			{
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 14


 716:freertos\src/tasks.c **** 				/* The tick count has overflowed since this function was
 717:freertos\src/tasks.c **** 				lasted called.  In this case the only time we should ever
 718:freertos\src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 719:freertos\src/tasks.c **** 				and the wake time is greater than the tick time.  When this
 720:freertos\src/tasks.c **** 				is the case it is as if neither time had overflowed. */
 721:freertos\src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 722:freertos\src/tasks.c **** 				{
 723:freertos\src/tasks.c **** 					xShouldDelay = pdTRUE;
 724:freertos\src/tasks.c **** 				}
 725:freertos\src/tasks.c **** 			}
 726:freertos\src/tasks.c **** 			else
 727:freertos\src/tasks.c **** 			{
 728:freertos\src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 729:freertos\src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 730:freertos\src/tasks.c **** 				tick time is less than the wake time. */
 731:freertos\src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 732:freertos\src/tasks.c **** 				{
 733:freertos\src/tasks.c **** 					xShouldDelay = pdTRUE;
 734:freertos\src/tasks.c **** 				}
 735:freertos\src/tasks.c **** 			}
 736:freertos\src/tasks.c **** 
 737:freertos\src/tasks.c **** 			/* Update the wake time ready for the next call. */
 738:freertos\src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 739:freertos\src/tasks.c **** 
 740:freertos\src/tasks.c **** 			if( xShouldDelay != pdFALSE )
 741:freertos\src/tasks.c **** 			{
 742:freertos\src/tasks.c **** 				traceTASK_DELAY_UNTIL();
 743:freertos\src/tasks.c **** 
 744:freertos\src/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 745:freertos\src/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 746:freertos\src/tasks.c **** 				both lists. */
 747:freertos\src/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 748:freertos\src/tasks.c **** 				{
 749:freertos\src/tasks.c **** 					/* The current task must be in a ready list, so there is
 750:freertos\src/tasks.c **** 					no need to check, and the port reset macro can be called
 751:freertos\src/tasks.c **** 					directly. */
 752:freertos\src/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 753:freertos\src/tasks.c **** 				}
 754:freertos\src/tasks.c **** 
 755:freertos\src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 756:freertos\src/tasks.c **** 			}
 757:freertos\src/tasks.c **** 		}
 758:freertos\src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 759:freertos\src/tasks.c **** 
 760:freertos\src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 761:freertos\src/tasks.c **** 		have put ourselves to sleep. */
 762:freertos\src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 763:freertos\src/tasks.c **** 		{
 764:freertos\src/tasks.c **** 			portYIELD_WITHIN_API();
 765:freertos\src/tasks.c **** 		}
 766:freertos\src/tasks.c **** 	}
 767:freertos\src/tasks.c **** 
 768:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 769:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 770:freertos\src/tasks.c **** 
 771:freertos\src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 772:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 15


 773:freertos\src/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 774:freertos\src/tasks.c **** 	{
 775:freertos\src/tasks.c **** 	portTickType xTimeToWake;
 776:freertos\src/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 777:freertos\src/tasks.c **** 
 778:freertos\src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 779:freertos\src/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 780:freertos\src/tasks.c **** 		{
 781:freertos\src/tasks.c **** 			vTaskSuspendAll();
 782:freertos\src/tasks.c **** 			{
 783:freertos\src/tasks.c **** 				traceTASK_DELAY();
 784:freertos\src/tasks.c **** 
 785:freertos\src/tasks.c **** 				/* A task that is removed from the event list while the
 786:freertos\src/tasks.c **** 				scheduler is suspended will not get placed in the ready
 787:freertos\src/tasks.c **** 				list or removed from the blocked list until the scheduler
 788:freertos\src/tasks.c **** 				is resumed.
 789:freertos\src/tasks.c **** 
 790:freertos\src/tasks.c **** 				This task cannot be in an event list as it is the currently
 791:freertos\src/tasks.c **** 				executing task. */
 792:freertos\src/tasks.c **** 
 793:freertos\src/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 794:freertos\src/tasks.c **** 				not a problem. */
 795:freertos\src/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 796:freertos\src/tasks.c **** 
 797:freertos\src/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 798:freertos\src/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 799:freertos\src/tasks.c **** 				both lists. */
 800:freertos\src/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 801:freertos\src/tasks.c **** 				{
 802:freertos\src/tasks.c **** 					/* The current task must be in a ready list, so there is
 803:freertos\src/tasks.c **** 					no need to check, and the port reset macro can be called
 804:freertos\src/tasks.c **** 					directly. */
 805:freertos\src/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 806:freertos\src/tasks.c **** 				}
 807:freertos\src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 808:freertos\src/tasks.c **** 			}
 809:freertos\src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 810:freertos\src/tasks.c **** 		}
 811:freertos\src/tasks.c **** 
 812:freertos\src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 813:freertos\src/tasks.c **** 		have put ourselves to sleep. */
 814:freertos\src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 815:freertos\src/tasks.c **** 		{
 816:freertos\src/tasks.c **** 			portYIELD_WITHIN_API();
 817:freertos\src/tasks.c **** 		}
 818:freertos\src/tasks.c **** 	}
 819:freertos\src/tasks.c **** 
 820:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 821:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 822:freertos\src/tasks.c **** 
 823:freertos\src/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 824:freertos\src/tasks.c **** 
 825:freertos\src/tasks.c **** 	eTaskState eTaskGetState( xTaskHandle xTask )
 826:freertos\src/tasks.c **** 	{
 827:freertos\src/tasks.c **** 	eTaskState eReturn;
 828:freertos\src/tasks.c **** 	xList *pxStateList;
 829:freertos\src/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 16


 830:freertos\src/tasks.c **** 
 831:freertos\src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 832:freertos\src/tasks.c **** 		{
 833:freertos\src/tasks.c **** 			/* The task calling this function is querying its own state. */
 834:freertos\src/tasks.c **** 			eReturn = eRunning;
 835:freertos\src/tasks.c **** 		}
 836:freertos\src/tasks.c **** 		else
 837:freertos\src/tasks.c **** 		{
 838:freertos\src/tasks.c **** 			taskENTER_CRITICAL();
 839:freertos\src/tasks.c **** 			{
 840:freertos\src/tasks.c **** 				pxStateList = ( xList * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 841:freertos\src/tasks.c **** 			}
 842:freertos\src/tasks.c **** 			taskEXIT_CRITICAL();
 843:freertos\src/tasks.c **** 
 844:freertos\src/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 845:freertos\src/tasks.c **** 			{
 846:freertos\src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 847:freertos\src/tasks.c **** 				lists. */
 848:freertos\src/tasks.c **** 				eReturn = eBlocked;
 849:freertos\src/tasks.c **** 			}
 850:freertos\src/tasks.c **** 
 851:freertos\src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 852:freertos\src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 853:freertos\src/tasks.c **** 				{
 854:freertos\src/tasks.c **** 					/* The task being queried is referenced from the suspended
 855:freertos\src/tasks.c **** 					list.  Is it genuinely suspended or is it block
 856:freertos\src/tasks.c **** 					indefinitely? */
 857:freertos\src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 858:freertos\src/tasks.c **** 					{
 859:freertos\src/tasks.c **** 						eReturn = eSuspended;
 860:freertos\src/tasks.c **** 					}
 861:freertos\src/tasks.c **** 					else
 862:freertos\src/tasks.c **** 					{
 863:freertos\src/tasks.c **** 						eReturn = eBlocked;
 864:freertos\src/tasks.c **** 					}
 865:freertos\src/tasks.c **** 				}
 866:freertos\src/tasks.c **** 			#endif
 867:freertos\src/tasks.c **** 
 868:freertos\src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 869:freertos\src/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 870:freertos\src/tasks.c **** 				{
 871:freertos\src/tasks.c **** 					/* The task being queried is referenced from the deleted
 872:freertos\src/tasks.c **** 					tasks list. */
 873:freertos\src/tasks.c **** 					eReturn = eDeleted;
 874:freertos\src/tasks.c **** 				}
 875:freertos\src/tasks.c **** 			#endif
 876:freertos\src/tasks.c **** 
 877:freertos\src/tasks.c **** 			else
 878:freertos\src/tasks.c **** 			{
 879:freertos\src/tasks.c **** 				/* If the task is not in any other state, it must be in the
 880:freertos\src/tasks.c **** 				Ready (including pending ready) state. */
 881:freertos\src/tasks.c **** 				eReturn = eReady;
 882:freertos\src/tasks.c **** 			}
 883:freertos\src/tasks.c **** 		}
 884:freertos\src/tasks.c **** 
 885:freertos\src/tasks.c **** 		return eReturn;
 886:freertos\src/tasks.c **** 	}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 17


 887:freertos\src/tasks.c **** 
 888:freertos\src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
 889:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 890:freertos\src/tasks.c **** 
 891:freertos\src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 892:freertos\src/tasks.c **** 
 893:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask )
 894:freertos\src/tasks.c **** 	{
 895:freertos\src/tasks.c **** 	tskTCB *pxTCB;
 896:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 897:freertos\src/tasks.c **** 
 898:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
 899:freertos\src/tasks.c **** 		{
 900:freertos\src/tasks.c **** 			/* If null is passed in here then we are changing the
 901:freertos\src/tasks.c **** 			priority of the calling function. */
 902:freertos\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 903:freertos\src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 904:freertos\src/tasks.c **** 		}
 905:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
 906:freertos\src/tasks.c **** 
 907:freertos\src/tasks.c **** 		return uxReturn;
 908:freertos\src/tasks.c **** 	}
 909:freertos\src/tasks.c **** 
 910:freertos\src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
 911:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 912:freertos\src/tasks.c **** 
 913:freertos\src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 914:freertos\src/tasks.c **** 
 915:freertos\src/tasks.c **** 	void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority )
 916:freertos\src/tasks.c **** 	{
 917:freertos\src/tasks.c **** 	tskTCB *pxTCB;
 918:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxCurrentBasePriority, uxPriorityUsedOnEntry;
 919:freertos\src/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 920:freertos\src/tasks.c **** 
 921:freertos\src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 922:freertos\src/tasks.c **** 
 923:freertos\src/tasks.c **** 		/* Ensure the new priority is valid. */
 924:freertos\src/tasks.c **** 		if( uxNewPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 925:freertos\src/tasks.c **** 		{
 926:freertos\src/tasks.c **** 			uxNewPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 927:freertos\src/tasks.c **** 		}
 928:freertos\src/tasks.c **** 
 929:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
 930:freertos\src/tasks.c **** 		{
 931:freertos\src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
 932:freertos\src/tasks.c **** 			task that is being changed. */
 933:freertos\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 934:freertos\src/tasks.c **** 
 935:freertos\src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 936:freertos\src/tasks.c **** 
 937:freertos\src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 938:freertos\src/tasks.c **** 			{
 939:freertos\src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 940:freertos\src/tasks.c **** 			}
 941:freertos\src/tasks.c **** 			#else
 942:freertos\src/tasks.c **** 			{
 943:freertos\src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 18


 944:freertos\src/tasks.c **** 			}
 945:freertos\src/tasks.c **** 			#endif
 946:freertos\src/tasks.c **** 
 947:freertos\src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 948:freertos\src/tasks.c **** 			{
 949:freertos\src/tasks.c **** 				/* The priority change may have readied a task of higher
 950:freertos\src/tasks.c **** 				priority than the calling task. */
 951:freertos\src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 952:freertos\src/tasks.c **** 				{
 953:freertos\src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 954:freertos\src/tasks.c **** 					{
 955:freertos\src/tasks.c **** 						/* The priority of a task other than the currently
 956:freertos\src/tasks.c **** 						running task is being raised.  Is the priority being
 957:freertos\src/tasks.c **** 						raised above that of the running task? */
 958:freertos\src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 959:freertos\src/tasks.c **** 						{
 960:freertos\src/tasks.c **** 							xYieldRequired = pdTRUE;
 961:freertos\src/tasks.c **** 						}
 962:freertos\src/tasks.c **** 					}
 963:freertos\src/tasks.c **** 					else
 964:freertos\src/tasks.c **** 					{
 965:freertos\src/tasks.c **** 						/* The priority of the running task is being raised,
 966:freertos\src/tasks.c **** 						but the running task must already be the highest
 967:freertos\src/tasks.c **** 						priority task able to run so no yield is required. */
 968:freertos\src/tasks.c **** 					}
 969:freertos\src/tasks.c **** 				}
 970:freertos\src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 971:freertos\src/tasks.c **** 				{
 972:freertos\src/tasks.c **** 					/* Setting the priority of the running task down means
 973:freertos\src/tasks.c **** 					there may now be another task of higher priority that
 974:freertos\src/tasks.c **** 					is ready to execute. */
 975:freertos\src/tasks.c **** 					xYieldRequired = pdTRUE;
 976:freertos\src/tasks.c **** 				}
 977:freertos\src/tasks.c **** 				else
 978:freertos\src/tasks.c **** 				{
 979:freertos\src/tasks.c **** 					/* Setting the priority of any other task down does not
 980:freertos\src/tasks.c **** 					require a yield as the running task must be above the
 981:freertos\src/tasks.c **** 					new priority of the task being modified. */
 982:freertos\src/tasks.c **** 				}
 983:freertos\src/tasks.c **** 
 984:freertos\src/tasks.c **** 				/* Remember the ready list the task might be referenced from
 985:freertos\src/tasks.c **** 				before its uxPriority member is changed so the
 986:freertos\src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
 987:freertos\src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 988:freertos\src/tasks.c **** 
 989:freertos\src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 990:freertos\src/tasks.c **** 				{
 991:freertos\src/tasks.c **** 					/* Only change the priority being used if the task is not
 992:freertos\src/tasks.c **** 					currently using an inherited priority. */
 993:freertos\src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 994:freertos\src/tasks.c **** 					{
 995:freertos\src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 996:freertos\src/tasks.c **** 					}
 997:freertos\src/tasks.c **** 
 998:freertos\src/tasks.c **** 					/* The base priority gets set whatever. */
 999:freertos\src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1000:freertos\src/tasks.c **** 				}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 19


1001:freertos\src/tasks.c **** 				#else
1002:freertos\src/tasks.c **** 				{
1003:freertos\src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1004:freertos\src/tasks.c **** 				}
1005:freertos\src/tasks.c **** 				#endif
1006:freertos\src/tasks.c **** 
1007:freertos\src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( portTickType ) configMAX_PRIORITIES - 
1008:freertos\src/tasks.c **** 
1009:freertos\src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1010:freertos\src/tasks.c **** 				nothing more than change it's priority variable. However, if
1011:freertos\src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1012:freertos\src/tasks.c **** 				in the list appropriate to its new priority. */
1013:freertos\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
1014:freertos\src/tasks.c **** 				{
1015:freertos\src/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1016:freertos\src/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1017:freertos\src/tasks.c **** 					can do this even if the scheduler is suspended. */
1018:freertos\src/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1019:freertos\src/tasks.c **** 					{
1020:freertos\src/tasks.c **** 						/* It is known that the task is in its ready list so
1021:freertos\src/tasks.c **** 						there is no need to check again and the port level
1022:freertos\src/tasks.c **** 						reset macro can be called directly. */
1023:freertos\src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1024:freertos\src/tasks.c **** 					}
1025:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1026:freertos\src/tasks.c **** 				}
1027:freertos\src/tasks.c **** 
1028:freertos\src/tasks.c **** 				if( xYieldRequired == pdTRUE )
1029:freertos\src/tasks.c **** 				{
1030:freertos\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1031:freertos\src/tasks.c **** 				}
1032:freertos\src/tasks.c **** 
1033:freertos\src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1034:freertos\src/tasks.c **** 				optimised task selection is not being used. */
1035:freertos\src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1036:freertos\src/tasks.c **** 			}
1037:freertos\src/tasks.c **** 		}
1038:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
1039:freertos\src/tasks.c **** 	}
1040:freertos\src/tasks.c **** 
1041:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1042:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1043:freertos\src/tasks.c **** 
1044:freertos\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1045:freertos\src/tasks.c **** 
1046:freertos\src/tasks.c **** 	void vTaskSuspend( xTaskHandle xTaskToSuspend )
1047:freertos\src/tasks.c **** 	{
1048:freertos\src/tasks.c **** 	tskTCB *pxTCB;
1049:freertos\src/tasks.c **** 
1050:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
1051:freertos\src/tasks.c **** 		{
1052:freertos\src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1053:freertos\src/tasks.c **** 			being suspended. */
1054:freertos\src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1055:freertos\src/tasks.c **** 
1056:freertos\src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1057:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 20


1058:freertos\src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
1059:freertos\src/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1060:freertos\src/tasks.c **** 			{
1061:freertos\src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:freertos\src/tasks.c **** 			}
1063:freertos\src/tasks.c **** 
1064:freertos\src/tasks.c **** 			/* Is the task waiting on an event also? */
1065:freertos\src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1066:freertos\src/tasks.c **** 			{
1067:freertos\src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1068:freertos\src/tasks.c **** 			}
1069:freertos\src/tasks.c **** 
1070:freertos\src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1071:freertos\src/tasks.c **** 		}
1072:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
1073:freertos\src/tasks.c **** 
1074:freertos\src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1075:freertos\src/tasks.c **** 		{
1076:freertos\src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1077:freertos\src/tasks.c **** 			{
1078:freertos\src/tasks.c **** 				/* The current task has just been suspended. */
1079:freertos\src/tasks.c **** 				portYIELD_WITHIN_API();
1080:freertos\src/tasks.c **** 			}
1081:freertos\src/tasks.c **** 			else
1082:freertos\src/tasks.c **** 			{
1083:freertos\src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1084:freertos\src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1085:freertos\src/tasks.c **** 				must be adjusted to point to a different task. */
1086:freertos\src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1087:freertos\src/tasks.c **** 				{
1088:freertos\src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1089:freertos\src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1090:freertos\src/tasks.c **** 					be set to point to it no matter what its relative priority
1091:freertos\src/tasks.c **** 					is. */
1092:freertos\src/tasks.c **** 					pxCurrentTCB = NULL;
1093:freertos\src/tasks.c **** 				}
1094:freertos\src/tasks.c **** 				else
1095:freertos\src/tasks.c **** 				{
1096:freertos\src/tasks.c **** 					vTaskSwitchContext();
1097:freertos\src/tasks.c **** 				}
1098:freertos\src/tasks.c **** 			}
1099:freertos\src/tasks.c **** 		}
1100:freertos\src/tasks.c **** 	}
1101:freertos\src/tasks.c **** 
1102:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1103:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1104:freertos\src/tasks.c **** 
1105:freertos\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1106:freertos\src/tasks.c **** 
1107:freertos\src/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
1108:freertos\src/tasks.c **** 	{
1109:freertos\src/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
1110:freertos\src/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
1111:freertos\src/tasks.c **** 
1112:freertos\src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1113:freertos\src/tasks.c **** 		configASSERT( xTask );
1114:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 21


1115:freertos\src/tasks.c **** 		/* Is the task we are attempting to resume actually in the
1116:freertos\src/tasks.c **** 		suspended list? */
1117:freertos\src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
1118:freertos\src/tasks.c **** 		{
1119:freertos\src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1120:freertos\src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1121:freertos\src/tasks.c **** 			{
1122:freertos\src/tasks.c **** 				/* Is it in the suspended list because it is in the
1123:freertos\src/tasks.c **** 				Suspended state?  It is possible to be in the suspended
1124:freertos\src/tasks.c **** 				list because it is blocked on a task with no timeout
1125:freertos\src/tasks.c **** 				specified. */
1126:freertos\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1127:freertos\src/tasks.c **** 				{
1128:freertos\src/tasks.c **** 					xReturn = pdTRUE;
1129:freertos\src/tasks.c **** 				}
1130:freertos\src/tasks.c **** 			}
1131:freertos\src/tasks.c **** 		}
1132:freertos\src/tasks.c **** 
1133:freertos\src/tasks.c **** 		return xReturn;
1134:freertos\src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1135:freertos\src/tasks.c **** 
1136:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1137:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1138:freertos\src/tasks.c **** 
1139:freertos\src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1140:freertos\src/tasks.c **** 
1141:freertos\src/tasks.c **** 	void vTaskResume( xTaskHandle xTaskToResume )
1142:freertos\src/tasks.c **** 	{
1143:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
1144:freertos\src/tasks.c **** 
1145:freertos\src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1146:freertos\src/tasks.c **** 		configASSERT( xTaskToResume );
1147:freertos\src/tasks.c **** 
1148:freertos\src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1149:freertos\src/tasks.c **** 		currently executing task. */
1150:freertos\src/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1151:freertos\src/tasks.c **** 		{
1152:freertos\src/tasks.c **** 			taskENTER_CRITICAL();
1153:freertos\src/tasks.c **** 			{
1154:freertos\src/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1155:freertos\src/tasks.c **** 				{
1156:freertos\src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1157:freertos\src/tasks.c **** 
1158:freertos\src/tasks.c **** 					/* As we are in a critical section we can access the ready
1159:freertos\src/tasks.c **** 					lists even if the scheduler is suspended. */
1160:freertos\src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1161:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1162:freertos\src/tasks.c **** 
1163:freertos\src/tasks.c **** 					/* We may have just resumed a higher priority task. */
1164:freertos\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1165:freertos\src/tasks.c **** 					{
1166:freertos\src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1167:freertos\src/tasks.c **** 						but will leave the lists in the correct state for the
1168:freertos\src/tasks.c **** 						next yield. */
1169:freertos\src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1170:freertos\src/tasks.c **** 					}
1171:freertos\src/tasks.c **** 				}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 22


1172:freertos\src/tasks.c **** 			}
1173:freertos\src/tasks.c **** 			taskEXIT_CRITICAL();
1174:freertos\src/tasks.c **** 		}
1175:freertos\src/tasks.c **** 	}
1176:freertos\src/tasks.c **** 
1177:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1178:freertos\src/tasks.c **** 
1179:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1180:freertos\src/tasks.c **** 
1181:freertos\src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1182:freertos\src/tasks.c **** 
1183:freertos\src/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume )
1184:freertos\src/tasks.c **** 	{
1185:freertos\src/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
1186:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
1187:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;
1188:freertos\src/tasks.c **** 
1189:freertos\src/tasks.c **** 		configASSERT( xTaskToResume );
1190:freertos\src/tasks.c **** 
1191:freertos\src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1192:freertos\src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1193:freertos\src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1194:freertos\src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1195:freertos\src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1196:freertos\src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1197:freertos\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1198:freertos\src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1199:freertos\src/tasks.c **** 		been assigned a priority above the configured maximum system call
1200:freertos\src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1201:freertos\src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1202:freertos\src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1203:freertos\src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1204:freertos\src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1205:freertos\src/tasks.c **** 		provided on the following link:
1206:freertos\src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1207:freertos\src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1208:freertos\src/tasks.c **** 
1209:freertos\src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1210:freertos\src/tasks.c **** 		{
1211:freertos\src/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1212:freertos\src/tasks.c **** 			{
1213:freertos\src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1214:freertos\src/tasks.c **** 
1215:freertos\src/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1216:freertos\src/tasks.c **** 				{
1217:freertos\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1218:freertos\src/tasks.c **** 					{
1219:freertos\src/tasks.c **** 						xYieldRequired = pdTRUE;
1220:freertos\src/tasks.c **** 					}
1221:freertos\src/tasks.c **** 
1222:freertos\src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1223:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1224:freertos\src/tasks.c **** 				}
1225:freertos\src/tasks.c **** 				else
1226:freertos\src/tasks.c **** 				{
1227:freertos\src/tasks.c **** 					/* We cannot access the delayed or ready lists, so will hold this
1228:freertos\src/tasks.c **** 					task pending until the scheduler is resumed, at which point a
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 23


1229:freertos\src/tasks.c **** 					yield will be performed if necessary. */
1230:freertos\src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1231:freertos\src/tasks.c **** 				}
1232:freertos\src/tasks.c **** 			}
1233:freertos\src/tasks.c **** 		}
1234:freertos\src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1235:freertos\src/tasks.c **** 
1236:freertos\src/tasks.c **** 		return xYieldRequired;
1237:freertos\src/tasks.c **** 	}
1238:freertos\src/tasks.c **** 
1239:freertos\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1240:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1241:freertos\src/tasks.c **** 
1242:freertos\src/tasks.c **** void vTaskStartScheduler( void )
1243:freertos\src/tasks.c **** {
1244:freertos\src/tasks.c **** portBASE_TYPE xReturn;
1245:freertos\src/tasks.c **** 
1246:freertos\src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1247:freertos\src/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1248:freertos\src/tasks.c **** 	{
1249:freertos\src/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1250:freertos\src/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1251:freertos\src/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1252:freertos\src/tasks.c **** 	}
1253:freertos\src/tasks.c **** 	#else
1254:freertos\src/tasks.c **** 	{
1255:freertos\src/tasks.c **** 		/* Create the idle task without storing its handle. */
1256:freertos\src/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1257:freertos\src/tasks.c **** 	}
1258:freertos\src/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1259:freertos\src/tasks.c **** 
1260:freertos\src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1261:freertos\src/tasks.c **** 	{
1262:freertos\src/tasks.c **** 		if( xReturn == pdPASS )
1263:freertos\src/tasks.c **** 		{
1264:freertos\src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1265:freertos\src/tasks.c **** 		}
1266:freertos\src/tasks.c **** 	}
1267:freertos\src/tasks.c **** 	#endif /* configUSE_TIMERS */
1268:freertos\src/tasks.c **** 
1269:freertos\src/tasks.c **** 	if( xReturn == pdPASS )
1270:freertos\src/tasks.c **** 	{
1271:freertos\src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1272:freertos\src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1273:freertos\src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1274:freertos\src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1275:freertos\src/tasks.c **** 		starts to run. */
1276:freertos\src/tasks.c **** 		portDISABLE_INTERRUPTS();
1277:freertos\src/tasks.c **** 
1278:freertos\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1279:freertos\src/tasks.c **** 		{
1280:freertos\src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1281:freertos\src/tasks.c **** 			structure specific to the task that will run first. */
1282:freertos\src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1283:freertos\src/tasks.c **** 		}
1284:freertos\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1285:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 24


1286:freertos\src/tasks.c **** 		xSchedulerRunning = pdTRUE;
1287:freertos\src/tasks.c **** 		xTickCount = ( portTickType ) 0U;
1288:freertos\src/tasks.c **** 
1289:freertos\src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1290:freertos\src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1291:freertos\src/tasks.c **** 		the run time counter time base. */
1292:freertos\src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1293:freertos\src/tasks.c **** 
1294:freertos\src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1295:freertos\src/tasks.c **** 		portable interface. */
1296:freertos\src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1297:freertos\src/tasks.c **** 		{
1298:freertos\src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1299:freertos\src/tasks.c **** 			function will not return. */
1300:freertos\src/tasks.c **** 		}
1301:freertos\src/tasks.c **** 		else
1302:freertos\src/tasks.c **** 		{
1303:freertos\src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1304:freertos\src/tasks.c **** 		}
1305:freertos\src/tasks.c **** 	}
1306:freertos\src/tasks.c **** 	else
1307:freertos\src/tasks.c **** 	{
1308:freertos\src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1309:freertos\src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1310:freertos\src/tasks.c **** 		or the timer task. */
1311:freertos\src/tasks.c **** 		configASSERT( xReturn );
1312:freertos\src/tasks.c **** 	}
1313:freertos\src/tasks.c **** }
1314:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1315:freertos\src/tasks.c **** 
1316:freertos\src/tasks.c **** void vTaskEndScheduler( void )
1317:freertos\src/tasks.c **** {
1318:freertos\src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1319:freertos\src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1320:freertos\src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1321:freertos\src/tasks.c **** 	portDISABLE_INTERRUPTS();
1322:freertos\src/tasks.c **** 	xSchedulerRunning = pdFALSE;
1323:freertos\src/tasks.c **** 	vPortEndScheduler();
1324:freertos\src/tasks.c **** }
1325:freertos\src/tasks.c **** /*----------------------------------------------------------*/
1326:freertos\src/tasks.c **** 
1327:freertos\src/tasks.c **** void vTaskSuspendAll( void )
1328:freertos\src/tasks.c **** {
1329:freertos\src/tasks.c **** 	/* A critical section is not required as the variable is of type
1330:freertos\src/tasks.c **** 	portBASE_TYPE. */
1331:freertos\src/tasks.c **** 	++uxSchedulerSuspended;
1332:freertos\src/tasks.c **** }
1333:freertos\src/tasks.c **** /*----------------------------------------------------------*/
1334:freertos\src/tasks.c **** 
1335:freertos\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1336:freertos\src/tasks.c **** 
1337:freertos\src/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void )
1338:freertos\src/tasks.c **** 	{
1339:freertos\src/tasks.c **** 	portTickType xReturn;
1340:freertos\src/tasks.c **** 
1341:freertos\src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1342:freertos\src/tasks.c **** 		{
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 25


1343:freertos\src/tasks.c **** 			xReturn = 0;
1344:freertos\src/tasks.c **** 		}
1345:freertos\src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1346:freertos\src/tasks.c **** 		{
1347:freertos\src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1348:freertos\src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1349:freertos\src/tasks.c **** 			processed. */
1350:freertos\src/tasks.c **** 			xReturn = 0;
1351:freertos\src/tasks.c **** 		}
1352:freertos\src/tasks.c **** 		else
1353:freertos\src/tasks.c **** 		{
1354:freertos\src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1355:freertos\src/tasks.c **** 		}
1356:freertos\src/tasks.c **** 
1357:freertos\src/tasks.c **** 		return xReturn;
1358:freertos\src/tasks.c **** 	}
1359:freertos\src/tasks.c **** 
1360:freertos\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1361:freertos\src/tasks.c **** /*----------------------------------------------------------*/
1362:freertos\src/tasks.c **** 
1363:freertos\src/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1364:freertos\src/tasks.c **** {
1365:freertos\src/tasks.c **** tskTCB *pxTCB;
1366:freertos\src/tasks.c **** portBASE_TYPE xAlreadyYielded = pdFALSE;
1367:freertos\src/tasks.c **** 
1368:freertos\src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1369:freertos\src/tasks.c **** 	previous call to vTaskSuspendAll(). */
1370:freertos\src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1371:freertos\src/tasks.c **** 
1372:freertos\src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1373:freertos\src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1374:freertos\src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1375:freertos\src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1376:freertos\src/tasks.c **** 	tasks from this list into their appropriate ready list. */
1377:freertos\src/tasks.c **** 	taskENTER_CRITICAL();
1378:freertos\src/tasks.c **** 	{
1379:freertos\src/tasks.c **** 		--uxSchedulerSuspended;
1380:freertos\src/tasks.c **** 
1381:freertos\src/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1382:freertos\src/tasks.c **** 		{
1383:freertos\src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
1384:freertos\src/tasks.c **** 			{
1385:freertos\src/tasks.c **** 				/* Move any readied tasks from the pending list into the
1386:freertos\src/tasks.c **** 				appropriate ready list. */
1387:freertos\src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1388:freertos\src/tasks.c **** 				{
1389:freertos\src/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1390:freertos\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1391:freertos\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1392:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1393:freertos\src/tasks.c **** 
1394:freertos\src/tasks.c **** 					/* If we have moved a task that has a priority higher than
1395:freertos\src/tasks.c **** 					the current task then we should yield. */
1396:freertos\src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1397:freertos\src/tasks.c **** 					{
1398:freertos\src/tasks.c **** 						xYieldPending = pdTRUE;
1399:freertos\src/tasks.c **** 					}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 26


1400:freertos\src/tasks.c **** 				}
1401:freertos\src/tasks.c **** 
1402:freertos\src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1403:freertos\src/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1404:freertos\src/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1405:freertos\src/tasks.c **** 				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
1406:freertos\src/tasks.c **** 				{
1407:freertos\src/tasks.c **** 					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
1408:freertos\src/tasks.c **** 					{
1409:freertos\src/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
1410:freertos\src/tasks.c **** 						{
1411:freertos\src/tasks.c **** 							xYieldPending = pdTRUE;
1412:freertos\src/tasks.c **** 						}
1413:freertos\src/tasks.c **** 						--uxPendedTicks;
1414:freertos\src/tasks.c **** 					}
1415:freertos\src/tasks.c **** 				}
1416:freertos\src/tasks.c **** 
1417:freertos\src/tasks.c **** 				if( xYieldPending == pdTRUE )
1418:freertos\src/tasks.c **** 				{
1419:freertos\src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1420:freertos\src/tasks.c **** 					{
1421:freertos\src/tasks.c **** 						xAlreadyYielded = pdTRUE;
1422:freertos\src/tasks.c **** 					}
1423:freertos\src/tasks.c **** 					#endif
1424:freertos\src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1425:freertos\src/tasks.c **** 				}
1426:freertos\src/tasks.c **** 			}
1427:freertos\src/tasks.c **** 		}
1428:freertos\src/tasks.c **** 	}
1429:freertos\src/tasks.c **** 	taskEXIT_CRITICAL();
1430:freertos\src/tasks.c **** 
1431:freertos\src/tasks.c **** 	return xAlreadyYielded;
1432:freertos\src/tasks.c **** }
1433:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1434:freertos\src/tasks.c **** 
1435:freertos\src/tasks.c **** portTickType xTaskGetTickCount( void )
1436:freertos\src/tasks.c **** {
1437:freertos\src/tasks.c **** portTickType xTicks;
1438:freertos\src/tasks.c **** 
1439:freertos\src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1440:freertos\src/tasks.c **** 	taskENTER_CRITICAL();
1441:freertos\src/tasks.c **** 	{
1442:freertos\src/tasks.c **** 		xTicks = xTickCount;
1443:freertos\src/tasks.c **** 	}
1444:freertos\src/tasks.c **** 	taskEXIT_CRITICAL();
1445:freertos\src/tasks.c **** 
1446:freertos\src/tasks.c **** 	return xTicks;
1447:freertos\src/tasks.c **** }
1448:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1449:freertos\src/tasks.c **** 
1450:freertos\src/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1451:freertos\src/tasks.c **** {
1452:freertos\src/tasks.c **** portTickType xReturn;
1453:freertos\src/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1454:freertos\src/tasks.c **** 
1455:freertos\src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1456:freertos\src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 27


1457:freertos\src/tasks.c **** 	above the maximum system call priority are keep permanently enabled, even
1458:freertos\src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1459:freertos\src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1460:freertos\src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1461:freertos\src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1462:freertos\src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1463:freertos\src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1464:freertos\src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1465:freertos\src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1466:freertos\src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1467:freertos\src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1468:freertos\src/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1469:freertos\src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1470:freertos\src/tasks.c **** 
1471:freertos\src/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1472:freertos\src/tasks.c **** 	xReturn = xTickCount;
1473:freertos\src/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1474:freertos\src/tasks.c **** 
1475:freertos\src/tasks.c **** 	return xReturn;
1476:freertos\src/tasks.c **** }
1477:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1478:freertos\src/tasks.c **** 
1479:freertos\src/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1480:freertos\src/tasks.c **** {
1481:freertos\src/tasks.c **** 	/* A critical section is not required because the variables are of type
1482:freertos\src/tasks.c **** 	portBASE_TYPE. */
1483:freertos\src/tasks.c **** 	return uxCurrentNumberOfTasks;
1484:freertos\src/tasks.c **** }
1485:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1486:freertos\src/tasks.c **** 
1487:freertos\src/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1488:freertos\src/tasks.c **** 
1489:freertos\src/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1490:freertos\src/tasks.c **** 	{
1491:freertos\src/tasks.c **** 	tskTCB *pxTCB;
1492:freertos\src/tasks.c **** 
1493:freertos\src/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1494:freertos\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1495:freertos\src/tasks.c **** 		configASSERT( pxTCB );
1496:freertos\src/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1497:freertos\src/tasks.c **** 	}
1498:freertos\src/tasks.c **** 
1499:freertos\src/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1500:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1501:freertos\src/tasks.c **** 
1502:freertos\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1503:freertos\src/tasks.c **** 
1504:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetSystemState( xTaskStatusType *pxTaskStatusArray, unsigned portBASE
1505:freertos\src/tasks.c **** 	{
1506:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTask = 0, uxQueue = configMAX_PRIORITIES;
1507:freertos\src/tasks.c **** 
1508:freertos\src/tasks.c **** 		vTaskSuspendAll();
1509:freertos\src/tasks.c **** 		{
1510:freertos\src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1511:freertos\src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1512:freertos\src/tasks.c **** 			{
1513:freertos\src/tasks.c **** 				/* Fill in an xTaskStatusType structure with information on each
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 28


1514:freertos\src/tasks.c **** 				task in the Ready state. */
1515:freertos\src/tasks.c **** 				do
1516:freertos\src/tasks.c **** 				{
1517:freertos\src/tasks.c **** 					uxQueue--;
1518:freertos\src/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1519:freertos\src/tasks.c **** 
1520:freertos\src/tasks.c **** 				} while( uxQueue > ( unsigned portBASE_TYPE ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception 
1521:freertos\src/tasks.c **** 
1522:freertos\src/tasks.c **** 				/* Fill in an xTaskStatusType structure with information on each
1523:freertos\src/tasks.c **** 				task in the Blocked state. */
1524:freertos\src/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxDelayedT
1525:freertos\src/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxOverflow
1526:freertos\src/tasks.c **** 
1527:freertos\src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1528:freertos\src/tasks.c **** 				{
1529:freertos\src/tasks.c **** 					/* Fill in an xTaskStatusType structure with information on
1530:freertos\src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1531:freertos\src/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1532:freertos\src/tasks.c **** 				}
1533:freertos\src/tasks.c **** 				#endif
1534:freertos\src/tasks.c **** 
1535:freertos\src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1536:freertos\src/tasks.c **** 				{
1537:freertos\src/tasks.c **** 					/* Fill in an xTaskStatusType structure with information on
1538:freertos\src/tasks.c **** 					each task in the Suspended state. */
1539:freertos\src/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1540:freertos\src/tasks.c **** 				}
1541:freertos\src/tasks.c **** 				#endif
1542:freertos\src/tasks.c **** 
1543:freertos\src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1544:freertos\src/tasks.c **** 				{
1545:freertos\src/tasks.c **** 					if( pulTotalRunTime != NULL )
1546:freertos\src/tasks.c **** 					{
1547:freertos\src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1548:freertos\src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1549:freertos\src/tasks.c **** 						#else
1550:freertos\src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1551:freertos\src/tasks.c **** 						#endif
1552:freertos\src/tasks.c **** 					}
1553:freertos\src/tasks.c **** 				}
1554:freertos\src/tasks.c **** 				#else
1555:freertos\src/tasks.c **** 				{
1556:freertos\src/tasks.c **** 					if( pulTotalRunTime != NULL )
1557:freertos\src/tasks.c **** 					{
1558:freertos\src/tasks.c **** 						*pulTotalRunTime = 0;
1559:freertos\src/tasks.c **** 					}
1560:freertos\src/tasks.c **** 				}
1561:freertos\src/tasks.c **** 				#endif
1562:freertos\src/tasks.c **** 			}
1563:freertos\src/tasks.c **** 		}
1564:freertos\src/tasks.c **** 		( void ) xTaskResumeAll();
1565:freertos\src/tasks.c **** 
1566:freertos\src/tasks.c **** 		return uxTask;
1567:freertos\src/tasks.c **** 	}
1568:freertos\src/tasks.c **** 
1569:freertos\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1570:freertos\src/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 29


1571:freertos\src/tasks.c **** 
1572:freertos\src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1573:freertos\src/tasks.c **** 
1574:freertos\src/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1575:freertos\src/tasks.c **** 	{
1576:freertos\src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1577:freertos\src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1578:freertos\src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1579:freertos\src/tasks.c **** 		return xIdleTaskHandle;
1580:freertos\src/tasks.c **** 	}
1581:freertos\src/tasks.c **** 
1582:freertos\src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1583:freertos\src/tasks.c **** /*----------------------------------------------------------*/
1584:freertos\src/tasks.c **** 
1585:freertos\src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1586:freertos\src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1587:freertos\src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1588:freertos\src/tasks.c **** 1. */
1589:freertos\src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1590:freertos\src/tasks.c **** 
1591:freertos\src/tasks.c **** 	void vTaskStepTick( portTickType xTicksToJump )
1592:freertos\src/tasks.c **** 	{
1593:freertos\src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1594:freertos\src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1595:freertos\src/tasks.c **** 		each stepped tick. */
1596:freertos\src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1597:freertos\src/tasks.c **** 		xTickCount += xTicksToJump;
1598:freertos\src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1599:freertos\src/tasks.c **** 	}
1600:freertos\src/tasks.c **** 
1601:freertos\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1602:freertos\src/tasks.c **** /*----------------------------------------------------------*/
1603:freertos\src/tasks.c **** 
1604:freertos\src/tasks.c **** portBASE_TYPE xTaskIncrementTick( void )
1605:freertos\src/tasks.c **** {
1606:freertos\src/tasks.c **** tskTCB * pxTCB;
1607:freertos\src/tasks.c **** portTickType xItemValue;
1608:freertos\src/tasks.c **** portBASE_TYPE xSwitchRequired = pdFALSE;
1609:freertos\src/tasks.c **** 
1610:freertos\src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1611:freertos\src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1612:freertos\src/tasks.c **** 	tasks to be unblocked. */
1613:freertos\src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1614:freertos\src/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1615:freertos\src/tasks.c **** 	{
1616:freertos\src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1617:freertos\src/tasks.c **** 		delayed lists if it wraps to 0. */
1618:freertos\src/tasks.c **** 		++xTickCount;
1619:freertos\src/tasks.c **** 
1620:freertos\src/tasks.c **** 		{
1621:freertos\src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1622:freertos\src/tasks.c **** 			block. */
1623:freertos\src/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
1624:freertos\src/tasks.c **** 
1625:freertos\src/tasks.c **** 			if( xConstTickCount == ( portTickType ) 0U )
1626:freertos\src/tasks.c **** 			{
1627:freertos\src/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 30


1628:freertos\src/tasks.c **** 			}
1629:freertos\src/tasks.c **** 
1630:freertos\src/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in the
1631:freertos\src/tasks.c **** 			queue in the order of their wake time - meaning once one tasks has been
1632:freertos\src/tasks.c **** 			found whose block time has not expired there is no need not look any
1633:freertos\src/tasks.c **** 			further	down the list. */
1634:freertos\src/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
1635:freertos\src/tasks.c **** 			{
1636:freertos\src/tasks.c **** 				for( ;; )
1637:freertos\src/tasks.c **** 				{
1638:freertos\src/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1639:freertos\src/tasks.c **** 					{
1640:freertos\src/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime to
1641:freertos\src/tasks.c **** 						the	maximum possible value so it is extremely unlikely that
1642:freertos\src/tasks.c **** 						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
1643:freertos\src/tasks.c **** 						next time through. */
1644:freertos\src/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
1645:freertos\src/tasks.c **** 						break;
1646:freertos\src/tasks.c **** 					}
1647:freertos\src/tasks.c **** 					else
1648:freertos\src/tasks.c **** 					{
1649:freertos\src/tasks.c **** 						/* The delayed list is not empty, get the value of the item
1650:freertos\src/tasks.c **** 						at the head of the delayed list.  This is the time at which
1651:freertos\src/tasks.c **** 						the task at the head of the delayed list must be removed
1652:freertos\src/tasks.c **** 						from the Blocked state. */
1653:freertos\src/tasks.c **** 						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1654:freertos\src/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1655:freertos\src/tasks.c **** 
1656:freertos\src/tasks.c **** 						if( xConstTickCount < xItemValue )
1657:freertos\src/tasks.c **** 						{
1658:freertos\src/tasks.c **** 							/* It is not time to unblock this item yet, but the item
1659:freertos\src/tasks.c **** 							value is the time at which the task at the head of the
1660:freertos\src/tasks.c **** 							blocked list must be removed from the Blocked state -
1661:freertos\src/tasks.c **** 							so record the item value in xNextTaskUnblockTime. */
1662:freertos\src/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
1663:freertos\src/tasks.c **** 							break;
1664:freertos\src/tasks.c **** 						}
1665:freertos\src/tasks.c **** 
1666:freertos\src/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1667:freertos\src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1668:freertos\src/tasks.c **** 
1669:freertos\src/tasks.c **** 						/* Is the task waiting on an event also?  If so remove it
1670:freertos\src/tasks.c **** 						from the event list. */
1671:freertos\src/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1672:freertos\src/tasks.c **** 						{
1673:freertos\src/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1674:freertos\src/tasks.c **** 						}
1675:freertos\src/tasks.c **** 
1676:freertos\src/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1677:freertos\src/tasks.c **** 						list. */
1678:freertos\src/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
1679:freertos\src/tasks.c **** 
1680:freertos\src/tasks.c **** 						/* A task being unblocked cannot cause an immediate context
1681:freertos\src/tasks.c **** 						switch if preemption is turned off. */
1682:freertos\src/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1683:freertos\src/tasks.c **** 						{
1684:freertos\src/tasks.c **** 							/* Preemption is on, but a context switch should only
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 31


1685:freertos\src/tasks.c **** 							be performed if the unblocked task has a priority that
1686:freertos\src/tasks.c **** 							is equal to or higher than the currently executing
1687:freertos\src/tasks.c **** 							task. */
1688:freertos\src/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1689:freertos\src/tasks.c **** 							{
1690:freertos\src/tasks.c **** 								xSwitchRequired = pdTRUE;
1691:freertos\src/tasks.c **** 							}
1692:freertos\src/tasks.c **** 						}
1693:freertos\src/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1694:freertos\src/tasks.c **** 					}
1695:freertos\src/tasks.c **** 				}
1696:freertos\src/tasks.c **** 			}
1697:freertos\src/tasks.c **** 		}
1698:freertos\src/tasks.c **** 
1699:freertos\src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1700:freertos\src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1701:freertos\src/tasks.c **** 		writer has not explicitly turned time slicing off. */
1702:freertos\src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1703:freertos\src/tasks.c **** 		{
1704:freertos\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned p
1705:freertos\src/tasks.c **** 			{
1706:freertos\src/tasks.c **** 				xSwitchRequired = pdTRUE;
1707:freertos\src/tasks.c **** 			}
1708:freertos\src/tasks.c **** 		}
1709:freertos\src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1710:freertos\src/tasks.c **** 
1711:freertos\src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1712:freertos\src/tasks.c **** 		{
1713:freertos\src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1714:freertos\src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1715:freertos\src/tasks.c **** 			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
1716:freertos\src/tasks.c **** 			{
1717:freertos\src/tasks.c **** 				vApplicationTickHook();
1718:freertos\src/tasks.c **** 			}
1719:freertos\src/tasks.c **** 		}
1720:freertos\src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
1721:freertos\src/tasks.c **** 	}
1722:freertos\src/tasks.c **** 	else
1723:freertos\src/tasks.c **** 	{
1724:freertos\src/tasks.c **** 		++uxPendedTicks;
1725:freertos\src/tasks.c **** 
1726:freertos\src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1727:freertos\src/tasks.c **** 		scheduler is locked. */
1728:freertos\src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1729:freertos\src/tasks.c **** 		{
1730:freertos\src/tasks.c **** 			vApplicationTickHook();
1731:freertos\src/tasks.c **** 		}
1732:freertos\src/tasks.c **** 		#endif
1733:freertos\src/tasks.c **** 	}
1734:freertos\src/tasks.c **** 
1735:freertos\src/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
1736:freertos\src/tasks.c **** 	{
1737:freertos\src/tasks.c **** 		if( xYieldPending != pdFALSE )
1738:freertos\src/tasks.c **** 		{
1739:freertos\src/tasks.c **** 			xSwitchRequired = pdTRUE;
1740:freertos\src/tasks.c **** 		}
1741:freertos\src/tasks.c **** 	}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 32


1742:freertos\src/tasks.c **** 	#endif /* configUSE_PREEMPTION */
1743:freertos\src/tasks.c **** 
1744:freertos\src/tasks.c **** 	return xSwitchRequired;
1745:freertos\src/tasks.c **** }
1746:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1747:freertos\src/tasks.c **** 
1748:freertos\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1749:freertos\src/tasks.c **** 
1750:freertos\src/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1751:freertos\src/tasks.c **** 	{
1752:freertos\src/tasks.c **** 	tskTCB *xTCB;
1753:freertos\src/tasks.c **** 
1754:freertos\src/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1755:freertos\src/tasks.c **** 		if( xTask == NULL )
1756:freertos\src/tasks.c **** 		{
1757:freertos\src/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1758:freertos\src/tasks.c **** 		}
1759:freertos\src/tasks.c **** 		else
1760:freertos\src/tasks.c **** 		{
1761:freertos\src/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1762:freertos\src/tasks.c **** 		}
1763:freertos\src/tasks.c **** 
1764:freertos\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1765:freertos\src/tasks.c **** 		the value can be accessed from an interrupt. */
1766:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
1767:freertos\src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
1768:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
1769:freertos\src/tasks.c **** 	}
1770:freertos\src/tasks.c **** 
1771:freertos\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1772:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1773:freertos\src/tasks.c **** 
1774:freertos\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1775:freertos\src/tasks.c **** 
1776:freertos\src/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1777:freertos\src/tasks.c **** 	{
1778:freertos\src/tasks.c **** 	tskTCB *xTCB;
1779:freertos\src/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1780:freertos\src/tasks.c **** 
1781:freertos\src/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1782:freertos\src/tasks.c **** 		if( xTask == NULL )
1783:freertos\src/tasks.c **** 		{
1784:freertos\src/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1785:freertos\src/tasks.c **** 		}
1786:freertos\src/tasks.c **** 		else
1787:freertos\src/tasks.c **** 		{
1788:freertos\src/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1789:freertos\src/tasks.c **** 		}
1790:freertos\src/tasks.c **** 
1791:freertos\src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1792:freertos\src/tasks.c **** 		the value can be accessed from an interrupt. */
1793:freertos\src/tasks.c **** 		taskENTER_CRITICAL();
1794:freertos\src/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1795:freertos\src/tasks.c **** 		taskEXIT_CRITICAL();
1796:freertos\src/tasks.c **** 
1797:freertos\src/tasks.c **** 		return xReturn;
1798:freertos\src/tasks.c **** 	}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 33


1799:freertos\src/tasks.c **** 
1800:freertos\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1801:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1802:freertos\src/tasks.c **** 
1803:freertos\src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1804:freertos\src/tasks.c **** 
1805:freertos\src/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1806:freertos\src/tasks.c **** 	{
1807:freertos\src/tasks.c **** 	tskTCB *xTCB;
1808:freertos\src/tasks.c **** 	portBASE_TYPE xReturn;
1809:freertos\src/tasks.c **** 
1810:freertos\src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1811:freertos\src/tasks.c **** 		if( xTask == NULL )
1812:freertos\src/tasks.c **** 		{
1813:freertos\src/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1814:freertos\src/tasks.c **** 		}
1815:freertos\src/tasks.c **** 		else
1816:freertos\src/tasks.c **** 		{
1817:freertos\src/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1818:freertos\src/tasks.c **** 		}
1819:freertos\src/tasks.c **** 
1820:freertos\src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1821:freertos\src/tasks.c **** 		{
1822:freertos\src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1823:freertos\src/tasks.c **** 		}
1824:freertos\src/tasks.c **** 		else
1825:freertos\src/tasks.c **** 		{
1826:freertos\src/tasks.c **** 			xReturn = pdFAIL;
1827:freertos\src/tasks.c **** 		}
1828:freertos\src/tasks.c **** 
1829:freertos\src/tasks.c **** 		return xReturn;
1830:freertos\src/tasks.c **** 	}
1831:freertos\src/tasks.c **** 
1832:freertos\src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1833:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1834:freertos\src/tasks.c **** 
1835:freertos\src/tasks.c **** void vTaskSwitchContext( void )
1836:freertos\src/tasks.c **** {
1837:freertos\src/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
1838:freertos\src/tasks.c **** 	{
1839:freertos\src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1840:freertos\src/tasks.c **** 		switch. */
1841:freertos\src/tasks.c **** 		xYieldPending = pdTRUE;
1842:freertos\src/tasks.c **** 	}
1843:freertos\src/tasks.c **** 	else
1844:freertos\src/tasks.c **** 	{
1845:freertos\src/tasks.c **** 		xYieldPending = pdFALSE;
1846:freertos\src/tasks.c **** 		traceTASK_SWITCHED_OUT();
1847:freertos\src/tasks.c **** 
1848:freertos\src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1849:freertos\src/tasks.c **** 		{
1850:freertos\src/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1851:freertos\src/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1852:freertos\src/tasks.c **** 				#else
1853:freertos\src/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1854:freertos\src/tasks.c **** 				#endif
1855:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 34


1856:freertos\src/tasks.c **** 				/* Add the amount of time the task has been running to the
1857:freertos\src/tasks.c **** 				accumulated	time so far.  The time the task started running was
1858:freertos\src/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
1859:freertos\src/tasks.c **** 				protection here	so count values are only valid until the timer
1860:freertos\src/tasks.c **** 				overflows.  The guard against negative values is to protect
1861:freertos\src/tasks.c **** 				against suspect run time stat counter implementations - which
1862:freertos\src/tasks.c **** 				are provided by the application, not the kernel. */
1863:freertos\src/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
1864:freertos\src/tasks.c **** 				{
1865:freertos\src/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
1866:freertos\src/tasks.c **** 				}
1867:freertos\src/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
1868:freertos\src/tasks.c **** 		}
1869:freertos\src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
1870:freertos\src/tasks.c **** 
1871:freertos\src/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1872:freertos\src/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1873:freertos\src/tasks.c **** 
1874:freertos\src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
1875:freertos\src/tasks.c **** 
1876:freertos\src/tasks.c **** 		traceTASK_SWITCHED_IN();
1877:freertos\src/tasks.c **** 
1878:freertos\src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1879:freertos\src/tasks.c **** 		{
1880:freertos\src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1881:freertos\src/tasks.c **** 			structure specific to this task. */
1882:freertos\src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1883:freertos\src/tasks.c **** 		}
1884:freertos\src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1885:freertos\src/tasks.c **** 	}
1886:freertos\src/tasks.c **** }
1887:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1888:freertos\src/tasks.c **** 
1889:freertos\src/tasks.c **** void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
1890:freertos\src/tasks.c **** {
1891:freertos\src/tasks.c **** portTickType xTimeToWake;
1892:freertos\src/tasks.c **** 
1893:freertos\src/tasks.c **** 	configASSERT( pxEventList );
1894:freertos\src/tasks.c **** 
1895:freertos\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1896:freertos\src/tasks.c **** 	SCHEDULER SUSPENDED. */
1897:freertos\src/tasks.c **** 
1898:freertos\src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1899:freertos\src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1900:freertos\src/tasks.c **** 	is the first to be woken by the event. */
1901:freertos\src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1902:freertos\src/tasks.c **** 
1903:freertos\src/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1904:freertos\src/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1905:freertos\src/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1906:freertos\src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1907:freertos\src/tasks.c **** 	{
1908:freertos\src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
1909:freertos\src/tasks.c **** 		check, and the port reset macro can be called directly. */
1910:freertos\src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1911:freertos\src/tasks.c **** 	}
1912:freertos\src/tasks.c **** 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 35


1913:freertos\src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1914:freertos\src/tasks.c **** 	{
1915:freertos\src/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
1916:freertos\src/tasks.c **** 		{
1917:freertos\src/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1918:freertos\src/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1919:freertos\src/tasks.c **** 			indefinitely. */
1920:freertos\src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
1921:freertos\src/tasks.c **** 		}
1922:freertos\src/tasks.c **** 		else
1923:freertos\src/tasks.c **** 		{
1924:freertos\src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1925:freertos\src/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1926:freertos\src/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1927:freertos\src/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1928:freertos\src/tasks.c **** 		}
1929:freertos\src/tasks.c **** 	}
1930:freertos\src/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
1931:freertos\src/tasks.c **** 	{
1932:freertos\src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1933:freertos\src/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1934:freertos\src/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1935:freertos\src/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1936:freertos\src/tasks.c **** 	}
1937:freertos\src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
1938:freertos\src/tasks.c **** }
1939:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1940:freertos\src/tasks.c **** 
1941:freertos\src/tasks.c **** #if configUSE_TIMERS == 1
1942:freertos\src/tasks.c **** 
1943:freertos\src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
1944:freertos\src/tasks.c **** 	{
1945:freertos\src/tasks.c **** 	portTickType xTimeToWake;
1946:freertos\src/tasks.c **** 
1947:freertos\src/tasks.c **** 		configASSERT( pxEventList );
1948:freertos\src/tasks.c **** 
1949:freertos\src/tasks.c **** 		/* This function should not be called by application code hence the
1950:freertos\src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1951:freertos\src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1952:freertos\src/tasks.c **** 		it should be called from a critical section. */
1953:freertos\src/tasks.c **** 
1954:freertos\src/tasks.c **** 
1955:freertos\src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1956:freertos\src/tasks.c **** 		In this case it is assume that this is the only task that is going to
1957:freertos\src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1958:freertos\src/tasks.c **** 		can be used in place of vListInsert. */
1959:freertos\src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1960:freertos\src/tasks.c **** 
1961:freertos\src/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1962:freertos\src/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1963:freertos\src/tasks.c **** 		function is called form a critical section. */
1964:freertos\src/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1965:freertos\src/tasks.c **** 		{
1966:freertos\src/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
1967:freertos\src/tasks.c **** 			check, and the port reset macro can be called directly. */
1968:freertos\src/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1969:freertos\src/tasks.c **** 		}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 36


1970:freertos\src/tasks.c **** 
1971:freertos\src/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1972:freertos\src/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1973:freertos\src/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1974:freertos\src/tasks.c **** 
1975:freertos\src/tasks.c **** 		traceTASK_DELAY_UNTIL();
1976:freertos\src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1977:freertos\src/tasks.c **** 	}
1978:freertos\src/tasks.c **** 
1979:freertos\src/tasks.c **** #endif /* configUSE_TIMERS */
1980:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
1981:freertos\src/tasks.c **** 
1982:freertos\src/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1983:freertos\src/tasks.c **** {
1984:freertos\src/tasks.c **** tskTCB *pxUnblockedTCB;
1985:freertos\src/tasks.c **** portBASE_TYPE xReturn;
1986:freertos\src/tasks.c **** 
1987:freertos\src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1988:freertos\src/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1989:freertos\src/tasks.c **** 
1990:freertos\src/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1991:freertos\src/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1992:freertos\src/tasks.c **** 	it to the ready list.
1993:freertos\src/tasks.c **** 
1994:freertos\src/tasks.c **** 	If an event is for a queue that is locked then this function will never
1995:freertos\src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1996:freertos\src/tasks.c **** 	means we can always expect exclusive access to the event list here.
1997:freertos\src/tasks.c **** 
1998:freertos\src/tasks.c **** 	This function assumes that a check has already been made to ensure that
1999:freertos\src/tasks.c **** 	pxEventList is not empty. */
2000:freertos\src/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2001:freertos\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
2002:freertos\src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2003:freertos\src/tasks.c **** 
2004:freertos\src/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2005:freertos\src/tasks.c **** 	{
2006:freertos\src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2007:freertos\src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2008:freertos\src/tasks.c **** 	}
2009:freertos\src/tasks.c **** 	else
2010:freertos\src/tasks.c **** 	{
2011:freertos\src/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
2012:freertos\src/tasks.c **** 		task pending until the scheduler is resumed. */
2013:freertos\src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2014:freertos\src/tasks.c **** 	}
2015:freertos\src/tasks.c **** 
2016:freertos\src/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
2017:freertos\src/tasks.c **** 	{
2018:freertos\src/tasks.c **** 		/* Return true if the task removed from the event list has
2019:freertos\src/tasks.c **** 		a higher priority than the calling task.  This allows
2020:freertos\src/tasks.c **** 		the calling task to know if it should force a context
2021:freertos\src/tasks.c **** 		switch now. */
2022:freertos\src/tasks.c **** 		xReturn = pdTRUE;
2023:freertos\src/tasks.c **** 
2024:freertos\src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2025:freertos\src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2026:freertos\src/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 37


2027:freertos\src/tasks.c **** 	}
2028:freertos\src/tasks.c **** 	else
2029:freertos\src/tasks.c **** 	{
2030:freertos\src/tasks.c **** 		xReturn = pdFALSE;
2031:freertos\src/tasks.c **** 	}
2032:freertos\src/tasks.c **** 
2033:freertos\src/tasks.c **** 	return xReturn;
2034:freertos\src/tasks.c **** }
2035:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2036:freertos\src/tasks.c **** 
2037:freertos\src/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
2038:freertos\src/tasks.c **** {
2039:freertos\src/tasks.c **** 	configASSERT( pxTimeOut );
2040:freertos\src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2041:freertos\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2042:freertos\src/tasks.c **** }
2043:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2044:freertos\src/tasks.c **** 
2045:freertos\src/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
2046:freertos\src/tasks.c **** {
2047:freertos\src/tasks.c **** portBASE_TYPE xReturn;
2048:freertos\src/tasks.c **** 
2049:freertos\src/tasks.c **** 	configASSERT( pxTimeOut );
2050:freertos\src/tasks.c **** 	configASSERT( pxTicksToWait );
2051:freertos\src/tasks.c **** 
2052:freertos\src/tasks.c **** 	taskENTER_CRITICAL();
2053:freertos\src/tasks.c **** 	{
2054:freertos\src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2055:freertos\src/tasks.c **** 		const portTickType xConstTickCount = xTickCount;
2056:freertos\src/tasks.c **** 
2057:freertos\src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2058:freertos\src/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2059:freertos\src/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2060:freertos\src/tasks.c **** 			therefore never time out. */
2061:freertos\src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2062:freertos\src/tasks.c **** 			{
2063:freertos\src/tasks.c **** 				xReturn = pdFALSE;
2064:freertos\src/tasks.c **** 			}
2065:freertos\src/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2066:freertos\src/tasks.c **** 		#endif
2067:freertos\src/tasks.c **** 
2068:freertos\src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
2069:freertos\src/tasks.c **** 		{
2070:freertos\src/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2071:freertos\src/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2072:freertos\src/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2073:freertos\src/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2074:freertos\src/tasks.c **** 			xReturn = pdTRUE;
2075:freertos\src/tasks.c **** 		}
2076:freertos\src/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
2077:freertos\src/tasks.c **** 		{
2078:freertos\src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2079:freertos\src/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2080:freertos\src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2081:freertos\src/tasks.c **** 			xReturn = pdFALSE;
2082:freertos\src/tasks.c **** 		}
2083:freertos\src/tasks.c **** 		else
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 38


2084:freertos\src/tasks.c **** 		{
2085:freertos\src/tasks.c **** 			xReturn = pdTRUE;
2086:freertos\src/tasks.c **** 		}
2087:freertos\src/tasks.c **** 	}
2088:freertos\src/tasks.c **** 	taskEXIT_CRITICAL();
2089:freertos\src/tasks.c **** 
2090:freertos\src/tasks.c **** 	return xReturn;
2091:freertos\src/tasks.c **** }
2092:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2093:freertos\src/tasks.c **** 
2094:freertos\src/tasks.c **** void vTaskMissedYield( void )
2095:freertos\src/tasks.c **** {
2096:freertos\src/tasks.c **** 	xYieldPending = pdTRUE;
2097:freertos\src/tasks.c **** }
2098:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2099:freertos\src/tasks.c **** 
2100:freertos\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2101:freertos\src/tasks.c **** 
2102:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
2103:freertos\src/tasks.c **** 	{
2104:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2105:freertos\src/tasks.c **** 	tskTCB *pxTCB;
2106:freertos\src/tasks.c **** 
2107:freertos\src/tasks.c **** 		if( xTask != NULL )
2108:freertos\src/tasks.c **** 		{
2109:freertos\src/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2110:freertos\src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2111:freertos\src/tasks.c **** 		}
2112:freertos\src/tasks.c **** 		else
2113:freertos\src/tasks.c **** 		{
2114:freertos\src/tasks.c **** 			uxReturn = 0U;
2115:freertos\src/tasks.c **** 		}
2116:freertos\src/tasks.c **** 
2117:freertos\src/tasks.c **** 		return uxReturn;
2118:freertos\src/tasks.c **** 	}
2119:freertos\src/tasks.c **** 
2120:freertos\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2121:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2122:freertos\src/tasks.c **** 
2123:freertos\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2124:freertos\src/tasks.c **** 
2125:freertos\src/tasks.c **** 	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
2126:freertos\src/tasks.c **** 	{
2127:freertos\src/tasks.c **** 	tskTCB *pxTCB;
2128:freertos\src/tasks.c **** 
2129:freertos\src/tasks.c **** 		if( xTask != NULL )
2130:freertos\src/tasks.c **** 		{
2131:freertos\src/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2132:freertos\src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2133:freertos\src/tasks.c **** 		}
2134:freertos\src/tasks.c **** 	}
2135:freertos\src/tasks.c **** 
2136:freertos\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2137:freertos\src/tasks.c **** 
2138:freertos\src/tasks.c **** /*
2139:freertos\src/tasks.c ****  * -----------------------------------------------------------
2140:freertos\src/tasks.c ****  * The Idle task.
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 39


2141:freertos\src/tasks.c ****  * ----------------------------------------------------------
2142:freertos\src/tasks.c ****  *
2143:freertos\src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2144:freertos\src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2145:freertos\src/tasks.c ****  *
2146:freertos\src/tasks.c ****  * void prvIdleTask( void *pvParameters );
2147:freertos\src/tasks.c ****  *
2148:freertos\src/tasks.c ****  */
2149:freertos\src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2150:freertos\src/tasks.c **** {
  27              		.loc 1 2150 0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.L2:
  35 0000 FEE7     		b	.L2
  36              		.cfi_endproc
  37              	.LFE53:
  38              		.size	prvIdleTask, .-prvIdleTask
  39              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
  40              		.align	1
  41              		.code	16
  42              		.thumb_func
  43              		.type	prvAddCurrentTaskToDelayedList, %function
  44              	prvAddCurrentTaskToDelayedList:
  45              	.LFB57:
2151:freertos\src/tasks.c **** 	/* Stop warnings. */
2152:freertos\src/tasks.c **** 	( void ) pvParameters;
2153:freertos\src/tasks.c **** 
2154:freertos\src/tasks.c **** 	for( ;; )
2155:freertos\src/tasks.c **** 	{
2156:freertos\src/tasks.c **** 		/* See if any tasks have been deleted. */
2157:freertos\src/tasks.c **** 		prvCheckTasksWaitingTermination();
2158:freertos\src/tasks.c **** 
2159:freertos\src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2160:freertos\src/tasks.c **** 		{
2161:freertos\src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2162:freertos\src/tasks.c **** 			see if any other task has become available.  If we are using
2163:freertos\src/tasks.c **** 			preemption we don't need to do this as any task becoming available
2164:freertos\src/tasks.c **** 			will automatically get the processor anyway. */
2165:freertos\src/tasks.c **** 			taskYIELD();
2166:freertos\src/tasks.c **** 		}
2167:freertos\src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2168:freertos\src/tasks.c **** 
2169:freertos\src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2170:freertos\src/tasks.c **** 		{
2171:freertos\src/tasks.c **** 			/* When using preemption tasks of equal priority will be
2172:freertos\src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2173:freertos\src/tasks.c **** 			to run then the idle task should yield before the end of the
2174:freertos\src/tasks.c **** 			timeslice.
2175:freertos\src/tasks.c **** 
2176:freertos\src/tasks.c **** 			A critical region is not required here as we are just reading from
2177:freertos\src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2178:freertos\src/tasks.c **** 			the ready list at the idle priority contains more than one task
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 40


2179:freertos\src/tasks.c **** 			then a task other than the idle task is ready to execute. */
2180:freertos\src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
2181:freertos\src/tasks.c **** 			{
2182:freertos\src/tasks.c **** 				taskYIELD();
2183:freertos\src/tasks.c **** 			}
2184:freertos\src/tasks.c **** 		}
2185:freertos\src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2186:freertos\src/tasks.c **** 
2187:freertos\src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2188:freertos\src/tasks.c **** 		{
2189:freertos\src/tasks.c **** 			extern void vApplicationIdleHook( void );
2190:freertos\src/tasks.c **** 
2191:freertos\src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2192:freertos\src/tasks.c **** 			allows the application designer to add background functionality
2193:freertos\src/tasks.c **** 			without the overhead of a separate task.
2194:freertos\src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2195:freertos\src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2196:freertos\src/tasks.c **** 			vApplicationIdleHook();
2197:freertos\src/tasks.c **** 		}
2198:freertos\src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2199:freertos\src/tasks.c **** 
2200:freertos\src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2201:freertos\src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2202:freertos\src/tasks.c **** 		user defined low power mode	implementations require
2203:freertos\src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2204:freertos\src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2205:freertos\src/tasks.c **** 		{
2206:freertos\src/tasks.c **** 		portTickType xExpectedIdleTime;
2207:freertos\src/tasks.c **** 
2208:freertos\src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2209:freertos\src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2210:freertos\src/tasks.c **** 			test of the expected idle time is performed without the
2211:freertos\src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2212:freertos\src/tasks.c **** 			valid. */
2213:freertos\src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2214:freertos\src/tasks.c **** 
2215:freertos\src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2216:freertos\src/tasks.c **** 			{
2217:freertos\src/tasks.c **** 				vTaskSuspendAll();
2218:freertos\src/tasks.c **** 				{
2219:freertos\src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2220:freertos\src/tasks.c **** 					time can be sampled again, and this time its value can
2221:freertos\src/tasks.c **** 					be used. */
2222:freertos\src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2223:freertos\src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2224:freertos\src/tasks.c **** 
2225:freertos\src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2226:freertos\src/tasks.c **** 					{
2227:freertos\src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2228:freertos\src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2229:freertos\src/tasks.c **** 						traceLOW_POWER_IDLE_END();
2230:freertos\src/tasks.c **** 					}
2231:freertos\src/tasks.c **** 				}
2232:freertos\src/tasks.c **** 				( void ) xTaskResumeAll();
2233:freertos\src/tasks.c **** 			}
2234:freertos\src/tasks.c **** 		}
2235:freertos\src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 41


2236:freertos\src/tasks.c **** 	}
2237:freertos\src/tasks.c **** }
2238:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2239:freertos\src/tasks.c **** 
2240:freertos\src/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2241:freertos\src/tasks.c **** 
2242:freertos\src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2243:freertos\src/tasks.c **** 	{
2244:freertos\src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2245:freertos\src/tasks.c **** 
2246:freertos\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2247:freertos\src/tasks.c **** 		{
2248:freertos\src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2249:freertos\src/tasks.c **** 			eReturn = eAbortSleep;
2250:freertos\src/tasks.c **** 		}
2251:freertos\src/tasks.c **** 		else if( xYieldPending != pdFALSE )
2252:freertos\src/tasks.c **** 		{
2253:freertos\src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2254:freertos\src/tasks.c **** 			eReturn = eAbortSleep;
2255:freertos\src/tasks.c **** 		}
2256:freertos\src/tasks.c **** 		else
2257:freertos\src/tasks.c **** 		{
2258:freertos\src/tasks.c **** 			#if configUSE_TIMERS == 0
2259:freertos\src/tasks.c **** 			{
2260:freertos\src/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2261:freertos\src/tasks.c **** 				const unsigned portBASE_TYPE uxNonApplicationTasks = 1;
2262:freertos\src/tasks.c **** 
2263:freertos\src/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2264:freertos\src/tasks.c **** 				suspended list (which might mean they have an infinite block
2265:freertos\src/tasks.c **** 				time rather than actually being suspended) then it is safe to
2266:freertos\src/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2267:freertos\src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2268:freertos\src/tasks.c **** 				{
2269:freertos\src/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2270:freertos\src/tasks.c **** 				}
2271:freertos\src/tasks.c **** 			}
2272:freertos\src/tasks.c **** 			#endif /* configUSE_TIMERS */
2273:freertos\src/tasks.c **** 		}
2274:freertos\src/tasks.c **** 
2275:freertos\src/tasks.c **** 		return eReturn;
2276:freertos\src/tasks.c **** 	}
2277:freertos\src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2278:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2279:freertos\src/tasks.c **** 
2280:freertos\src/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
2281:freertos\src/tasks.c **** {
2282:freertos\src/tasks.c **** unsigned portBASE_TYPE x;
2283:freertos\src/tasks.c **** 
2284:freertos\src/tasks.c **** 	/* Store the task name in the TCB. */
2285:freertos\src/tasks.c **** 	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++
2286:freertos\src/tasks.c **** 	{
2287:freertos\src/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2288:freertos\src/tasks.c **** 
2289:freertos\src/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2290:freertos\src/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2291:freertos\src/tasks.c **** 		string is not accessible (extremely unlikely). */
2292:freertos\src/tasks.c **** 		if( pcName[ x ] == 0x00 )
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 42


2293:freertos\src/tasks.c **** 		{
2294:freertos\src/tasks.c **** 			break;
2295:freertos\src/tasks.c **** 		}
2296:freertos\src/tasks.c **** 	}
2297:freertos\src/tasks.c **** 
2298:freertos\src/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2299:freertos\src/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2300:freertos\src/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
2301:freertos\src/tasks.c **** 
2302:freertos\src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2303:freertos\src/tasks.c **** 	remove the privilege bit if one is present. */
2304:freertos\src/tasks.c **** 	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
2305:freertos\src/tasks.c **** 	{
2306:freertos\src/tasks.c **** 		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
2307:freertos\src/tasks.c **** 	}
2308:freertos\src/tasks.c **** 
2309:freertos\src/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2310:freertos\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2311:freertos\src/tasks.c **** 	{
2312:freertos\src/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2313:freertos\src/tasks.c **** 	}
2314:freertos\src/tasks.c **** 	#endif /* configUSE_MUTEXES */
2315:freertos\src/tasks.c **** 
2316:freertos\src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2317:freertos\src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2318:freertos\src/tasks.c **** 
2319:freertos\src/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2320:freertos\src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2321:freertos\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2322:freertos\src/tasks.c **** 
2323:freertos\src/tasks.c **** 	/* Event lists are always in priority order. */
2324:freertos\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( por
2325:freertos\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2326:freertos\src/tasks.c **** 
2327:freertos\src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2328:freertos\src/tasks.c **** 	{
2329:freertos\src/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2330:freertos\src/tasks.c **** 	}
2331:freertos\src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2332:freertos\src/tasks.c **** 
2333:freertos\src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2334:freertos\src/tasks.c **** 	{
2335:freertos\src/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2336:freertos\src/tasks.c **** 	}
2337:freertos\src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2338:freertos\src/tasks.c **** 
2339:freertos\src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2340:freertos\src/tasks.c **** 	{
2341:freertos\src/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2342:freertos\src/tasks.c **** 	}
2343:freertos\src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2344:freertos\src/tasks.c **** 
2345:freertos\src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2346:freertos\src/tasks.c **** 	{
2347:freertos\src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2348:freertos\src/tasks.c **** 	}
2349:freertos\src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 43


2350:freertos\src/tasks.c **** 	{
2351:freertos\src/tasks.c **** 		( void ) xRegions;
2352:freertos\src/tasks.c **** 		( void ) usStackDepth;
2353:freertos\src/tasks.c **** 	}
2354:freertos\src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2355:freertos\src/tasks.c **** 
2356:freertos\src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2357:freertos\src/tasks.c **** 	{
2358:freertos\src/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2359:freertos\src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2360:freertos\src/tasks.c **** 	}
2361:freertos\src/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2362:freertos\src/tasks.c **** }
2363:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2364:freertos\src/tasks.c **** 
2365:freertos\src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2366:freertos\src/tasks.c **** 
2367:freertos\src/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2368:freertos\src/tasks.c **** 	{
2369:freertos\src/tasks.c **** 	tskTCB *pxTCB;
2370:freertos\src/tasks.c **** 
2371:freertos\src/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2372:freertos\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2373:freertos\src/tasks.c **** 
2374:freertos\src/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2375:freertos\src/tasks.c **** 	}
2376:freertos\src/tasks.c **** 
2377:freertos\src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2378:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2379:freertos\src/tasks.c **** 
2380:freertos\src/tasks.c **** static void prvInitialiseTaskLists( void )
2381:freertos\src/tasks.c **** {
2382:freertos\src/tasks.c **** unsigned portBASE_TYPE uxPriority;
2383:freertos\src/tasks.c **** 
2384:freertos\src/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX
2385:freertos\src/tasks.c **** 	{
2386:freertos\src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
2387:freertos\src/tasks.c **** 	}
2388:freertos\src/tasks.c **** 
2389:freertos\src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
2390:freertos\src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
2391:freertos\src/tasks.c **** 	vListInitialise( &xPendingReadyList );
2392:freertos\src/tasks.c **** 
2393:freertos\src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2394:freertos\src/tasks.c **** 	{
2395:freertos\src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
2396:freertos\src/tasks.c **** 	}
2397:freertos\src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2398:freertos\src/tasks.c **** 
2399:freertos\src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2400:freertos\src/tasks.c **** 	{
2401:freertos\src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
2402:freertos\src/tasks.c **** 	}
2403:freertos\src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2404:freertos\src/tasks.c **** 
2405:freertos\src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2406:freertos\src/tasks.c **** 	using list2. */
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 44


2407:freertos\src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
2408:freertos\src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
2409:freertos\src/tasks.c **** }
2410:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2411:freertos\src/tasks.c **** 
2412:freertos\src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2413:freertos\src/tasks.c **** {
2414:freertos\src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2415:freertos\src/tasks.c **** 	{
2416:freertos\src/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2417:freertos\src/tasks.c **** 
2418:freertos\src/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2419:freertos\src/tasks.c **** 		too often in the idle task. */
2420:freertos\src/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
2421:freertos\src/tasks.c **** 		{
2422:freertos\src/tasks.c **** 			vTaskSuspendAll();
2423:freertos\src/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
2424:freertos\src/tasks.c **** 			( void ) xTaskResumeAll();
2425:freertos\src/tasks.c **** 
2426:freertos\src/tasks.c **** 			if( xListIsEmpty == pdFALSE )
2427:freertos\src/tasks.c **** 			{
2428:freertos\src/tasks.c **** 				tskTCB *pxTCB;
2429:freertos\src/tasks.c **** 
2430:freertos\src/tasks.c **** 				taskENTER_CRITICAL();
2431:freertos\src/tasks.c **** 				{
2432:freertos\src/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
2433:freertos\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2434:freertos\src/tasks.c **** 					--uxCurrentNumberOfTasks;
2435:freertos\src/tasks.c **** 					--uxTasksDeleted;
2436:freertos\src/tasks.c **** 				}
2437:freertos\src/tasks.c **** 				taskEXIT_CRITICAL();
2438:freertos\src/tasks.c **** 
2439:freertos\src/tasks.c **** 				prvDeleteTCB( pxTCB );
2440:freertos\src/tasks.c **** 			}
2441:freertos\src/tasks.c **** 		}
2442:freertos\src/tasks.c **** 	}
2443:freertos\src/tasks.c **** 	#endif /* vTaskDelete */
2444:freertos\src/tasks.c **** }
2445:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2446:freertos\src/tasks.c **** 
2447:freertos\src/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2448:freertos\src/tasks.c **** {
  46              		.loc 1 2448 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
2449:freertos\src/tasks.c **** 	/* The list item will be inserted in wake time order. */
2450:freertos\src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  51              		.loc 1 2450 0
  52 0000 0C4B     		ldr	r3, .L7
2448:freertos\src/tasks.c **** 	/* The list item will be inserted in wake time order. */
  53              		.loc 1 2448 0
  54 0002 10B5     		push	{r4, lr}
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 4, -8
  57              		.cfi_offset 14, -4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 45


  58              		.loc 1 2450 0
  59 0004 1A68     		ldr	r2, [r3]
2448:freertos\src/tasks.c **** 	/* The list item will be inserted in wake time order. */
  60              		.loc 1 2448 0
  61 0006 0400     		movs	r4, r0
  62              		.loc 1 2450 0
  63 0008 5060     		str	r0, [r2, #4]
2451:freertos\src/tasks.c **** 
2452:freertos\src/tasks.c **** 	if( xTimeToWake < xTickCount )
  64              		.loc 1 2452 0
  65 000a 5A68     		ldr	r2, [r3, #4]
  66 000c 9042     		cmp	r0, r2
  67 000e 05D2     		bcs	.L4
  68              	.LVL2:
  69              	.LBB8:
  70              	.LBB9:
2453:freertos\src/tasks.c **** 	{
2454:freertos\src/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2455:freertos\src/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  71              		.loc 1 2455 0
  72 0010 9868     		ldr	r0, [r3, #8]
  73              	.LVL3:
  74 0012 1968     		ldr	r1, [r3]
  75 0014 0431     		adds	r1, r1, #4
  76 0016 FFF7FEFF 		bl	vListInsert
  77              	.LVL4:
  78 001a 09E0     		b	.L3
  79              	.LVL5:
  80              	.L4:
  81              	.LBE9:
  82              	.LBE8:
2456:freertos\src/tasks.c **** 	}
2457:freertos\src/tasks.c **** 	else
2458:freertos\src/tasks.c **** 	{
2459:freertos\src/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2460:freertos\src/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  83              		.loc 1 2460 0
  84 001c D868     		ldr	r0, [r3, #12]
  85              	.LVL6:
  86 001e 1968     		ldr	r1, [r3]
  87 0020 0431     		adds	r1, r1, #4
  88 0022 FFF7FEFF 		bl	vListInsert
  89              	.LVL7:
2461:freertos\src/tasks.c **** 
2462:freertos\src/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2463:freertos\src/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2464:freertos\src/tasks.c **** 		too. */
2465:freertos\src/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
  90              		.loc 1 2465 0
  91 0026 044B     		ldr	r3, .L7+4
  92 0028 1A68     		ldr	r2, [r3]
  93 002a 9442     		cmp	r4, r2
  94 002c 00D2     		bcs	.L3
2466:freertos\src/tasks.c **** 		{
2467:freertos\src/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
  95              		.loc 1 2467 0
  96 002e 1C60     		str	r4, [r3]
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 46


  97              	.L3:
2468:freertos\src/tasks.c **** 		}
2469:freertos\src/tasks.c **** 	}
2470:freertos\src/tasks.c **** }
  98              		.loc 1 2470 0
  99              		@ sp needed
 100              	.LVL8:
 101 0030 10BD     		pop	{r4, pc}
 102              	.L8:
 103 0032 C046     		.align	2
 104              	.L7:
 105 0034 00000000 		.word	.LANCHOR0
 106 0038 00000000 		.word	.LANCHOR1
 107              		.cfi_endproc
 108              	.LFE57:
 109              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 110              		.section	.text.xTaskGenericCreate,"ax",%progbits
 111              		.align	1
 112              		.global	xTaskGenericCreate
 113              		.code	16
 114              		.thumb_func
 115              		.type	xTaskGenericCreate, %function
 116              	xTaskGenericCreate:
 117              	.LFB32:
 488:freertos\src/tasks.c **** signed portBASE_TYPE xReturn;
 118              		.loc 1 488 0
 119              		.cfi_startproc
 120              		@ args = 16, pretend = 0, frame = 8
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL9:
 123 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 124              		.cfi_def_cfa_offset 32
 125              		.cfi_offset 0, -32
 126              		.cfi_offset 1, -28
 127              		.cfi_offset 2, -24
 128              		.cfi_offset 4, -20
 129              		.cfi_offset 5, -16
 130              		.cfi_offset 6, -12
 131              		.cfi_offset 7, -8
 132              		.cfi_offset 14, -4
 488:freertos\src/tasks.c **** signed portBASE_TYPE xReturn;
 133              		.loc 1 488 0
 134 0002 0090     		str	r0, [sp]
 135              	.LBB17:
 136              	.LBB18:
2471:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2472:freertos\src/tasks.c **** 
2473:freertos\src/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2474:freertos\src/tasks.c **** {
2475:freertos\src/tasks.c **** tskTCB *pxNewTCB;
2476:freertos\src/tasks.c **** 
2477:freertos\src/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2478:freertos\src/tasks.c **** 	the implementation of the port malloc function. */
2479:freertos\src/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 137              		.loc 1 2479 0
 138 0004 4020     		movs	r0, #64
 139              	.LVL10:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 47


 140              	.LBE18:
 141              	.LBE17:
 488:freertos\src/tasks.c **** signed portBASE_TYPE xReturn;
 142              		.loc 1 488 0
 143 0006 0E00     		movs	r6, r1
 144              	.LVL11:
 145 0008 1500     		movs	r5, r2
 146 000a 0193     		str	r3, [sp, #4]
 147              	.LBB20:
 148              	.LBB19:
 149              		.loc 1 2479 0
 150 000c FFF7FEFF 		bl	pvPortMalloc
 151              	.LVL12:
 152 0010 041E     		subs	r4, r0, #0
 153              	.LVL13:
2480:freertos\src/tasks.c **** 
2481:freertos\src/tasks.c **** 	if( pxNewTCB != NULL )
 154              		.loc 1 2481 0
 155 0012 00D1     		bne	.LCB118
 156 0014 9EE0     		b	.L10	@long jump
 157              	.LCB118:
2482:freertos\src/tasks.c **** 	{
2483:freertos\src/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2484:freertos\src/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2485:freertos\src/tasks.c **** 		be deleted later if required. */
2486:freertos\src/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * siz
 158              		.loc 1 2486 0
 159 0016 0A98     		ldr	r0, [sp, #40]
 160              	.LVL14:
 161 0018 0028     		cmp	r0, #0
 162 001a 02D1     		bne	.L11
 163 001c A800     		lsls	r0, r5, #2
 164 001e FFF7FEFF 		bl	pvPortMalloc
 165              	.LVL15:
 166              	.L11:
 167 0022 2063     		str	r0, [r4, #48]
2487:freertos\src/tasks.c **** 
2488:freertos\src/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 168              		.loc 1 2488 0
 169 0024 0028     		cmp	r0, #0
 170 0026 03D1     		bne	.L12
2489:freertos\src/tasks.c **** 		{
2490:freertos\src/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2491:freertos\src/tasks.c **** 			vPortFree( pxNewTCB );
 171              		.loc 1 2491 0
 172 0028 2000     		movs	r0, r4
 173 002a FFF7FEFF 		bl	vPortFree
 174              	.LVL16:
 175 002e 91E0     		b	.L10
 176              	.LVL17:
 177              	.L12:
2492:freertos\src/tasks.c **** 			pxNewTCB = NULL;
2493:freertos\src/tasks.c **** 		}
2494:freertos\src/tasks.c **** 		else
2495:freertos\src/tasks.c **** 		{
2496:freertos\src/tasks.c **** 			/* Just to help debugging. */
2497:freertos\src/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 48


 178              		.loc 1 2497 0
 179 0030 AD00     		lsls	r5, r5, #2
 180              	.LVL18:
 181 0032 2A00     		movs	r2, r5
 182 0034 A521     		movs	r1, #165
 183 0036 FFF7FEFF 		bl	memset
 184              	.LVL19:
 185              	.LBE19:
 186              	.LBE20:
 187              	.LBB21:
 524:freertos\src/tasks.c **** 
 188              		.loc 1 524 0
 189 003a 236B     		ldr	r3, [r4, #48]
 190 003c 043D     		subs	r5, r5, #4
 191              	.LVL20:
 192 003e 5D19     		adds	r5, r3, r5
 193              	.LVL21:
 194 0040 0723     		movs	r3, #7
 195 0042 9D43     		bics	r5, r3
 196 0044 2F00     		movs	r7, r5
 197              	.LVL22:
 198              	.LBB22:
 199              	.LBB23:
2285:freertos\src/tasks.c **** 	{
 200              		.loc 1 2285 0
 201 0046 0023     		movs	r3, #0
 202              	.LVL23:
 203              	.L14:
2287:freertos\src/tasks.c **** 
 204              		.loc 1 2287 0
 205 0048 1A00     		movs	r2, r3
 206 004a F156     		ldrsb	r1, [r6, r3]
 207 004c 3432     		adds	r2, r2, #52
 208 004e A154     		strb	r1, [r4, r2]
2292:freertos\src/tasks.c **** 		{
 209              		.loc 1 2292 0
 210 0050 F256     		ldrsb	r2, [r6, r3]
 211 0052 002A     		cmp	r2, #0
 212 0054 02D0     		beq	.L13
2285:freertos\src/tasks.c **** 	{
 213              		.loc 1 2285 0
 214 0056 0133     		adds	r3, r3, #1
 215              	.LVL24:
 216 0058 082B     		cmp	r3, #8
 217 005a F5D1     		bne	.L14
 218              	.L13:
2300:freertos\src/tasks.c **** 
 219              		.loc 1 2300 0
 220 005c 2300     		movs	r3, r4
 221              	.LVL25:
 222 005e 0022     		movs	r2, #0
 223 0060 089D     		ldr	r5, [sp, #32]
 224              	.LVL26:
 225 0062 3B33     		adds	r3, r3, #59
 226 0064 1A70     		strb	r2, [r3]
 227 0066 032D     		cmp	r5, #3
 228 0068 00D9     		bls	.L15
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 49


 229 006a 0325     		movs	r5, #3
 230              	.L15:
 231              	.LVL27:
2316:freertos\src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 232              		.loc 1 2316 0
 233 006c 261D     		adds	r6, r4, #4
 234              	.LVL28:
2309:freertos\src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 235              		.loc 1 2309 0
 236 006e E562     		str	r5, [r4, #44]
2312:freertos\src/tasks.c **** 	}
 237              		.loc 1 2312 0
 238 0070 E563     		str	r5, [r4, #60]
2316:freertos\src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 239              		.loc 1 2316 0
 240 0072 3000     		movs	r0, r6
 241 0074 FFF7FEFF 		bl	vListInitialiseItem
 242              	.LVL29:
2317:freertos\src/tasks.c **** 
 243              		.loc 1 2317 0
 244 0078 2000     		movs	r0, r4
 245 007a 1830     		adds	r0, r0, #24
 246 007c FFF7FEFF 		bl	vListInitialiseItem
 247              	.LVL30:
2324:freertos\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 248              		.loc 1 2324 0
 249 0080 0423     		movs	r3, #4
 250 0082 5D1B     		subs	r5, r3, r5
 251              	.LVL31:
2321:freertos\src/tasks.c **** 
 252              		.loc 1 2321 0
 253 0084 2461     		str	r4, [r4, #16]
2324:freertos\src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 254              		.loc 1 2324 0
 255 0086 A561     		str	r5, [r4, #24]
2325:freertos\src/tasks.c **** 
 256              		.loc 1 2325 0
 257 0088 6462     		str	r4, [r4, #36]
 258              	.LVL32:
 259              	.LBE23:
 260              	.LBE22:
 556:freertos\src/tasks.c **** 		}
 261              		.loc 1 556 0
 262 008a 019A     		ldr	r2, [sp, #4]
 263 008c 0099     		ldr	r1, [sp]
 264 008e 3800     		movs	r0, r7
 265 0090 FFF7FEFF 		bl	pxPortInitialiseStack
 266              	.LVL33:
 560:freertos\src/tasks.c **** 		{
 267              		.loc 1 560 0
 268 0094 099B     		ldr	r3, [sp, #36]
 556:freertos\src/tasks.c **** 		}
 269              		.loc 1 556 0
 270 0096 2060     		str	r0, [r4]
 560:freertos\src/tasks.c **** 		{
 271              		.loc 1 560 0
 272 0098 002B     		cmp	r3, #0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 50


 273 009a 00D0     		beq	.L16
 565:freertos\src/tasks.c **** 		}
 274              		.loc 1 565 0
 275 009c 1C60     		str	r4, [r3]
 276              	.L16:
 570:freertos\src/tasks.c **** 		{
 277              		.loc 1 570 0
 278 009e FFF7FEFF 		bl	vPortEnterCritical
 279              	.LVL34:
 572:freertos\src/tasks.c **** 			if( pxCurrentTCB == NULL )
 280              		.loc 1 572 0
 281 00a2 2E4D     		ldr	r5, .L38
 282 00a4 2B69     		ldr	r3, [r5, #16]
 283 00a6 0133     		adds	r3, r3, #1
 284 00a8 2B61     		str	r3, [r5, #16]
 573:freertos\src/tasks.c **** 			{
 285              		.loc 1 573 0
 286 00aa 2B68     		ldr	r3, [r5]
 287 00ac 002B     		cmp	r3, #0
 288 00ae 27D1     		bne	.L17
 577:freertos\src/tasks.c **** 
 289              		.loc 1 577 0
 290 00b0 2C60     		str	r4, [r5]
 579:freertos\src/tasks.c **** 				{
 291              		.loc 1 579 0
 292 00b2 2B69     		ldr	r3, [r5, #16]
 293 00b4 012B     		cmp	r3, #1
 294 00b6 2DD1     		bne	.L19
 295              	.LVL35:
 296              	.LBB24:
 297              	.LBB25:
2386:freertos\src/tasks.c **** 	}
 298              		.loc 1 2386 0
 299 00b8 2800     		movs	r0, r5
 300 00ba 1430     		adds	r0, r0, #20
 301 00bc FFF7FEFF 		bl	vListInitialise
 302              	.LVL36:
 303 00c0 2800     		movs	r0, r5
 304 00c2 2830     		adds	r0, r0, #40
 305 00c4 FFF7FEFF 		bl	vListInitialise
 306              	.LVL37:
 307 00c8 2800     		movs	r0, r5
 308 00ca 3C30     		adds	r0, r0, #60
 309 00cc FFF7FEFF 		bl	vListInitialise
 310              	.LVL38:
 311 00d0 2800     		movs	r0, r5
 312 00d2 5030     		adds	r0, r0, #80
 313 00d4 FFF7FEFF 		bl	vListInitialise
 314              	.LVL39:
2389:freertos\src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 315              		.loc 1 2389 0
 316 00d8 2148     		ldr	r0, .L38+4
 317 00da FFF7FEFF 		bl	vListInitialise
 318              	.LVL40:
2390:freertos\src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 319              		.loc 1 2390 0
 320 00de 2148     		ldr	r0, .L38+8
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 51


 321 00e0 FFF7FEFF 		bl	vListInitialise
 322              	.LVL41:
2391:freertos\src/tasks.c **** 
 323              		.loc 1 2391 0
 324 00e4 204F     		ldr	r7, .L38+12
 325              	.LVL42:
 326 00e6 3800     		movs	r0, r7
 327 00e8 0C30     		adds	r0, r0, #12
 328 00ea FFF7FEFF 		bl	vListInitialise
 329              	.LVL43:
2401:freertos\src/tasks.c **** 	}
 330              		.loc 1 2401 0
 331 00ee 3800     		movs	r0, r7
 332 00f0 2030     		adds	r0, r0, #32
 333 00f2 FFF7FEFF 		bl	vListInitialise
 334              	.LVL44:
2407:freertos\src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 335              		.loc 1 2407 0
 336 00f6 1A4B     		ldr	r3, .L38+4
 337 00f8 EB60     		str	r3, [r5, #12]
2408:freertos\src/tasks.c **** }
 338              		.loc 1 2408 0
 339 00fa 1A4B     		ldr	r3, .L38+8
 340 00fc AB60     		str	r3, [r5, #8]
 341 00fe 09E0     		b	.L19
 342              	.LVL45:
 343              	.L17:
 344              	.LBE25:
 345              	.LBE24:
 592:freertos\src/tasks.c **** 				{
 346              		.loc 1 592 0
 347 0100 194B     		ldr	r3, .L38+12
 348 0102 5B6B     		ldr	r3, [r3, #52]
 349 0104 002B     		cmp	r3, #0
 350 0106 05D1     		bne	.L19
 594:freertos\src/tasks.c **** 					{
 351              		.loc 1 594 0
 352 0108 2B68     		ldr	r3, [r5]
 353 010a 089A     		ldr	r2, [sp, #32]
 354 010c DB6A     		ldr	r3, [r3, #44]
 355 010e 9A42     		cmp	r2, r3
 356 0110 00D3     		bcc	.L19
 596:freertos\src/tasks.c **** 					}
 357              		.loc 1 596 0
 358 0112 2C60     		str	r4, [r5]
 359              	.LVL46:
 360              	.L19:
 601:freertos\src/tasks.c **** 
 361              		.loc 1 601 0
 362 0114 144B     		ldr	r3, .L38+12
 611:freertos\src/tasks.c **** 
 363              		.loc 1 611 0
 364 0116 E06A     		ldr	r0, [r4, #44]
 601:freertos\src/tasks.c **** 
 365              		.loc 1 601 0
 366 0118 9A6B     		ldr	r2, [r3, #56]
 367 011a 1C00     		movs	r4, r3
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 52


 368 011c 0132     		adds	r2, r2, #1
 369 011e 9A63     		str	r2, [r3, #56]
 611:freertos\src/tasks.c **** 
 370              		.loc 1 611 0
 371 0120 DA6B     		ldr	r2, [r3, #60]
 372 0122 9042     		cmp	r0, r2
 373 0124 00D9     		bls	.L21
 611:freertos\src/tasks.c **** 
 374              		.loc 1 611 0 is_stmt 0 discriminator 1
 375 0126 D863     		str	r0, [r3, #60]
 376              	.L21:
 611:freertos\src/tasks.c **** 
 377              		.loc 1 611 0 discriminator 3
 378 0128 1423     		movs	r3, #20
 379 012a 2A00     		movs	r2, r5
 380 012c 5843     		muls	r0, r3
 381 012e 1432     		adds	r2, r2, #20
 382 0130 1018     		adds	r0, r2, r0
 383 0132 3100     		movs	r1, r6
 384 0134 FFF7FEFF 		bl	vListInsertEnd
 385              	.LVL47:
 616:freertos\src/tasks.c **** 	}
 386              		.loc 1 616 0 is_stmt 1 discriminator 3
 387 0138 FFF7FEFF 		bl	vPortExitCritical
 388              	.LVL48:
 389              	.LBE21:
 626:freertos\src/tasks.c **** 		{
 390              		.loc 1 626 0 discriminator 3
 391 013c 636B     		ldr	r3, [r4, #52]
 392 013e 0124     		movs	r4, #1
 393 0140 002B     		cmp	r3, #0
 394 0142 09D0     		beq	.L32
 630:freertos\src/tasks.c **** 			{
 395              		.loc 1 630 0
 396 0144 2B68     		ldr	r3, [r5]
 397 0146 089A     		ldr	r2, [sp, #32]
 398 0148 DB6A     		ldr	r3, [r3, #44]
 399 014a 9A42     		cmp	r2, r3
 400 014c 04D9     		bls	.L32
 632:freertos\src/tasks.c **** 			}
 401              		.loc 1 632 0
 402 014e FFF7FEFF 		bl	vPortYield
 403              	.LVL49:
 404 0152 01E0     		b	.L32
 405              	.LVL50:
 406              	.L10:
 620:freertos\src/tasks.c **** 		traceTASK_CREATE_FAILED();
 407              		.loc 1 620 0
 408 0154 0124     		movs	r4, #1
 409 0156 6442     		rsbs	r4, r4, #0
 410              	.LVL51:
 411              	.L32:
 638:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 412              		.loc 1 638 0
 413 0158 2000     		movs	r0, r4
 414              		@ sp needed
 415 015a FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 53


 416              	.L39:
 417              		.align	2
 418              	.L38:
 419 015c 00000000 		.word	.LANCHOR0
 420 0160 64000000 		.word	.LANCHOR0+100
 421 0164 78000000 		.word	.LANCHOR0+120
 422 0168 80000000 		.word	.LANCHOR2
 423              		.cfi_endproc
 424              	.LFE32:
 425              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 426              		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 427              		.align	1
 428              		.global	xTaskIsTaskSuspended
 429              		.code	16
 430              		.thumb_func
 431              		.type	xTaskIsTaskSuspended, %function
 432              	xTaskIsTaskSuspended:
 433              	.LFB36:
1108:freertos\src/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 434              		.loc 1 1108 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL52:
1117:freertos\src/tasks.c **** 		{
 440              		.loc 1 1117 0
 441 0000 074B     		ldr	r3, .L46
 442 0002 4169     		ldr	r1, [r0, #20]
 443 0004 1A00     		movs	r2, r3
 444 0006 2032     		adds	r2, r2, #32
 445 0008 9142     		cmp	r1, r2
 446 000a 06D1     		bne	.L45
 447              	.LVL53:
 448              	.LBB28:
 449              	.LBB29:
1120:freertos\src/tasks.c **** 			{
 450              		.loc 1 1120 0
 451 000c 806A     		ldr	r0, [r0, #40]
 452              	.LVL54:
 453 000e 0C33     		adds	r3, r3, #12
 454 0010 9842     		cmp	r0, r3
 455 0012 02D0     		beq	.L45
 456              	.LBE29:
 457              	.LBE28:
1109:freertos\src/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 458              		.loc 1 1109 0
 459 0014 4242     		rsbs	r2, r0, #0
 460 0016 4241     		adcs	r2, r2, r0
 461 0018 00E0     		b	.L44
 462              	.LVL55:
 463              	.L45:
 464 001a 0022     		movs	r2, #0
 465              	.LVL56:
 466              	.L44:
1134:freertos\src/tasks.c **** 
 467              		.loc 1 1134 0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 54


 468 001c 1000     		movs	r0, r2
 469              		@ sp needed
 470 001e 7047     		bx	lr
 471              	.L47:
 472              		.align	2
 473              	.L46:
 474 0020 80000000 		.word	.LANCHOR2
 475              		.cfi_endproc
 476              	.LFE36:
 477              		.size	xTaskIsTaskSuspended, .-xTaskIsTaskSuspended
 478              		.section	.text.vTaskResume,"ax",%progbits
 479              		.align	1
 480              		.global	vTaskResume
 481              		.code	16
 482              		.thumb_func
 483              		.type	vTaskResume, %function
 484              	vTaskResume:
 485              	.LFB37:
1142:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 486              		.loc 1 1142 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              	.LVL57:
 491 0000 70B5     		push	{r4, r5, r6, lr}
 492              		.cfi_def_cfa_offset 16
 493              		.cfi_offset 4, -16
 494              		.cfi_offset 5, -12
 495              		.cfi_offset 6, -8
 496              		.cfi_offset 14, -4
1142:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 497              		.loc 1 1142 0
 498 0002 041E     		subs	r4, r0, #0
1150:freertos\src/tasks.c **** 		{
 499              		.loc 1 1150 0
 500 0004 25D0     		beq	.L48
1150:freertos\src/tasks.c **** 		{
 501              		.loc 1 1150 0 is_stmt 0 discriminator 1
 502 0006 134D     		ldr	r5, .L57
 503 0008 2B68     		ldr	r3, [r5]
 504 000a 9842     		cmp	r0, r3
 505 000c 21D0     		beq	.L48
1152:freertos\src/tasks.c **** 			{
 506              		.loc 1 1152 0 is_stmt 1
 507 000e FFF7FEFF 		bl	vPortEnterCritical
 508              	.LVL58:
1154:freertos\src/tasks.c **** 				{
 509              		.loc 1 1154 0
 510 0012 2000     		movs	r0, r4
 511 0014 FFF7FEFF 		bl	xTaskIsTaskSuspended
 512              	.LVL59:
 513 0018 0128     		cmp	r0, #1
 514 001a 18D1     		bne	.L51
1160:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 515              		.loc 1 1160 0
 516 001c 261D     		adds	r6, r4, #4
 517 001e 3000     		movs	r0, r6
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 55


 518 0020 FFF7FEFF 		bl	uxListRemove
 519              	.LVL60:
1161:freertos\src/tasks.c **** 
 520              		.loc 1 1161 0
 521 0024 0C4B     		ldr	r3, .L57+4
 522 0026 E06A     		ldr	r0, [r4, #44]
 523 0028 DA6B     		ldr	r2, [r3, #60]
 524 002a 9042     		cmp	r0, r2
 525 002c 00D9     		bls	.L52
1161:freertos\src/tasks.c **** 
 526              		.loc 1 1161 0 is_stmt 0 discriminator 1
 527 002e D863     		str	r0, [r3, #60]
 528              	.L52:
1161:freertos\src/tasks.c **** 
 529              		.loc 1 1161 0 discriminator 3
 530 0030 1423     		movs	r3, #20
 531 0032 2A00     		movs	r2, r5
 532 0034 5843     		muls	r0, r3
 533 0036 1432     		adds	r2, r2, #20
 534 0038 1018     		adds	r0, r2, r0
 535 003a 3100     		movs	r1, r6
 536 003c FFF7FEFF 		bl	vListInsertEnd
 537              	.LVL61:
1164:freertos\src/tasks.c **** 					{
 538              		.loc 1 1164 0 is_stmt 1 discriminator 3
 539 0040 2B68     		ldr	r3, [r5]
 540 0042 E26A     		ldr	r2, [r4, #44]
 541 0044 DB6A     		ldr	r3, [r3, #44]
 542 0046 9A42     		cmp	r2, r3
 543 0048 01D3     		bcc	.L51
1169:freertos\src/tasks.c **** 					}
 544              		.loc 1 1169 0
 545 004a FFF7FEFF 		bl	vPortYield
 546              	.LVL62:
 547              	.L51:
1173:freertos\src/tasks.c **** 		}
 548              		.loc 1 1173 0
 549 004e FFF7FEFF 		bl	vPortExitCritical
 550              	.LVL63:
 551              	.L48:
1175:freertos\src/tasks.c **** 
 552              		.loc 1 1175 0
 553              		@ sp needed
 554              	.LVL64:
 555 0052 70BD     		pop	{r4, r5, r6, pc}
 556              	.L58:
 557              		.align	2
 558              	.L57:
 559 0054 00000000 		.word	.LANCHOR0
 560 0058 80000000 		.word	.LANCHOR2
 561              		.cfi_endproc
 562              	.LFE37:
 563              		.size	vTaskResume, .-vTaskResume
 564              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 565              		.align	1
 566              		.global	xTaskResumeFromISR
 567              		.code	16
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 56


 568              		.thumb_func
 569              		.type	xTaskResumeFromISR, %function
 570              	xTaskResumeFromISR:
 571              	.LFB38:
1184:freertos\src/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 572              		.loc 1 1184 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 8
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              	.LVL65:
 577 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 578              		.cfi_def_cfa_offset 32
 579              		.cfi_offset 0, -32
 580              		.cfi_offset 1, -28
 581              		.cfi_offset 2, -24
 582              		.cfi_offset 4, -20
 583              		.cfi_offset 5, -16
 584              		.cfi_offset 6, -12
 585              		.cfi_offset 7, -8
 586              		.cfi_offset 14, -4
1184:freertos\src/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 587              		.loc 1 1184 0
 588 0002 0400     		movs	r4, r0
 589              	.LVL66:
1209:freertos\src/tasks.c **** 		{
 590              		.loc 1 1209 0
 591 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 592              	.LVL67:
 593 0008 0090     		str	r0, [sp]
 594              	.LVL68:
1211:freertos\src/tasks.c **** 			{
 595              		.loc 1 1211 0
 596 000a 2000     		movs	r0, r4
 597              	.LVL69:
 598 000c FFF7FEFF 		bl	xTaskIsTaskSuspended
 599              	.LVL70:
1185:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 600              		.loc 1 1185 0
 601 0010 0027     		movs	r7, #0
1211:freertos\src/tasks.c **** 			{
 602              		.loc 1 1211 0
 603 0012 0128     		cmp	r0, #1
 604 0014 1FD1     		bne	.L60
1215:freertos\src/tasks.c **** 				{
 605              		.loc 1 1215 0
 606 0016 124D     		ldr	r5, .L65
 607 0018 2B6C     		ldr	r3, [r5, #64]
 608 001a BB42     		cmp	r3, r7
 609 001c 15D1     		bne	.L61
1217:freertos\src/tasks.c **** 					{
 610              		.loc 1 1217 0
 611 001e 114E     		ldr	r6, .L65+4
1185:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 612              		.loc 1 1185 0
 613 0020 E26A     		ldr	r2, [r4, #44]
1217:freertos\src/tasks.c **** 					{
 614              		.loc 1 1217 0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 57


 615 0022 3368     		ldr	r3, [r6]
1185:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 616              		.loc 1 1185 0
 617 0024 DB6A     		ldr	r3, [r3, #44]
 618 0026 9A42     		cmp	r2, r3
 619 0028 7F41     		adcs	r7, r7, r7
 620              	.LVL71:
1222:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 621              		.loc 1 1222 0
 622 002a 231D     		adds	r3, r4, #4
 623 002c 1800     		movs	r0, r3
 624 002e 0193     		str	r3, [sp, #4]
 625 0030 FFF7FEFF 		bl	uxListRemove
 626              	.LVL72:
1223:freertos\src/tasks.c **** 				}
 627              		.loc 1 1223 0
 628 0034 E06A     		ldr	r0, [r4, #44]
 629 0036 EB6B     		ldr	r3, [r5, #60]
 630 0038 9842     		cmp	r0, r3
 631 003a 00D9     		bls	.L62
1223:freertos\src/tasks.c **** 				}
 632              		.loc 1 1223 0 is_stmt 0 discriminator 1
 633 003c E863     		str	r0, [r5, #60]
 634              	.L62:
1223:freertos\src/tasks.c **** 				}
 635              		.loc 1 1223 0 discriminator 3
 636 003e 1423     		movs	r3, #20
 637 0040 5843     		muls	r0, r3
 638 0042 1436     		adds	r6, r6, #20
 639 0044 3018     		adds	r0, r6, r0
 640 0046 0199     		ldr	r1, [sp, #4]
 641 0048 03E0     		b	.L64
 642              	.LVL73:
 643              	.L61:
1230:freertos\src/tasks.c **** 				}
 644              		.loc 1 1230 0 is_stmt 1
 645 004a 2100     		movs	r1, r4
 646 004c 2800     		movs	r0, r5
 647 004e 1831     		adds	r1, r1, #24
 648 0050 0C30     		adds	r0, r0, #12
 649              	.LVL74:
 650              	.L64:
 651 0052 FFF7FEFF 		bl	vListInsertEnd
 652              	.LVL75:
 653              	.L60:
1234:freertos\src/tasks.c **** 
 654              		.loc 1 1234 0
 655 0056 0098     		ldr	r0, [sp]
 656 0058 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 657              	.LVL76:
1237:freertos\src/tasks.c **** 
 658              		.loc 1 1237 0
 659              		@ sp needed
 660 005c 3800     		movs	r0, r7
 661              	.LVL77:
 662              	.LVL78:
 663 005e FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 58


 664              	.L66:
 665              		.align	2
 666              	.L65:
 667 0060 80000000 		.word	.LANCHOR2
 668 0064 00000000 		.word	.LANCHOR0
 669              		.cfi_endproc
 670              	.LFE38:
 671              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 672              		.section	.text.vTaskStartScheduler,"ax",%progbits
 673              		.align	1
 674              		.global	vTaskStartScheduler
 675              		.code	16
 676              		.thumb_func
 677              		.type	vTaskStartScheduler, %function
 678              	vTaskStartScheduler:
 679              	.LFB39:
1243:freertos\src/tasks.c **** portBASE_TYPE xReturn;
 680              		.loc 1 1243 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 685              		.cfi_def_cfa_offset 24
 686              		.cfi_offset 0, -24
 687              		.cfi_offset 1, -20
 688              		.cfi_offset 2, -16
 689              		.cfi_offset 3, -12
 690              		.cfi_offset 4, -8
 691              		.cfi_offset 14, -4
1256:freertos\src/tasks.c **** 	}
 692              		.loc 1 1256 0
 693 0002 0024     		movs	r4, #0
 694 0004 3222     		movs	r2, #50
 695 0006 0394     		str	r4, [sp, #12]
 696 0008 0294     		str	r4, [sp, #8]
 697 000a 0194     		str	r4, [sp, #4]
 698 000c 0094     		str	r4, [sp]
 699 000e 2300     		movs	r3, r4
 700 0010 0649     		ldr	r1, .L69
 701 0012 0748     		ldr	r0, .L69+4
 702 0014 FFF7FEFF 		bl	xTaskGenericCreate
 703              	.LVL79:
1269:freertos\src/tasks.c **** 	{
 704              		.loc 1 1269 0
 705 0018 0128     		cmp	r0, #1
 706 001a 06D1     		bne	.L67
1276:freertos\src/tasks.c **** 
 707              		.loc 1 1276 0
 708              		.syntax divided
 709              	@ 1276 "freertos\src\tasks.c" 1
 710 001c 72B6     		 cpsid i 
 711              	@ 0 "" 2
1286:freertos\src/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 712              		.loc 1 1286 0
 713              		.thumb
 714              		.syntax unified
 715 001e 054B     		ldr	r3, .L69+8
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 59


 716 0020 5863     		str	r0, [r3, #52]
1287:freertos\src/tasks.c **** 
 717              		.loc 1 1287 0
 718 0022 054B     		ldr	r3, .L69+12
 719 0024 5C60     		str	r4, [r3, #4]
1296:freertos\src/tasks.c **** 		{
 720              		.loc 1 1296 0
 721 0026 FFF7FEFF 		bl	xPortStartScheduler
 722              	.LVL80:
 723              	.L67:
1313:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 724              		.loc 1 1313 0
 725              		@ sp needed
 726 002a 1FBD     		pop	{r0, r1, r2, r3, r4, pc}
 727              	.L70:
 728              		.align	2
 729              	.L69:
 730 002c 00000000 		.word	.LC24
 731 0030 00000000 		.word	prvIdleTask
 732 0034 80000000 		.word	.LANCHOR2
 733 0038 00000000 		.word	.LANCHOR0
 734              		.cfi_endproc
 735              	.LFE39:
 736              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 737              		.section	.text.vTaskEndScheduler,"ax",%progbits
 738              		.align	1
 739              		.global	vTaskEndScheduler
 740              		.code	16
 741              		.thumb_func
 742              		.type	vTaskEndScheduler, %function
 743              	vTaskEndScheduler:
 744              	.LFB40:
1317:freertos\src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 745              		.loc 1 1317 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749 0000 10B5     		push	{r4, lr}
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 4, -8
 752              		.cfi_offset 14, -4
1321:freertos\src/tasks.c **** 	xSchedulerRunning = pdFALSE;
 753              		.loc 1 1321 0
 754              		.syntax divided
 755              	@ 1321 "freertos\src\tasks.c" 1
 756 0002 72B6     		 cpsid i 
 757              	@ 0 "" 2
1322:freertos\src/tasks.c **** 	vPortEndScheduler();
 758              		.loc 1 1322 0
 759              		.thumb
 760              		.syntax unified
 761 0004 0022     		movs	r2, #0
 762 0006 024B     		ldr	r3, .L72
1324:freertos\src/tasks.c **** /*----------------------------------------------------------*/
 763              		.loc 1 1324 0
 764              		@ sp needed
1322:freertos\src/tasks.c **** 	vPortEndScheduler();
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 60


 765              		.loc 1 1322 0
 766 0008 5A63     		str	r2, [r3, #52]
1323:freertos\src/tasks.c **** }
 767              		.loc 1 1323 0
 768 000a FFF7FEFF 		bl	vPortEndScheduler
 769              	.LVL81:
1324:freertos\src/tasks.c **** /*----------------------------------------------------------*/
 770              		.loc 1 1324 0
 771 000e 10BD     		pop	{r4, pc}
 772              	.L73:
 773              		.align	2
 774              	.L72:
 775 0010 80000000 		.word	.LANCHOR2
 776              		.cfi_endproc
 777              	.LFE40:
 778              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 779              		.section	.text.vTaskSuspendAll,"ax",%progbits
 780              		.align	1
 781              		.global	vTaskSuspendAll
 782              		.code	16
 783              		.thumb_func
 784              		.type	vTaskSuspendAll, %function
 785              	vTaskSuspendAll:
 786              	.LFB41:
1328:freertos\src/tasks.c **** 	/* A critical section is not required as the variable is of type
 787              		.loc 1 1328 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
1331:freertos\src/tasks.c **** }
 792              		.loc 1 1331 0
 793 0000 024A     		ldr	r2, .L75
1332:freertos\src/tasks.c **** /*----------------------------------------------------------*/
 794              		.loc 1 1332 0
 795              		@ sp needed
1331:freertos\src/tasks.c **** }
 796              		.loc 1 1331 0
 797 0002 136C     		ldr	r3, [r2, #64]
 798 0004 0133     		adds	r3, r3, #1
 799 0006 1364     		str	r3, [r2, #64]
1332:freertos\src/tasks.c **** /*----------------------------------------------------------*/
 800              		.loc 1 1332 0
 801 0008 7047     		bx	lr
 802              	.L76:
 803 000a C046     		.align	2
 804              	.L75:
 805 000c 80000000 		.word	.LANCHOR2
 806              		.cfi_endproc
 807              	.LFE41:
 808              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 809              		.section	.text.xTaskGetTickCount,"ax",%progbits
 810              		.align	1
 811              		.global	xTaskGetTickCount
 812              		.code	16
 813              		.thumb_func
 814              		.type	xTaskGetTickCount, %function
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 61


 815              	xTaskGetTickCount:
 816              	.LFB43:
1436:freertos\src/tasks.c **** portTickType xTicks;
 817              		.loc 1 1436 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821 0000 10B5     		push	{r4, lr}
 822              		.cfi_def_cfa_offset 8
 823              		.cfi_offset 4, -8
 824              		.cfi_offset 14, -4
1440:freertos\src/tasks.c **** 	{
 825              		.loc 1 1440 0
 826 0002 FFF7FEFF 		bl	vPortEnterCritical
 827              	.LVL82:
1442:freertos\src/tasks.c **** 	}
 828              		.loc 1 1442 0
 829 0006 034B     		ldr	r3, .L78
1447:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 830              		.loc 1 1447 0
 831              		@ sp needed
1442:freertos\src/tasks.c **** 	}
 832              		.loc 1 1442 0
 833 0008 5C68     		ldr	r4, [r3, #4]
 834              	.LVL83:
1444:freertos\src/tasks.c **** 
 835              		.loc 1 1444 0
 836 000a FFF7FEFF 		bl	vPortExitCritical
 837              	.LVL84:
1447:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 838              		.loc 1 1447 0
 839 000e 2000     		movs	r0, r4
 840              	.LVL85:
 841 0010 10BD     		pop	{r4, pc}
 842              	.L79:
 843 0012 C046     		.align	2
 844              	.L78:
 845 0014 00000000 		.word	.LANCHOR0
 846              		.cfi_endproc
 847              	.LFE43:
 848              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 849              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 850              		.align	1
 851              		.global	xTaskGetTickCountFromISR
 852              		.code	16
 853              		.thumb_func
 854              		.type	xTaskGetTickCountFromISR, %function
 855              	xTaskGetTickCountFromISR:
 856              	.LFB44:
1451:freertos\src/tasks.c **** portTickType xReturn;
 857              		.loc 1 1451 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861 0000 10B5     		push	{r4, lr}
 862              		.cfi_def_cfa_offset 8
 863              		.cfi_offset 4, -8
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 62


 864              		.cfi_offset 14, -4
1471:freertos\src/tasks.c **** 	xReturn = xTickCount;
 865              		.loc 1 1471 0
 866 0002 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 867              	.LVL86:
1472:freertos\src/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 868              		.loc 1 1472 0
 869 0006 034B     		ldr	r3, .L81
1476:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 870              		.loc 1 1476 0
 871              		@ sp needed
1472:freertos\src/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 872              		.loc 1 1472 0
 873 0008 5C68     		ldr	r4, [r3, #4]
 874              	.LVL87:
1473:freertos\src/tasks.c **** 
 875              		.loc 1 1473 0
 876 000a FFF7FEFF 		bl	vClearInterruptMaskFromISR
 877              	.LVL88:
1476:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 878              		.loc 1 1476 0
 879 000e 2000     		movs	r0, r4
 880              	.LVL89:
 881 0010 10BD     		pop	{r4, pc}
 882              	.L82:
 883 0012 C046     		.align	2
 884              	.L81:
 885 0014 00000000 		.word	.LANCHOR0
 886              		.cfi_endproc
 887              	.LFE44:
 888              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 889              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 890              		.align	1
 891              		.global	uxTaskGetNumberOfTasks
 892              		.code	16
 893              		.thumb_func
 894              		.type	uxTaskGetNumberOfTasks, %function
 895              	uxTaskGetNumberOfTasks:
 896              	.LFB45:
1480:freertos\src/tasks.c **** 	/* A critical section is not required because the variables are of type
 897              		.loc 1 1480 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              		@ link register save eliminated.
1483:freertos\src/tasks.c **** }
 902              		.loc 1 1483 0
 903 0000 014B     		ldr	r3, .L84
1484:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 904              		.loc 1 1484 0
 905              		@ sp needed
1483:freertos\src/tasks.c **** }
 906              		.loc 1 1483 0
 907 0002 1869     		ldr	r0, [r3, #16]
1484:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 908              		.loc 1 1484 0
 909 0004 7047     		bx	lr
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 63


 910              	.L85:
 911 0006 C046     		.align	2
 912              	.L84:
 913 0008 00000000 		.word	.LANCHOR0
 914              		.cfi_endproc
 915              	.LFE45:
 916              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 917              		.section	.text.xTaskIncrementTick,"ax",%progbits
 918              		.align	1
 919              		.global	xTaskIncrementTick
 920              		.code	16
 921              		.thumb_func
 922              		.type	xTaskIncrementTick, %function
 923              	xTaskIncrementTick:
 924              	.LFB46:
1605:freertos\src/tasks.c **** tskTCB * pxTCB;
 925              		.loc 1 1605 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 8
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              	.LVL90:
 930 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 931              		.cfi_def_cfa_offset 32
 932              		.cfi_offset 0, -32
 933              		.cfi_offset 1, -28
 934              		.cfi_offset 2, -24
 935              		.cfi_offset 4, -20
 936              		.cfi_offset 5, -16
 937              		.cfi_offset 6, -12
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
1614:freertos\src/tasks.c **** 	{
 940              		.loc 1 1614 0
 941 0002 3B4C     		ldr	r4, .L116
 942 0004 236C     		ldr	r3, [r4, #64]
 943 0006 002B     		cmp	r3, #0
 944 0008 3AD1     		bne	.L87
1618:freertos\src/tasks.c **** 
 945              		.loc 1 1618 0
 946 000a 3A4B     		ldr	r3, .L116+4
 947 000c 5A68     		ldr	r2, [r3, #4]
 948 000e 0132     		adds	r2, r2, #1
 949 0010 5A60     		str	r2, [r3, #4]
 950              	.LBB30:
1623:freertos\src/tasks.c **** 
 951              		.loc 1 1623 0
 952 0012 5A68     		ldr	r2, [r3, #4]
 953 0014 0092     		str	r2, [sp]
 954              	.LVL91:
1625:freertos\src/tasks.c **** 			{
 955              		.loc 1 1625 0
 956 0016 0099     		ldr	r1, [sp]
 957 0018 374A     		ldr	r2, .L116+8
 958              	.LVL92:
 959 001a 0029     		cmp	r1, #0
 960 001c 12D1     		bne	.L88
 961              	.LBB31:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 64


1627:freertos\src/tasks.c **** 			}
 962              		.loc 1 1627 0
 963 001e D968     		ldr	r1, [r3, #12]
 964              	.LVL93:
 965 0020 9868     		ldr	r0, [r3, #8]
 966 0022 D860     		str	r0, [r3, #12]
 967 0024 9960     		str	r1, [r3, #8]
 968 0026 616C     		ldr	r1, [r4, #68]
 969              	.LVL94:
 970 0028 0131     		adds	r1, r1, #1
 971 002a 6164     		str	r1, [r4, #68]
 972              	.LVL95:
 973 002c D968     		ldr	r1, [r3, #12]
 974 002e 0968     		ldr	r1, [r1]
 975 0030 0029     		cmp	r1, #0
 976 0032 02D1     		bne	.L115
 977 0034 0123     		movs	r3, #1
 978 0036 5B42     		rsbs	r3, r3, #0
 979 0038 03E0     		b	.L114
 980              	.L115:
 981 003a DB68     		ldr	r3, [r3, #12]
 982              	.LVL96:
 983 003c DB68     		ldr	r3, [r3, #12]
 984              	.LVL97:
 985 003e DB68     		ldr	r3, [r3, #12]
 986              	.LVL98:
 987 0040 5B68     		ldr	r3, [r3, #4]
 988              	.LVL99:
 989              	.L114:
 990 0042 1360     		str	r3, [r2]
 991              	.L88:
 992              	.LBE31:
1634:freertos\src/tasks.c **** 			{
 993              		.loc 1 1634 0
 994 0044 1368     		ldr	r3, [r2]
 995 0046 009A     		ldr	r2, [sp]
 996              	.LBE30:
1608:freertos\src/tasks.c **** 
 997              		.loc 1 1608 0
 998 0048 0026     		movs	r6, #0
 999              	.LBB32:
1634:freertos\src/tasks.c **** 			{
 1000              		.loc 1 1634 0
 1001 004a 9A42     		cmp	r2, r3
 1002 004c 08D3     		bcc	.L91
 1003              	.LVL100:
 1004              	.L92:
1638:freertos\src/tasks.c **** 					{
 1005              		.loc 1 1638 0
 1006 004e 294F     		ldr	r7, .L116+4
 1007 0050 FB68     		ldr	r3, [r7, #12]
 1008 0052 1B68     		ldr	r3, [r3]
 1009 0054 002B     		cmp	r3, #0
 1010 0056 1ED1     		bne	.L112
1644:freertos\src/tasks.c **** 						break;
 1011              		.loc 1 1644 0
 1012 0058 0122     		movs	r2, #1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 65


 1013 005a 274B     		ldr	r3, .L116+8
 1014 005c 5242     		rsbs	r2, r2, #0
 1015 005e 1A60     		str	r2, [r3]
 1016              	.LVL101:
 1017              	.L91:
 1018              	.LBE32:
1704:freertos\src/tasks.c **** 			{
 1019              		.loc 1 1704 0
 1020 0060 1422     		movs	r2, #20
 1021 0062 2449     		ldr	r1, .L116+4
 1022 0064 0B68     		ldr	r3, [r1]
 1023 0066 DB6A     		ldr	r3, [r3, #44]
 1024 0068 5343     		muls	r3, r2
 1025 006a CB18     		adds	r3, r1, r3
 1026 006c 5B69     		ldr	r3, [r3, #20]
 1027 006e 012B     		cmp	r3, #1
 1028 0070 00D9     		bls	.L98
1706:freertos\src/tasks.c **** 			}
 1029              		.loc 1 1706 0
 1030 0072 0126     		movs	r6, #1
 1031              	.LVL102:
 1032              	.L98:
1715:freertos\src/tasks.c **** 			{
 1033              		.loc 1 1715 0
 1034 0074 A36C     		ldr	r3, [r4, #72]
 1035 0076 002B     		cmp	r3, #0
 1036 0078 08D1     		bne	.L99
1717:freertos\src/tasks.c **** 			}
 1037              		.loc 1 1717 0
 1038 007a FFF7FEFF 		bl	vApplicationTickHook
 1039              	.LVL103:
 1040 007e 05E0     		b	.L99
 1041              	.LVL104:
 1042              	.L87:
1724:freertos\src/tasks.c **** 
 1043              		.loc 1 1724 0
 1044 0080 A36C     		ldr	r3, [r4, #72]
1608:freertos\src/tasks.c **** 
 1045              		.loc 1 1608 0
 1046 0082 0026     		movs	r6, #0
1724:freertos\src/tasks.c **** 
 1047              		.loc 1 1724 0
 1048 0084 0133     		adds	r3, r3, #1
 1049 0086 A364     		str	r3, [r4, #72]
1730:freertos\src/tasks.c **** 		}
 1050              		.loc 1 1730 0
 1051 0088 FFF7FEFF 		bl	vApplicationTickHook
 1052              	.LVL105:
 1053              	.L99:
1737:freertos\src/tasks.c **** 		{
 1054              		.loc 1 1737 0
 1055 008c E36C     		ldr	r3, [r4, #76]
 1056 008e 002B     		cmp	r3, #0
 1057 0090 2BD0     		beq	.L106
1739:freertos\src/tasks.c **** 		}
 1058              		.loc 1 1739 0
 1059 0092 0126     		movs	r6, #1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 66


 1060              	.LVL106:
1744:freertos\src/tasks.c **** }
 1061              		.loc 1 1744 0
 1062 0094 29E0     		b	.L106
 1063              	.LVL107:
 1064              	.L112:
 1065              	.LBB33:
1653:freertos\src/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1066              		.loc 1 1653 0
 1067 0096 FB68     		ldr	r3, [r7, #12]
1656:freertos\src/tasks.c **** 						{
 1068              		.loc 1 1656 0
 1069 0098 009A     		ldr	r2, [sp]
1653:freertos\src/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1070              		.loc 1 1653 0
 1071 009a DB68     		ldr	r3, [r3, #12]
 1072 009c DD68     		ldr	r5, [r3, #12]
 1073              	.LVL108:
1654:freertos\src/tasks.c **** 
 1074              		.loc 1 1654 0
 1075 009e 6B68     		ldr	r3, [r5, #4]
 1076              	.LVL109:
1656:freertos\src/tasks.c **** 						{
 1077              		.loc 1 1656 0
 1078 00a0 9A42     		cmp	r2, r3
 1079 00a2 02D2     		bcs	.L113
1662:freertos\src/tasks.c **** 							break;
 1080              		.loc 1 1662 0
 1081 00a4 144A     		ldr	r2, .L116+8
 1082 00a6 1360     		str	r3, [r2]
1663:freertos\src/tasks.c **** 						}
 1083              		.loc 1 1663 0
 1084 00a8 DAE7     		b	.L91
 1085              	.L113:
1667:freertos\src/tasks.c **** 
 1086              		.loc 1 1667 0
 1087 00aa 2B1D     		adds	r3, r5, #4
 1088              	.LVL110:
 1089 00ac 1800     		movs	r0, r3
 1090 00ae 0193     		str	r3, [sp, #4]
 1091 00b0 FFF7FEFF 		bl	uxListRemove
 1092              	.LVL111:
1671:freertos\src/tasks.c **** 						{
 1093              		.loc 1 1671 0
 1094 00b4 AB6A     		ldr	r3, [r5, #40]
 1095 00b6 002B     		cmp	r3, #0
 1096 00b8 03D0     		beq	.L95
1673:freertos\src/tasks.c **** 						}
 1097              		.loc 1 1673 0
 1098 00ba 2800     		movs	r0, r5
 1099 00bc 1830     		adds	r0, r0, #24
 1100 00be FFF7FEFF 		bl	uxListRemove
 1101              	.LVL112:
 1102              	.L95:
1678:freertos\src/tasks.c **** 
 1103              		.loc 1 1678 0
 1104 00c2 EB6A     		ldr	r3, [r5, #44]
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 67


 1105 00c4 E26B     		ldr	r2, [r4, #60]
 1106 00c6 9342     		cmp	r3, r2
 1107 00c8 00D9     		bls	.L96
1678:freertos\src/tasks.c **** 
 1108              		.loc 1 1678 0 is_stmt 0 discriminator 1
 1109 00ca E363     		str	r3, [r4, #60]
 1110              	.L96:
1678:freertos\src/tasks.c **** 
 1111              		.loc 1 1678 0 discriminator 3
 1112 00cc 1422     		movs	r2, #20
 1113 00ce 5343     		muls	r3, r2
 1114 00d0 0848     		ldr	r0, .L116+4
 1115 00d2 291D     		adds	r1, r5, #4
 1116 00d4 1430     		adds	r0, r0, #20
 1117 00d6 C018     		adds	r0, r0, r3
 1118 00d8 FFF7FEFF 		bl	vListInsertEnd
 1119              	.LVL113:
1688:freertos\src/tasks.c **** 							{
 1120              		.loc 1 1688 0 is_stmt 1 discriminator 3
 1121 00dc 3B68     		ldr	r3, [r7]
 1122 00de EA6A     		ldr	r2, [r5, #44]
 1123 00e0 DB6A     		ldr	r3, [r3, #44]
 1124 00e2 9A42     		cmp	r2, r3
 1125 00e4 B3D3     		bcc	.L92
1690:freertos\src/tasks.c **** 							}
 1126              		.loc 1 1690 0
 1127 00e6 0126     		movs	r6, #1
 1128              	.LVL114:
 1129 00e8 B1E7     		b	.L92
 1130              	.LVL115:
 1131              	.L106:
 1132              	.LBE33:
1745:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1133              		.loc 1 1745 0
 1134 00ea 3000     		movs	r0, r6
 1135              		@ sp needed
 1136              	.LVL116:
 1137 00ec FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 1138              	.L117:
 1139 00ee C046     		.align	2
 1140              	.L116:
 1141 00f0 80000000 		.word	.LANCHOR2
 1142 00f4 00000000 		.word	.LANCHOR0
 1143 00f8 00000000 		.word	.LANCHOR1
 1144              		.cfi_endproc
 1145              	.LFE46:
 1146              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1147              		.section	.text.xTaskResumeAll,"ax",%progbits
 1148              		.align	1
 1149              		.global	xTaskResumeAll
 1150              		.code	16
 1151              		.thumb_func
 1152              		.type	xTaskResumeAll, %function
 1153              	xTaskResumeAll:
 1154              	.LFB42:
1364:freertos\src/tasks.c **** tskTCB *pxTCB;
 1155              		.loc 1 1364 0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 68


 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159              	.LVL117:
 1160 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1161              		.cfi_def_cfa_offset 24
 1162              		.cfi_offset 3, -24
 1163              		.cfi_offset 4, -20
 1164              		.cfi_offset 5, -16
 1165              		.cfi_offset 6, -12
 1166              		.cfi_offset 7, -8
 1167              		.cfi_offset 14, -4
1377:freertos\src/tasks.c **** 	{
 1168              		.loc 1 1377 0
 1169 0002 FFF7FEFF 		bl	vPortEnterCritical
 1170              	.LVL118:
1379:freertos\src/tasks.c **** 
 1171              		.loc 1 1379 0
 1172 0006 244C     		ldr	r4, .L137
 1173 0008 236C     		ldr	r3, [r4, #64]
 1174 000a 013B     		subs	r3, r3, #1
 1175 000c 2364     		str	r3, [r4, #64]
1381:freertos\src/tasks.c **** 		{
 1176              		.loc 1 1381 0
 1177 000e 236C     		ldr	r3, [r4, #64]
 1178 0010 002B     		cmp	r3, #0
 1179 0012 01D0     		beq	.L119
 1180              	.L122:
1366:freertos\src/tasks.c **** 
 1181              		.loc 1 1366 0
 1182 0014 0024     		movs	r4, #0
 1183 0016 3BE0     		b	.L120
 1184              	.L119:
1383:freertos\src/tasks.c **** 			{
 1185              		.loc 1 1383 0
 1186 0018 204D     		ldr	r5, .L137+4
 1187 001a 2B69     		ldr	r3, [r5, #16]
 1188 001c 002B     		cmp	r3, #0
 1189 001e F9D0     		beq	.L122
 1190              	.L124:
1387:freertos\src/tasks.c **** 				{
 1191              		.loc 1 1387 0
 1192 0020 E368     		ldr	r3, [r4, #12]
 1193 0022 002B     		cmp	r3, #0
 1194 0024 1ED0     		beq	.L136
1389:freertos\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1195              		.loc 1 1389 0
 1196 0026 A369     		ldr	r3, [r4, #24]
 1197 0028 DE68     		ldr	r6, [r3, #12]
 1198              	.LVL119:
1390:freertos\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1199              		.loc 1 1390 0
 1200 002a 3000     		movs	r0, r6
1391:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1201              		.loc 1 1391 0
 1202 002c 371D     		adds	r7, r6, #4
1390:freertos\src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 69


 1203              		.loc 1 1390 0
 1204 002e 1830     		adds	r0, r0, #24
 1205 0030 FFF7FEFF 		bl	uxListRemove
 1206              	.LVL120:
1391:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1207              		.loc 1 1391 0
 1208 0034 3800     		movs	r0, r7
 1209 0036 FFF7FEFF 		bl	uxListRemove
 1210              	.LVL121:
1392:freertos\src/tasks.c **** 
 1211              		.loc 1 1392 0
 1212 003a F36A     		ldr	r3, [r6, #44]
 1213 003c E26B     		ldr	r2, [r4, #60]
 1214 003e 9342     		cmp	r3, r2
 1215 0040 00D9     		bls	.L123
1392:freertos\src/tasks.c **** 
 1216              		.loc 1 1392 0 is_stmt 0 discriminator 1
 1217 0042 E363     		str	r3, [r4, #60]
 1218              	.L123:
1392:freertos\src/tasks.c **** 
 1219              		.loc 1 1392 0 discriminator 3
 1220 0044 1422     		movs	r2, #20
 1221 0046 2800     		movs	r0, r5
 1222 0048 5343     		muls	r3, r2
 1223 004a 1430     		adds	r0, r0, #20
 1224 004c C018     		adds	r0, r0, r3
 1225 004e 3900     		movs	r1, r7
 1226 0050 FFF7FEFF 		bl	vListInsertEnd
 1227              	.LVL122:
1396:freertos\src/tasks.c **** 					{
 1228              		.loc 1 1396 0 is_stmt 1 discriminator 3
 1229 0054 2B68     		ldr	r3, [r5]
 1230 0056 F26A     		ldr	r2, [r6, #44]
 1231 0058 DB6A     		ldr	r3, [r3, #44]
 1232 005a 9A42     		cmp	r2, r3
 1233 005c E0D3     		bcc	.L124
1398:freertos\src/tasks.c **** 					}
 1234              		.loc 1 1398 0
 1235 005e 0123     		movs	r3, #1
 1236 0060 E364     		str	r3, [r4, #76]
 1237 0062 DDE7     		b	.L124
 1238              	.LVL123:
 1239              	.L136:
1405:freertos\src/tasks.c **** 				{
 1240              		.loc 1 1405 0
 1241 0064 A36C     		ldr	r3, [r4, #72]
 1242 0066 002B     		cmp	r3, #0
 1243 0068 05D1     		bne	.L126
 1244              	.L130:
1417:freertos\src/tasks.c **** 				{
 1245              		.loc 1 1417 0
 1246 006a E46C     		ldr	r4, [r4, #76]
 1247 006c 012C     		cmp	r4, #1
 1248 006e D1D1     		bne	.L122
 1249              	.LVL124:
1424:freertos\src/tasks.c **** 				}
 1250              		.loc 1 1424 0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 70


 1251 0070 FFF7FEFF 		bl	vPortYield
 1252              	.LVL125:
 1253 0074 0CE0     		b	.L120
 1254              	.LVL126:
 1255              	.L126:
1411:freertos\src/tasks.c **** 						}
 1256              		.loc 1 1411 0
 1257 0076 0125     		movs	r5, #1
 1258              	.L135:
1407:freertos\src/tasks.c **** 					{
 1259              		.loc 1 1407 0
 1260 0078 A36C     		ldr	r3, [r4, #72]
 1261 007a 002B     		cmp	r3, #0
 1262 007c F5D0     		beq	.L130
1409:freertos\src/tasks.c **** 						{
 1263              		.loc 1 1409 0
 1264 007e FFF7FEFF 		bl	xTaskIncrementTick
 1265              	.LVL127:
 1266 0082 0028     		cmp	r0, #0
 1267 0084 00D0     		beq	.L128
1411:freertos\src/tasks.c **** 						}
 1268              		.loc 1 1411 0
 1269 0086 E564     		str	r5, [r4, #76]
 1270              	.L128:
1413:freertos\src/tasks.c **** 					}
 1271              		.loc 1 1413 0
 1272 0088 A36C     		ldr	r3, [r4, #72]
 1273 008a 013B     		subs	r3, r3, #1
 1274 008c A364     		str	r3, [r4, #72]
 1275 008e F3E7     		b	.L135
 1276              	.LVL128:
 1277              	.L120:
1429:freertos\src/tasks.c **** 
 1278              		.loc 1 1429 0
 1279 0090 FFF7FEFF 		bl	vPortExitCritical
 1280              	.LVL129:
1432:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1281              		.loc 1 1432 0
 1282              		@ sp needed
 1283 0094 2000     		movs	r0, r4
 1284              	.LVL130:
 1285 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1286              	.L138:
 1287              		.align	2
 1288              	.L137:
 1289 0098 80000000 		.word	.LANCHOR2
 1290 009c 00000000 		.word	.LANCHOR0
 1291              		.cfi_endproc
 1292              	.LFE42:
 1293              		.size	xTaskResumeAll, .-xTaskResumeAll
 1294              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1295              		.align	1
 1296              		.global	vTaskDelayUntil
 1297              		.code	16
 1298              		.thumb_func
 1299              		.type	vTaskDelayUntil, %function
 1300              	vTaskDelayUntil:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 71


 1301              	.LFB33:
 698:freertos\src/tasks.c **** 	portTickType xTimeToWake;
 1302              		.loc 1 698 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306              	.LVL131:
 1307 0000 70B5     		push	{r4, r5, r6, lr}
 1308              		.cfi_def_cfa_offset 16
 1309              		.cfi_offset 4, -16
 1310              		.cfi_offset 5, -12
 1311              		.cfi_offset 6, -8
 1312              		.cfi_offset 14, -4
 698:freertos\src/tasks.c **** 	portTickType xTimeToWake;
 1313              		.loc 1 698 0
 1314 0002 0500     		movs	r5, r0
 1315 0004 0C00     		movs	r4, r1
 705:freertos\src/tasks.c **** 		{
 1316              		.loc 1 705 0
 1317 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1318              	.LVL132:
 1319              	.LBB34:
 709:freertos\src/tasks.c **** 
 1320              		.loc 1 709 0
 1321 000a 104A     		ldr	r2, .L150
 712:freertos\src/tasks.c **** 
 1322              		.loc 1 712 0
 1323 000c 2868     		ldr	r0, [r5]
 709:freertos\src/tasks.c **** 
 1324              		.loc 1 709 0
 1325 000e 5368     		ldr	r3, [r2, #4]
 1326              	.LVL133:
 712:freertos\src/tasks.c **** 
 1327              		.loc 1 712 0
 1328 0010 0419     		adds	r4, r0, r4
 1329              	.LVL134:
 714:freertos\src/tasks.c **** 			{
 1330              		.loc 1 714 0
 1331 0012 8342     		cmp	r3, r0
 1332 0014 03D2     		bcs	.L140
 1333              	.LBE34:
 700:freertos\src/tasks.c **** 
 1334              		.loc 1 700 0
 1335 0016 0021     		movs	r1, #0
 1336              	.LBB35:
 721:freertos\src/tasks.c **** 				{
 1337              		.loc 1 721 0
 1338 0018 A042     		cmp	r0, r4
 1339 001a 06D9     		bls	.L141
 1340 001c 02E0     		b	.L149
 1341              	.L140:
 733:freertos\src/tasks.c **** 				}
 1342              		.loc 1 733 0
 1343 001e 0121     		movs	r1, #1
 731:freertos\src/tasks.c **** 				{
 1344              		.loc 1 731 0
 1345 0020 A042     		cmp	r0, r4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 72


 1346 0022 02D8     		bhi	.L141
 1347              	.L149:
 1348              	.LBE35:
 700:freertos\src/tasks.c **** 
 1349              		.loc 1 700 0 discriminator 1
 1350 0024 A342     		cmp	r3, r4
 1351 0026 9B41     		sbcs	r3, r3, r3
 1352              	.LVL135:
 1353 0028 5942     		rsbs	r1, r3, #0
 1354              	.L141:
 1355              	.LVL136:
 1356              	.LBB36:
 738:freertos\src/tasks.c **** 
 1357              		.loc 1 738 0
 1358 002a 2C60     		str	r4, [r5]
 740:freertos\src/tasks.c **** 			{
 1359              		.loc 1 740 0
 1360 002c 0029     		cmp	r1, #0
 1361 002e 06D0     		beq	.L142
 747:freertos\src/tasks.c **** 				{
 1362              		.loc 1 747 0
 1363 0030 1068     		ldr	r0, [r2]
 1364 0032 0430     		adds	r0, r0, #4
 1365 0034 FFF7FEFF 		bl	uxListRemove
 1366              	.LVL137:
 755:freertos\src/tasks.c **** 			}
 1367              		.loc 1 755 0
 1368 0038 2000     		movs	r0, r4
 1369 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1370              	.LVL138:
 1371              	.L142:
 1372              	.LBE36:
 758:freertos\src/tasks.c **** 
 1373              		.loc 1 758 0
 1374 003e FFF7FEFF 		bl	xTaskResumeAll
 1375              	.LVL139:
 762:freertos\src/tasks.c **** 		{
 1376              		.loc 1 762 0
 1377 0042 0028     		cmp	r0, #0
 1378 0044 01D1     		bne	.L139
 764:freertos\src/tasks.c **** 		}
 1379              		.loc 1 764 0
 1380 0046 FFF7FEFF 		bl	vPortYield
 1381              	.LVL140:
 1382              	.L139:
 766:freertos\src/tasks.c **** 
 1383              		.loc 1 766 0
 1384              		@ sp needed
 1385              	.LVL141:
 1386              	.LVL142:
 1387 004a 70BD     		pop	{r4, r5, r6, pc}
 1388              	.L151:
 1389              		.align	2
 1390              	.L150:
 1391 004c 00000000 		.word	.LANCHOR0
 1392              		.cfi_endproc
 1393              	.LFE33:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 73


 1394              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 1395              		.section	.text.vTaskDelay,"ax",%progbits
 1396              		.align	1
 1397              		.global	vTaskDelay
 1398              		.code	16
 1399              		.thumb_func
 1400              		.type	vTaskDelay, %function
 1401              	vTaskDelay:
 1402              	.LFB34:
 774:freertos\src/tasks.c **** 	portTickType xTimeToWake;
 1403              		.loc 1 774 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              	.LVL143:
 1408 0000 10B5     		push	{r4, lr}
 1409              		.cfi_def_cfa_offset 8
 1410              		.cfi_offset 4, -8
 1411              		.cfi_offset 14, -4
 774:freertos\src/tasks.c **** 	portTickType xTimeToWake;
 1412              		.loc 1 774 0
 1413 0002 041E     		subs	r4, r0, #0
 779:freertos\src/tasks.c **** 		{
 1414              		.loc 1 779 0
 1415 0004 02D1     		bne	.L153
 1416              	.LVL144:
 1417              	.L155:
 816:freertos\src/tasks.c **** 		}
 1418              		.loc 1 816 0
 1419 0006 FFF7FEFF 		bl	vPortYield
 1420              	.LVL145:
 1421 000a 0FE0     		b	.L152
 1422              	.LVL146:
 1423              	.L153:
 781:freertos\src/tasks.c **** 			{
 1424              		.loc 1 781 0
 1425 000c FFF7FEFF 		bl	vTaskSuspendAll
 1426              	.LVL147:
 795:freertos\src/tasks.c **** 
 1427              		.loc 1 795 0
 1428 0010 074A     		ldr	r2, .L159
 1429 0012 5368     		ldr	r3, [r2, #4]
 800:freertos\src/tasks.c **** 				{
 1430              		.loc 1 800 0
 1431 0014 1068     		ldr	r0, [r2]
 795:freertos\src/tasks.c **** 
 1432              		.loc 1 795 0
 1433 0016 E418     		adds	r4, r4, r3
 1434              	.LVL148:
 800:freertos\src/tasks.c **** 				{
 1435              		.loc 1 800 0
 1436 0018 0430     		adds	r0, r0, #4
 1437 001a FFF7FEFF 		bl	uxListRemove
 1438              	.LVL149:
 807:freertos\src/tasks.c **** 			}
 1439              		.loc 1 807 0
 1440 001e 2000     		movs	r0, r4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 74


 1441 0020 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1442              	.LVL150:
 809:freertos\src/tasks.c **** 		}
 1443              		.loc 1 809 0
 1444 0024 FFF7FEFF 		bl	xTaskResumeAll
 1445              	.LVL151:
 814:freertos\src/tasks.c **** 		{
 1446              		.loc 1 814 0
 1447 0028 0028     		cmp	r0, #0
 1448 002a ECD0     		beq	.L155
 1449              	.LVL152:
 1450              	.L152:
 818:freertos\src/tasks.c **** 
 1451              		.loc 1 818 0
 1452              		@ sp needed
 1453 002c 10BD     		pop	{r4, pc}
 1454              	.L160:
 1455 002e C046     		.align	2
 1456              	.L159:
 1457 0030 00000000 		.word	.LANCHOR0
 1458              		.cfi_endproc
 1459              	.LFE34:
 1460              		.size	vTaskDelay, .-vTaskDelay
 1461              		.section	.text.vTaskSwitchContext,"ax",%progbits
 1462              		.align	1
 1463              		.global	vTaskSwitchContext
 1464              		.code	16
 1465              		.thumb_func
 1466              		.type	vTaskSwitchContext, %function
 1467              	vTaskSwitchContext:
 1468              	.LFB47:
1836:freertos\src/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1469              		.loc 1 1836 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
1837:freertos\src/tasks.c **** 	{
 1473              		.loc 1 1837 0
 1474 0000 204B     		ldr	r3, .L173
1836:freertos\src/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1475              		.loc 1 1836 0
 1476 0002 70B5     		push	{r4, r5, r6, lr}
 1477              		.cfi_def_cfa_offset 16
 1478              		.cfi_offset 4, -16
 1479              		.cfi_offset 5, -12
 1480              		.cfi_offset 6, -8
 1481              		.cfi_offset 14, -4
1837:freertos\src/tasks.c **** 	{
 1482              		.loc 1 1837 0
 1483 0004 1A6C     		ldr	r2, [r3, #64]
 1484 0006 1D00     		movs	r5, r3
 1485 0008 002A     		cmp	r2, #0
 1486 000a 02D0     		beq	.L162
1841:freertos\src/tasks.c **** 	}
 1487              		.loc 1 1841 0
 1488 000c 0122     		movs	r2, #1
 1489 000e DA64     		str	r2, [r3, #76]
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 75


 1490 0010 37E0     		b	.L161
 1491              	.L162:
 1492              	.LBB41:
 1493              	.LBB42:
1871:freertos\src/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1494              		.loc 1 1871 0
 1495 0012 1D4C     		ldr	r4, .L173+4
1845:freertos\src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 1496              		.loc 1 1845 0
 1497 0014 DA64     		str	r2, [r3, #76]
1871:freertos\src/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1498              		.loc 1 1871 0
 1499 0016 2268     		ldr	r2, [r4]
 1500 0018 2368     		ldr	r3, [r4]
 1501 001a 1268     		ldr	r2, [r2]
 1502 001c 1B6B     		ldr	r3, [r3, #48]
 1503 001e 9A42     		cmp	r2, r3
 1504 0020 04D8     		bhi	.L164
 1505 0022 2068     		ldr	r0, [r4]
 1506 0024 2168     		ldr	r1, [r4]
 1507 0026 3431     		adds	r1, r1, #52
 1508 0028 FFF7FEFF 		bl	vApplicationStackOverflowHook
 1509              	.LVL153:
 1510              	.L164:
 1511              	.LBB43:
1872:freertos\src/tasks.c **** 
 1512              		.loc 1 1872 0
 1513 002c 2368     		ldr	r3, [r4]
 1514 002e 1422     		movs	r2, #20
 1515 0030 1649     		ldr	r1, .L173+8
 1516 0032 186B     		ldr	r0, [r3, #48]
 1517 0034 FFF7FEFF 		bl	memcmp
 1518              	.LVL154:
 1519 0038 0028     		cmp	r0, #0
 1520 003a 04D0     		beq	.L165
 1521 003c 2068     		ldr	r0, [r4]
 1522 003e 2168     		ldr	r1, [r4]
 1523 0040 3431     		adds	r1, r1, #52
 1524 0042 FFF7FEFF 		bl	vApplicationStackOverflowHook
 1525              	.LVL155:
 1526              	.L165:
 1527              	.LBE43:
1874:freertos\src/tasks.c **** 
 1528              		.loc 1 1874 0
 1529 0046 1422     		movs	r2, #20
 1530              	.L166:
 1531 0048 EB6B     		ldr	r3, [r5, #60]
 1532 004a 5343     		muls	r3, r2
 1533 004c E318     		adds	r3, r4, r3
 1534 004e 5B69     		ldr	r3, [r3, #20]
 1535 0050 002B     		cmp	r3, #0
 1536 0052 03D1     		bne	.L172
 1537 0054 EB6B     		ldr	r3, [r5, #60]
 1538 0056 013B     		subs	r3, r3, #1
 1539 0058 EB63     		str	r3, [r5, #60]
 1540 005a F5E7     		b	.L166
 1541              	.L172:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 76


 1542              	.LBB44:
 1543 005c 1423     		movs	r3, #20
 1544 005e E86B     		ldr	r0, [r5, #60]
 1545              	.LVL156:
 1546 0060 4343     		muls	r3, r0
 1547 0062 E218     		adds	r2, r4, r3
 1548 0064 1300     		movs	r3, r2
 1549 0066 9169     		ldr	r1, [r2, #24]
 1550 0068 1C33     		adds	r3, r3, #28
 1551 006a 4968     		ldr	r1, [r1, #4]
 1552 006c 9161     		str	r1, [r2, #24]
 1553 006e 9942     		cmp	r1, r3
 1554 0070 01D1     		bne	.L168
 1555 0072 4B68     		ldr	r3, [r1, #4]
 1556 0074 9361     		str	r3, [r2, #24]
 1557              	.L168:
 1558 0076 1423     		movs	r3, #20
 1559 0078 4343     		muls	r3, r0
 1560 007a E318     		adds	r3, r4, r3
 1561 007c 9B69     		ldr	r3, [r3, #24]
 1562 007e DB68     		ldr	r3, [r3, #12]
 1563 0080 2360     		str	r3, [r4]
 1564              	.LVL157:
 1565              	.L161:
 1566              	.LBE44:
 1567              	.LBE42:
 1568              	.LBE41:
1886:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1569              		.loc 1 1886 0
 1570              		@ sp needed
 1571 0082 70BD     		pop	{r4, r5, r6, pc}
 1572              	.L174:
 1573              		.align	2
 1574              	.L173:
 1575 0084 80000000 		.word	.LANCHOR2
 1576 0088 00000000 		.word	.LANCHOR0
 1577 008c 00000000 		.word	.LANCHOR3
 1578              		.cfi_endproc
 1579              	.LFE47:
 1580              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 1581              		.section	.text.vTaskSuspend,"ax",%progbits
 1582              		.align	1
 1583              		.global	vTaskSuspend
 1584              		.code	16
 1585              		.thumb_func
 1586              		.type	vTaskSuspend, %function
 1587              	vTaskSuspend:
 1588              	.LFB35:
1047:freertos\src/tasks.c **** 	tskTCB *pxTCB;
 1589              		.loc 1 1047 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              	.LVL158:
 1594 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1595              		.cfi_def_cfa_offset 24
 1596              		.cfi_offset 3, -24
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 77


 1597              		.cfi_offset 4, -20
 1598              		.cfi_offset 5, -16
 1599              		.cfi_offset 6, -12
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
1047:freertos\src/tasks.c **** 	tskTCB *pxTCB;
 1602              		.loc 1 1047 0
 1603 0002 0400     		movs	r4, r0
1050:freertos\src/tasks.c **** 		{
 1604              		.loc 1 1050 0
 1605 0004 FFF7FEFF 		bl	vPortEnterCritical
 1606              	.LVL159:
 1607 0008 144D     		ldr	r5, .L184
1054:freertos\src/tasks.c **** 
 1608              		.loc 1 1054 0
 1609 000a 002C     		cmp	r4, #0
 1610 000c 00D1     		bne	.L176
1054:freertos\src/tasks.c **** 
 1611              		.loc 1 1054 0 is_stmt 0 discriminator 1
 1612 000e 2C68     		ldr	r4, [r5]
 1613              	.LVL160:
 1614              	.L176:
1059:freertos\src/tasks.c **** 			{
 1615              		.loc 1 1059 0 is_stmt 1 discriminator 4
 1616 0010 271D     		adds	r7, r4, #4
 1617 0012 3800     		movs	r0, r7
 1618 0014 FFF7FEFF 		bl	uxListRemove
 1619              	.LVL161:
1065:freertos\src/tasks.c **** 			{
 1620              		.loc 1 1065 0 discriminator 4
 1621 0018 A36A     		ldr	r3, [r4, #40]
 1622 001a 002B     		cmp	r3, #0
 1623 001c 03D0     		beq	.L177
1067:freertos\src/tasks.c **** 			}
 1624              		.loc 1 1067 0
 1625 001e 2000     		movs	r0, r4
 1626 0020 1830     		adds	r0, r0, #24
 1627 0022 FFF7FEFF 		bl	uxListRemove
 1628              	.LVL162:
 1629              	.L177:
1070:freertos\src/tasks.c **** 		}
 1630              		.loc 1 1070 0
 1631 0026 0E4E     		ldr	r6, .L184+4
 1632 0028 3900     		movs	r1, r7
 1633 002a 3000     		movs	r0, r6
 1634 002c 2030     		adds	r0, r0, #32
 1635 002e FFF7FEFF 		bl	vListInsertEnd
 1636              	.LVL163:
1072:freertos\src/tasks.c **** 
 1637              		.loc 1 1072 0
 1638 0032 FFF7FEFF 		bl	vPortExitCritical
 1639              	.LVL164:
1074:freertos\src/tasks.c **** 		{
 1640              		.loc 1 1074 0
 1641 0036 2B68     		ldr	r3, [r5]
 1642 0038 9C42     		cmp	r4, r3
 1643 003a 0DD1     		bne	.L175
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 78


1076:freertos\src/tasks.c **** 			{
 1644              		.loc 1 1076 0
 1645 003c 736B     		ldr	r3, [r6, #52]
 1646 003e 002B     		cmp	r3, #0
 1647 0040 02D0     		beq	.L179
1079:freertos\src/tasks.c **** 			}
 1648              		.loc 1 1079 0
 1649 0042 FFF7FEFF 		bl	vPortYield
 1650              	.LVL165:
 1651 0046 07E0     		b	.L175
 1652              	.L179:
1086:freertos\src/tasks.c **** 				{
 1653              		.loc 1 1086 0
 1654 0048 2A69     		ldr	r2, [r5, #16]
 1655 004a 316A     		ldr	r1, [r6, #32]
 1656 004c 9142     		cmp	r1, r2
 1657 004e 01D1     		bne	.L180
1092:freertos\src/tasks.c **** 				}
 1658              		.loc 1 1092 0
 1659 0050 2B60     		str	r3, [r5]
 1660 0052 01E0     		b	.L175
 1661              	.L180:
1096:freertos\src/tasks.c **** 				}
 1662              		.loc 1 1096 0
 1663 0054 FFF7FEFF 		bl	vTaskSwitchContext
 1664              	.LVL166:
 1665              	.L175:
1100:freertos\src/tasks.c **** 
 1666              		.loc 1 1100 0
 1667              		@ sp needed
 1668              	.LVL167:
 1669              	.LVL168:
 1670 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1671              	.L185:
 1672 005a C046     		.align	2
 1673              	.L184:
 1674 005c 00000000 		.word	.LANCHOR0
 1675 0060 80000000 		.word	.LANCHOR2
 1676              		.cfi_endproc
 1677              	.LFE35:
 1678              		.size	vTaskSuspend, .-vTaskSuspend
 1679              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 1680              		.align	1
 1681              		.global	vTaskPlaceOnEventList
 1682              		.code	16
 1683              		.thumb_func
 1684              		.type	vTaskPlaceOnEventList, %function
 1685              	vTaskPlaceOnEventList:
 1686              	.LFB48:
1890:freertos\src/tasks.c **** portTickType xTimeToWake;
 1687              		.loc 1 1890 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              	.LVL169:
 1692 0000 70B5     		push	{r4, r5, r6, lr}
 1693              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 79


 1694              		.cfi_offset 4, -16
 1695              		.cfi_offset 5, -12
 1696              		.cfi_offset 6, -8
 1697              		.cfi_offset 14, -4
1890:freertos\src/tasks.c **** portTickType xTimeToWake;
 1698              		.loc 1 1890 0
 1699 0002 0D00     		movs	r5, r1
1901:freertos\src/tasks.c **** 
 1700              		.loc 1 1901 0
 1701 0004 0B4C     		ldr	r4, .L189
 1702 0006 2168     		ldr	r1, [r4]
 1703              	.LVL170:
 1704 0008 1831     		adds	r1, r1, #24
 1705 000a FFF7FEFF 		bl	vListInsert
 1706              	.LVL171:
1906:freertos\src/tasks.c **** 	{
 1707              		.loc 1 1906 0
 1708 000e 2068     		ldr	r0, [r4]
 1709 0010 0430     		adds	r0, r0, #4
 1710 0012 FFF7FEFF 		bl	uxListRemove
 1711              	.LVL172:
1915:freertos\src/tasks.c **** 		{
 1712              		.loc 1 1915 0
 1713 0016 6B1C     		adds	r3, r5, #1
 1714 0018 06D1     		bne	.L187
1920:freertos\src/tasks.c **** 		}
 1715              		.loc 1 1920 0
 1716 001a 2168     		ldr	r1, [r4]
 1717 001c 0648     		ldr	r0, .L189+4
 1718 001e 0431     		adds	r1, r1, #4
 1719 0020 2030     		adds	r0, r0, #32
 1720 0022 FFF7FEFF 		bl	vListInsertEnd
 1721              	.LVL173:
 1722 0026 03E0     		b	.L186
 1723              	.L187:
1926:freertos\src/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 1724              		.loc 1 1926 0
 1725 0028 6068     		ldr	r0, [r4, #4]
 1726              	.LVL174:
1927:freertos\src/tasks.c **** 		}
 1727              		.loc 1 1927 0
 1728 002a 2818     		adds	r0, r5, r0
 1729              	.LVL175:
 1730 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1731              	.LVL176:
 1732              	.L186:
1938:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1733              		.loc 1 1938 0
 1734              		@ sp needed
 1735              	.LVL177:
 1736 0030 70BD     		pop	{r4, r5, r6, pc}
 1737              	.L190:
 1738 0032 C046     		.align	2
 1739              	.L189:
 1740 0034 00000000 		.word	.LANCHOR0
 1741 0038 80000000 		.word	.LANCHOR2
 1742              		.cfi_endproc
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 80


 1743              	.LFE48:
 1744              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 1745              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 1746              		.align	1
 1747              		.global	xTaskRemoveFromEventList
 1748              		.code	16
 1749              		.thumb_func
 1750              		.type	xTaskRemoveFromEventList, %function
 1751              	xTaskRemoveFromEventList:
 1752              	.LFB49:
1983:freertos\src/tasks.c **** tskTCB *pxUnblockedTCB;
 1753              		.loc 1 1983 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757              	.LVL178:
 1758 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1759              		.cfi_def_cfa_offset 24
 1760              		.cfi_offset 3, -24
 1761              		.cfi_offset 4, -20
 1762              		.cfi_offset 5, -16
 1763              		.cfi_offset 6, -12
 1764              		.cfi_offset 7, -8
 1765              		.cfi_offset 14, -4
2000:freertos\src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 1766              		.loc 1 2000 0
 1767 0002 C368     		ldr	r3, [r0, #12]
 1768 0004 DD68     		ldr	r5, [r3, #12]
 1769              	.LVL179:
2002:freertos\src/tasks.c **** 
 1770              		.loc 1 2002 0
 1771 0006 2F00     		movs	r7, r5
 1772 0008 1837     		adds	r7, r7, #24
 1773 000a 3800     		movs	r0, r7
 1774              	.LVL180:
 1775 000c FFF7FEFF 		bl	uxListRemove
 1776              	.LVL181:
2004:freertos\src/tasks.c **** 	{
 1777              		.loc 1 2004 0
 1778 0010 104C     		ldr	r4, .L198
 1779 0012 114E     		ldr	r6, .L198+4
 1780 0014 236C     		ldr	r3, [r4, #64]
 1781 0016 002B     		cmp	r3, #0
 1782 0018 0ED1     		bne	.L192
2006:freertos\src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 1783              		.loc 1 2006 0
 1784 001a 2F1D     		adds	r7, r5, #4
 1785 001c 3800     		movs	r0, r7
 1786 001e FFF7FEFF 		bl	uxListRemove
 1787              	.LVL182:
2007:freertos\src/tasks.c **** 	}
 1788              		.loc 1 2007 0
 1789 0022 E86A     		ldr	r0, [r5, #44]
 1790 0024 E36B     		ldr	r3, [r4, #60]
 1791 0026 9842     		cmp	r0, r3
 1792 0028 00D9     		bls	.L193
2007:freertos\src/tasks.c **** 	}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 81


 1793              		.loc 1 2007 0 is_stmt 0 discriminator 1
 1794 002a E063     		str	r0, [r4, #60]
 1795              	.L193:
2007:freertos\src/tasks.c **** 	}
 1796              		.loc 1 2007 0 discriminator 3
 1797 002c 1423     		movs	r3, #20
 1798 002e 3200     		movs	r2, r6
 1799 0030 5843     		muls	r0, r3
 1800 0032 1432     		adds	r2, r2, #20
 1801 0034 1018     		adds	r0, r2, r0
 1802 0036 01E0     		b	.L197
 1803              	.L192:
2013:freertos\src/tasks.c **** 	}
 1804              		.loc 1 2013 0 is_stmt 1
 1805 0038 2000     		movs	r0, r4
 1806 003a 0C30     		adds	r0, r0, #12
 1807              	.L197:
 1808 003c 3900     		movs	r1, r7
 1809 003e FFF7FEFF 		bl	vListInsertEnd
 1810              	.LVL183:
2016:freertos\src/tasks.c **** 	{
 1811              		.loc 1 2016 0
 1812 0042 3368     		ldr	r3, [r6]
 1813 0044 EA6A     		ldr	r2, [r5, #44]
 1814 0046 DB6A     		ldr	r3, [r3, #44]
2030:freertos\src/tasks.c **** 	}
 1815              		.loc 1 2030 0
 1816 0048 0020     		movs	r0, #0
2016:freertos\src/tasks.c **** 	{
 1817              		.loc 1 2016 0
 1818 004a 9A42     		cmp	r2, r3
 1819 004c 01D3     		bcc	.L195
 1820              	.LVL184:
2026:freertos\src/tasks.c **** 	}
 1821              		.loc 1 2026 0
 1822 004e 0130     		adds	r0, r0, #1
 1823 0050 E064     		str	r0, [r4, #76]
 1824              	.LVL185:
 1825              	.L195:
2034:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1826              		.loc 1 2034 0
 1827              		@ sp needed
 1828              	.LVL186:
 1829 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1830              	.L199:
 1831              		.align	2
 1832              	.L198:
 1833 0054 80000000 		.word	.LANCHOR2
 1834 0058 00000000 		.word	.LANCHOR0
 1835              		.cfi_endproc
 1836              	.LFE49:
 1837              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 1838              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 1839              		.align	1
 1840              		.global	vTaskSetTimeOutState
 1841              		.code	16
 1842              		.thumb_func
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 82


 1843              		.type	vTaskSetTimeOutState, %function
 1844              	vTaskSetTimeOutState:
 1845              	.LFB50:
2038:freertos\src/tasks.c **** 	configASSERT( pxTimeOut );
 1846              		.loc 1 2038 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              		@ link register save eliminated.
 1851              	.LVL187:
2040:freertos\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 1852              		.loc 1 2040 0
 1853 0000 034B     		ldr	r3, .L201
2042:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1854              		.loc 1 2042 0
 1855              		@ sp needed
2040:freertos\src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 1856              		.loc 1 2040 0
 1857 0002 5B6C     		ldr	r3, [r3, #68]
 1858 0004 0360     		str	r3, [r0]
2041:freertos\src/tasks.c **** }
 1859              		.loc 1 2041 0
 1860 0006 034B     		ldr	r3, .L201+4
 1861 0008 5B68     		ldr	r3, [r3, #4]
 1862 000a 4360     		str	r3, [r0, #4]
2042:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1863              		.loc 1 2042 0
 1864 000c 7047     		bx	lr
 1865              	.L202:
 1866 000e C046     		.align	2
 1867              	.L201:
 1868 0010 80000000 		.word	.LANCHOR2
 1869 0014 00000000 		.word	.LANCHOR0
 1870              		.cfi_endproc
 1871              	.LFE50:
 1872              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 1873              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 1874              		.align	1
 1875              		.global	xTaskCheckForTimeOut
 1876              		.code	16
 1877              		.thumb_func
 1878              		.type	xTaskCheckForTimeOut, %function
 1879              	xTaskCheckForTimeOut:
 1880              	.LFB51:
2046:freertos\src/tasks.c **** portBASE_TYPE xReturn;
 1881              		.loc 1 2046 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              	.LVL188:
 1886 0000 70B5     		push	{r4, r5, r6, lr}
 1887              		.cfi_def_cfa_offset 16
 1888              		.cfi_offset 4, -16
 1889              		.cfi_offset 5, -12
 1890              		.cfi_offset 6, -8
 1891              		.cfi_offset 14, -4
2046:freertos\src/tasks.c **** portBASE_TYPE xReturn;
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 83


 1892              		.loc 1 2046 0
 1893 0002 0D00     		movs	r5, r1
 1894 0004 0400     		movs	r4, r0
2052:freertos\src/tasks.c **** 	{
 1895              		.loc 1 2052 0
 1896 0006 FFF7FEFF 		bl	vPortEnterCritical
 1897              	.LVL189:
 1898              	.LBB45:
2055:freertos\src/tasks.c **** 
 1899              		.loc 1 2055 0
 1900 000a 0F4B     		ldr	r3, .L209
2063:freertos\src/tasks.c **** 			}
 1901              		.loc 1 2063 0
 1902 000c 0026     		movs	r6, #0
2055:freertos\src/tasks.c **** 
 1903              		.loc 1 2055 0
 1904 000e 5968     		ldr	r1, [r3, #4]
 1905              	.LVL190:
2061:freertos\src/tasks.c **** 			{
 1906              		.loc 1 2061 0
 1907 0010 2B68     		ldr	r3, [r5]
 1908 0012 5A1C     		adds	r2, r3, #1
 1909 0014 13D0     		beq	.L204
2068:freertos\src/tasks.c **** 		{
 1910              		.loc 1 2068 0
 1911 0016 0D4A     		ldr	r2, .L209+4
 1912 0018 2668     		ldr	r6, [r4]
 1913 001a 506C     		ldr	r0, [r2, #68]
 1914 001c 6268     		ldr	r2, [r4, #4]
 1915 001e 8642     		cmp	r6, r0
 1916 0020 02D0     		beq	.L205
2074:freertos\src/tasks.c **** 		}
 1917              		.loc 1 2074 0 discriminator 1
 1918 0022 0126     		movs	r6, #1
2068:freertos\src/tasks.c **** 		{
 1919              		.loc 1 2068 0 discriminator 1
 1920 0024 9142     		cmp	r1, r2
 1921 0026 0AD2     		bcs	.L204
 1922              	.L205:
2076:freertos\src/tasks.c **** 		{
 1923              		.loc 1 2076 0
 1924 0028 881A     		subs	r0, r1, r2
2074:freertos\src/tasks.c **** 		}
 1925              		.loc 1 2074 0
 1926 002a 0126     		movs	r6, #1
2076:freertos\src/tasks.c **** 		{
 1927              		.loc 1 2076 0
 1928 002c 8342     		cmp	r3, r0
 1929 002e 06D9     		bls	.L204
2079:freertos\src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 1930              		.loc 1 2079 0
 1931 0030 521A     		subs	r2, r2, r1
 1932 0032 D318     		adds	r3, r2, r3
 1933 0034 2B60     		str	r3, [r5]
2080:freertos\src/tasks.c **** 			xReturn = pdFALSE;
 1934              		.loc 1 2080 0
 1935 0036 2000     		movs	r0, r4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 84


 1936 0038 FFF7FEFF 		bl	vTaskSetTimeOutState
 1937              	.LVL191:
2081:freertos\src/tasks.c **** 		}
 1938              		.loc 1 2081 0
 1939 003c 0026     		movs	r6, #0
 1940              	.LVL192:
 1941              	.L204:
 1942              	.LBE45:
2088:freertos\src/tasks.c **** 
 1943              		.loc 1 2088 0
 1944 003e FFF7FEFF 		bl	vPortExitCritical
 1945              	.LVL193:
2091:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1946              		.loc 1 2091 0
 1947              		@ sp needed
 1948 0042 3000     		movs	r0, r6
 1949              	.LVL194:
 1950              	.LVL195:
 1951              	.LVL196:
 1952 0044 70BD     		pop	{r4, r5, r6, pc}
 1953              	.L210:
 1954 0046 C046     		.align	2
 1955              	.L209:
 1956 0048 00000000 		.word	.LANCHOR0
 1957 004c 80000000 		.word	.LANCHOR2
 1958              		.cfi_endproc
 1959              	.LFE51:
 1960              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 1961              		.section	.text.vTaskMissedYield,"ax",%progbits
 1962              		.align	1
 1963              		.global	vTaskMissedYield
 1964              		.code	16
 1965              		.thumb_func
 1966              		.type	vTaskMissedYield, %function
 1967              	vTaskMissedYield:
 1968              	.LFB52:
2095:freertos\src/tasks.c **** 	xYieldPending = pdTRUE;
 1969              		.loc 1 2095 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
2096:freertos\src/tasks.c **** }
 1974              		.loc 1 2096 0
 1975 0000 0122     		movs	r2, #1
 1976 0002 014B     		ldr	r3, .L212
2097:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1977              		.loc 1 2097 0
 1978              		@ sp needed
2096:freertos\src/tasks.c **** }
 1979              		.loc 1 2096 0
 1980 0004 DA64     		str	r2, [r3, #76]
2097:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
 1981              		.loc 1 2097 0
 1982 0006 7047     		bx	lr
 1983              	.L213:
 1984              		.align	2
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 85


 1985              	.L212:
 1986 0008 80000000 		.word	.LANCHOR2
 1987              		.cfi_endproc
 1988              	.LFE52:
 1989              		.size	vTaskMissedYield, .-vTaskMissedYield
 1990              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 1991              		.align	1
 1992              		.global	uxTaskGetStackHighWaterMark
 1993              		.code	16
 1994              		.thumb_func
 1995              		.type	uxTaskGetStackHighWaterMark, %function
 1996              	uxTaskGetStackHighWaterMark:
 1997              	.LFB60:
2498:freertos\src/tasks.c **** 		}
2499:freertos\src/tasks.c **** 	}
2500:freertos\src/tasks.c **** 
2501:freertos\src/tasks.c **** 	return pxNewTCB;
2502:freertos\src/tasks.c **** }
2503:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2504:freertos\src/tasks.c **** 
2505:freertos\src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2506:freertos\src/tasks.c **** 
2507:freertos\src/tasks.c **** 	static unsigned portBASE_TYPE prvListTaskWithinSingleList( xTaskStatusType *pxTaskStatusArray, xLi
2508:freertos\src/tasks.c **** 	{
2509:freertos\src/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2510:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTask = 0;
2511:freertos\src/tasks.c **** 
2512:freertos\src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( unsigned portBASE_TYPE ) 0 )
2513:freertos\src/tasks.c **** 		{
2514:freertos\src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2515:freertos\src/tasks.c **** 
2516:freertos\src/tasks.c **** 			/* Populate an xTaskStatusType structure within the
2517:freertos\src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2518:freertos\src/tasks.c **** 			pxList.  See the definition of xTaskStatusType in task.h for the
2519:freertos\src/tasks.c **** 			meaning of each xTaskStatusType structure member. */
2520:freertos\src/tasks.c **** 			do
2521:freertos\src/tasks.c **** 			{
2522:freertos\src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2523:freertos\src/tasks.c **** 
2524:freertos\src/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( xTaskHandle ) pxNextTCB;
2525:freertos\src/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const signed char * ) &( pxNextTCB->pcTaskName [ 0 ]
2526:freertos\src/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
2527:freertos\src/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
2528:freertos\src/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
2529:freertos\src/tasks.c **** 
2530:freertos\src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2531:freertos\src/tasks.c **** 				{
2532:freertos\src/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
2533:freertos\src/tasks.c **** 				}
2534:freertos\src/tasks.c **** 				#else
2535:freertos\src/tasks.c **** 				{
2536:freertos\src/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2537:freertos\src/tasks.c **** 				}
2538:freertos\src/tasks.c **** 				#endif
2539:freertos\src/tasks.c **** 
2540:freertos\src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
2541:freertos\src/tasks.c **** 				{
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 86


2542:freertos\src/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
2543:freertos\src/tasks.c **** 				}
2544:freertos\src/tasks.c **** 				#else
2545:freertos\src/tasks.c **** 				{
2546:freertos\src/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
2547:freertos\src/tasks.c **** 				}
2548:freertos\src/tasks.c **** 				#endif
2549:freertos\src/tasks.c **** 
2550:freertos\src/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
2551:freertos\src/tasks.c **** 				{
2552:freertos\src/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char
2553:freertos\src/tasks.c **** 				}
2554:freertos\src/tasks.c **** 				#else
2555:freertos\src/tasks.c **** 				{
2556:freertos\src/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char
2557:freertos\src/tasks.c **** 				}
2558:freertos\src/tasks.c **** 				#endif
2559:freertos\src/tasks.c **** 
2560:freertos\src/tasks.c **** 				uxTask++;
2561:freertos\src/tasks.c **** 
2562:freertos\src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2563:freertos\src/tasks.c **** 		}
2564:freertos\src/tasks.c **** 
2565:freertos\src/tasks.c **** 		return uxTask;
2566:freertos\src/tasks.c **** 	}
2567:freertos\src/tasks.c **** 
2568:freertos\src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2569:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2570:freertos\src/tasks.c **** 
2571:freertos\src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2572:freertos\src/tasks.c **** 
2573:freertos\src/tasks.c **** 	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2574:freertos\src/tasks.c **** 	{
2575:freertos\src/tasks.c **** 	unsigned short usCount = 0U;
2576:freertos\src/tasks.c **** 
2577:freertos\src/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
2578:freertos\src/tasks.c **** 		{
2579:freertos\src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
2580:freertos\src/tasks.c **** 			usCount++;
2581:freertos\src/tasks.c **** 		}
2582:freertos\src/tasks.c **** 
2583:freertos\src/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
2584:freertos\src/tasks.c **** 
2585:freertos\src/tasks.c **** 		return usCount;
2586:freertos\src/tasks.c **** 	}
2587:freertos\src/tasks.c **** 
2588:freertos\src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
2589:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2590:freertos\src/tasks.c **** 
2591:freertos\src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2592:freertos\src/tasks.c **** 
2593:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2594:freertos\src/tasks.c **** 	{
 1998              		.loc 1 2594 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 87


 2002              		@ link register save eliminated.
 2003              	.LVL197:
2595:freertos\src/tasks.c **** 	tskTCB *pxTCB;
2596:freertos\src/tasks.c **** 	unsigned char *pcEndOfStack;
2597:freertos\src/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2598:freertos\src/tasks.c **** 
2599:freertos\src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 2004              		.loc 1 2599 0
 2005 0000 0028     		cmp	r0, #0
 2006 0002 01D1     		bne	.L215
 2007              		.loc 1 2599 0 is_stmt 0 discriminator 1
 2008 0004 054B     		ldr	r3, .L219
 2009 0006 1868     		ldr	r0, [r3]
 2010              	.LVL198:
 2011              	.L215:
2600:freertos\src/tasks.c **** 
2601:freertos\src/tasks.c **** 		#if portSTACK_GROWTH < 0
2602:freertos\src/tasks.c **** 		{
2603:freertos\src/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 2012              		.loc 1 2603 0 is_stmt 1 discriminator 4
 2013 0008 0023     		movs	r3, #0
 2014 000a 016B     		ldr	r1, [r0, #48]
 2015              	.LVL199:
 2016              	.L216:
 2017              	.LBB48:
 2018              	.LBB49:
2577:freertos\src/tasks.c **** 		{
 2019              		.loc 1 2577 0
 2020 000c CA5C     		ldrb	r2, [r1, r3]
 2021 000e 98B2     		uxth	r0, r3
 2022              	.LVL200:
 2023 0010 0133     		adds	r3, r3, #1
 2024              	.LVL201:
 2025 0012 A52A     		cmp	r2, #165
 2026 0014 FAD0     		beq	.L216
 2027              	.LVL202:
 2028              	.LBE49:
 2029              	.LBE48:
2604:freertos\src/tasks.c **** 		}
2605:freertos\src/tasks.c **** 		#else
2606:freertos\src/tasks.c **** 		{
2607:freertos\src/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2608:freertos\src/tasks.c **** 		}
2609:freertos\src/tasks.c **** 		#endif
2610:freertos\src/tasks.c **** 
2611:freertos\src/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) prvTaskCheckFreeStackSpace( pcEndOfStack );
2612:freertos\src/tasks.c **** 
2613:freertos\src/tasks.c **** 		return uxReturn;
 2030              		.loc 1 2613 0
 2031 0016 8008     		lsrs	r0, r0, #2
 2032              	.LVL203:
2614:freertos\src/tasks.c **** 	}
 2033              		.loc 1 2614 0
 2034              		@ sp needed
 2035 0018 7047     		bx	lr
 2036              	.L220:
 2037 001a C046     		.align	2
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 88


 2038              	.L219:
 2039 001c 00000000 		.word	.LANCHOR0
 2040              		.cfi_endproc
 2041              	.LFE60:
 2042              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 2043              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 2044              		.align	1
 2045              		.global	xTaskGetCurrentTaskHandle
 2046              		.code	16
 2047              		.thumb_func
 2048              		.type	xTaskGetCurrentTaskHandle, %function
 2049              	xTaskGetCurrentTaskHandle:
 2050              	.LFB61:
2615:freertos\src/tasks.c **** 
2616:freertos\src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
2617:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2618:freertos\src/tasks.c **** 
2619:freertos\src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2620:freertos\src/tasks.c **** 
2621:freertos\src/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2622:freertos\src/tasks.c **** 	{
2623:freertos\src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
2624:freertos\src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
2625:freertos\src/tasks.c **** 		want to allocate and clean RAM statically. */
2626:freertos\src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
2627:freertos\src/tasks.c **** 
2628:freertos\src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2629:freertos\src/tasks.c **** 		the task to free any memory allocated at the application level. */
2630:freertos\src/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
2631:freertos\src/tasks.c **** 		vPortFree( pxTCB );
2632:freertos\src/tasks.c **** 	}
2633:freertos\src/tasks.c **** 
2634:freertos\src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
2635:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2636:freertos\src/tasks.c **** 
2637:freertos\src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2638:freertos\src/tasks.c **** 
2639:freertos\src/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2640:freertos\src/tasks.c **** 	{
 2051              		.loc 1 2640 0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 2055              		@ link register save eliminated.
2641:freertos\src/tasks.c **** 	xTaskHandle xReturn;
2642:freertos\src/tasks.c **** 
2643:freertos\src/tasks.c **** 		/* A critical section is not required as this is not called from
2644:freertos\src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2645:freertos\src/tasks.c **** 		individual execution thread. */
2646:freertos\src/tasks.c **** 		xReturn = pxCurrentTCB;
 2056              		.loc 1 2646 0
 2057 0000 014B     		ldr	r3, .L222
2647:freertos\src/tasks.c **** 
2648:freertos\src/tasks.c **** 		return xReturn;
2649:freertos\src/tasks.c **** 	}
 2058              		.loc 1 2649 0
 2059              		@ sp needed
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 89


2646:freertos\src/tasks.c **** 
 2060              		.loc 1 2646 0
 2061 0002 1868     		ldr	r0, [r3]
 2062              	.LVL204:
 2063              		.loc 1 2649 0
 2064 0004 7047     		bx	lr
 2065              	.L223:
 2066 0006 C046     		.align	2
 2067              	.L222:
 2068 0008 00000000 		.word	.LANCHOR0
 2069              		.cfi_endproc
 2070              	.LFE61:
 2071              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 2072              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 2073              		.align	1
 2074              		.global	vTaskPriorityInherit
 2075              		.code	16
 2076              		.thumb_func
 2077              		.type	vTaskPriorityInherit, %function
 2078              	vTaskPriorityInherit:
 2079              	.LFB62:
2650:freertos\src/tasks.c **** 
2651:freertos\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
2652:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2653:freertos\src/tasks.c **** 
2654:freertos\src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2655:freertos\src/tasks.c **** 
2656:freertos\src/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2657:freertos\src/tasks.c **** 	{
2658:freertos\src/tasks.c **** 	portBASE_TYPE xReturn;
2659:freertos\src/tasks.c **** 
2660:freertos\src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2661:freertos\src/tasks.c **** 		{
2662:freertos\src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2663:freertos\src/tasks.c **** 		}
2664:freertos\src/tasks.c **** 		else
2665:freertos\src/tasks.c **** 		{
2666:freertos\src/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2667:freertos\src/tasks.c **** 			{
2668:freertos\src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2669:freertos\src/tasks.c **** 			}
2670:freertos\src/tasks.c **** 			else
2671:freertos\src/tasks.c **** 			{
2672:freertos\src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2673:freertos\src/tasks.c **** 			}
2674:freertos\src/tasks.c **** 		}
2675:freertos\src/tasks.c **** 
2676:freertos\src/tasks.c **** 		return xReturn;
2677:freertos\src/tasks.c **** 	}
2678:freertos\src/tasks.c **** 
2679:freertos\src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
2680:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2681:freertos\src/tasks.c **** 
2682:freertos\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2683:freertos\src/tasks.c **** 
2684:freertos\src/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
2685:freertos\src/tasks.c **** 	{
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 90


 2080              		.loc 1 2685 0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 2084              	.LVL205:
 2085 0000 70B5     		push	{r4, r5, r6, lr}
 2086              		.cfi_def_cfa_offset 16
 2087              		.cfi_offset 4, -16
 2088              		.cfi_offset 5, -12
 2089              		.cfi_offset 6, -8
 2090              		.cfi_offset 14, -4
 2091              		.loc 1 2685 0
 2092 0002 041E     		subs	r4, r0, #0
2686:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2687:freertos\src/tasks.c **** 
2688:freertos\src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
2689:freertos\src/tasks.c **** 		locked then the mutex holder might now be NULL. */
2690:freertos\src/tasks.c **** 		if( pxMutexHolder != NULL )
 2093              		.loc 1 2690 0
 2094 0004 2AD0     		beq	.L224
2691:freertos\src/tasks.c **** 		{
2692:freertos\src/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2095              		.loc 1 2692 0
 2096 0006 164B     		ldr	r3, .L234
 2097 0008 C26A     		ldr	r2, [r0, #44]
 2098 000a 1968     		ldr	r1, [r3]
 2099 000c 1E00     		movs	r6, r3
 2100 000e C96A     		ldr	r1, [r1, #44]
 2101 0010 8A42     		cmp	r2, r1
 2102 0012 23D2     		bcs	.L224
2693:freertos\src/tasks.c **** 			{
2694:freertos\src/tasks.c **** 				/* Adjust the mutex holder state to account for its new priority. */
2695:freertos\src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( 
 2103              		.loc 1 2695 0
 2104 0014 1968     		ldr	r1, [r3]
 2105 0016 C86A     		ldr	r0, [r1, #44]
 2106              	.LVL206:
 2107 0018 0421     		movs	r1, #4
 2108 001a 091A     		subs	r1, r1, r0
 2109 001c A161     		str	r1, [r4, #24]
2696:freertos\src/tasks.c **** 
2697:freertos\src/tasks.c **** 				/* If the task being modified is in the ready state it will need to
2698:freertos\src/tasks.c **** 				be moved into a new list. */
2699:freertos\src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 2110              		.loc 1 2699 0
 2111 001e 1421     		movs	r1, #20
 2112 0020 1800     		movs	r0, r3
 2113 0022 4A43     		muls	r2, r1
 2114 0024 1430     		adds	r0, r0, #20
 2115 0026 6169     		ldr	r1, [r4, #20]
 2116 0028 8218     		adds	r2, r0, r2
 2117 002a 9142     		cmp	r1, r2
 2118 002c 13D1     		bne	.L233
2700:freertos\src/tasks.c **** 				{
2701:freertos\src/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 2119              		.loc 1 2701 0
 2120 002e 251D     		adds	r5, r4, #4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 91


 2121 0030 2800     		movs	r0, r5
 2122 0032 FFF7FEFF 		bl	uxListRemove
 2123              	.LVL207:
2702:freertos\src/tasks.c **** 					{
2703:freertos\src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2704:freertos\src/tasks.c **** 					}
2705:freertos\src/tasks.c **** 
2706:freertos\src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
2707:freertos\src/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2124              		.loc 1 2707 0
 2125 0036 3368     		ldr	r3, [r6]
 2126 0038 D86A     		ldr	r0, [r3, #44]
2708:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2127              		.loc 1 2708 0
 2128 003a 0A4B     		ldr	r3, .L234+4
2707:freertos\src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2129              		.loc 1 2707 0
 2130 003c E062     		str	r0, [r4, #44]
 2131              		.loc 1 2708 0
 2132 003e DA6B     		ldr	r2, [r3, #60]
 2133 0040 9042     		cmp	r0, r2
 2134 0042 00D9     		bls	.L229
 2135              		.loc 1 2708 0 is_stmt 0 discriminator 1
 2136 0044 D863     		str	r0, [r3, #60]
 2137              	.L229:
 2138              		.loc 1 2708 0 discriminator 3
 2139 0046 1423     		movs	r3, #20
 2140 0048 5843     		muls	r0, r3
 2141 004a 1436     		adds	r6, r6, #20
 2142 004c 3018     		adds	r0, r6, r0
 2143 004e 2900     		movs	r1, r5
 2144 0050 FFF7FEFF 		bl	vListInsertEnd
 2145              	.LVL208:
2709:freertos\src/tasks.c **** 				}
2710:freertos\src/tasks.c **** 				else
2711:freertos\src/tasks.c **** 				{
2712:freertos\src/tasks.c **** 					/* Just inherit the priority. */
2713:freertos\src/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
2714:freertos\src/tasks.c **** 				}
2715:freertos\src/tasks.c **** 
2716:freertos\src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
2717:freertos\src/tasks.c **** 			}
2718:freertos\src/tasks.c **** 		}
2719:freertos\src/tasks.c **** 	}
 2146              		.loc 1 2719 0 is_stmt 1 discriminator 3
 2147 0054 02E0     		b	.L224
 2148              	.L233:
2713:freertos\src/tasks.c **** 				}
 2149              		.loc 1 2713 0
 2150 0056 1B68     		ldr	r3, [r3]
 2151 0058 DB6A     		ldr	r3, [r3, #44]
 2152 005a E362     		str	r3, [r4, #44]
 2153              	.L224:
 2154              		.loc 1 2719 0
 2155              		@ sp needed
 2156              	.LVL209:
 2157 005c 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 92


 2158              	.L235:
 2159 005e C046     		.align	2
 2160              	.L234:
 2161 0060 00000000 		.word	.LANCHOR0
 2162 0064 80000000 		.word	.LANCHOR2
 2163              		.cfi_endproc
 2164              	.LFE62:
 2165              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 2166              		.section	.text.vTaskPriorityDisinherit,"ax",%progbits
 2167              		.align	1
 2168              		.global	vTaskPriorityDisinherit
 2169              		.code	16
 2170              		.thumb_func
 2171              		.type	vTaskPriorityDisinherit, %function
 2172              	vTaskPriorityDisinherit:
 2173              	.LFB63:
2720:freertos\src/tasks.c **** 
2721:freertos\src/tasks.c **** #endif /* configUSE_MUTEXES */
2722:freertos\src/tasks.c **** /*-----------------------------------------------------------*/
2723:freertos\src/tasks.c **** 
2724:freertos\src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2725:freertos\src/tasks.c **** 
2726:freertos\src/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
2727:freertos\src/tasks.c **** 	{
 2174              		.loc 1 2727 0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              	.LVL210:
 2179 0000 70B5     		push	{r4, r5, r6, lr}
 2180              		.cfi_def_cfa_offset 16
 2181              		.cfi_offset 4, -16
 2182              		.cfi_offset 5, -12
 2183              		.cfi_offset 6, -8
 2184              		.cfi_offset 14, -4
 2185              		.loc 1 2727 0
 2186 0002 041E     		subs	r4, r0, #0
2728:freertos\src/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2729:freertos\src/tasks.c **** 
2730:freertos\src/tasks.c **** 		if( pxMutexHolder != NULL )
 2187              		.loc 1 2730 0
 2188 0004 19D0     		beq	.L236
2731:freertos\src/tasks.c **** 		{
2732:freertos\src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 2189              		.loc 1 2732 0
 2190 0006 C36A     		ldr	r3, [r0, #44]
 2191 0008 C26B     		ldr	r2, [r0, #60]
 2192 000a 9342     		cmp	r3, r2
 2193 000c 15D0     		beq	.L236
2733:freertos\src/tasks.c **** 			{
2734:freertos\src/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2735:freertos\src/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2736:freertos\src/tasks.c **** 				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 2194              		.loc 1 2736 0
 2195 000e 051D     		adds	r5, r0, #4
 2196 0010 2800     		movs	r0, r5
 2197              	.LVL211:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 93


 2198 0012 FFF7FEFF 		bl	uxListRemove
 2199              	.LVL212:
2737:freertos\src/tasks.c **** 				{
2738:freertos\src/tasks.c **** 					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2739:freertos\src/tasks.c **** 				}
2740:freertos\src/tasks.c **** 
2741:freertos\src/tasks.c **** 				/* Disinherit the priority before adding the task into the new
2742:freertos\src/tasks.c **** 				ready list. */
2743:freertos\src/tasks.c **** 				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
2744:freertos\src/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
2745:freertos\src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( 
 2200              		.loc 1 2745 0
 2201 0016 0423     		movs	r3, #4
2744:freertos\src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( 
 2202              		.loc 1 2744 0
 2203 0018 E06B     		ldr	r0, [r4, #60]
 2204              		.loc 1 2745 0
 2205 001a 1B1A     		subs	r3, r3, r0
 2206 001c A361     		str	r3, [r4, #24]
2746:freertos\src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 2207              		.loc 1 2746 0
 2208 001e 074B     		ldr	r3, .L242
2744:freertos\src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( 
 2209              		.loc 1 2744 0
 2210 0020 E062     		str	r0, [r4, #44]
 2211              		.loc 1 2746 0
 2212 0022 DA6B     		ldr	r2, [r3, #60]
 2213 0024 9042     		cmp	r0, r2
 2214 0026 00D9     		bls	.L238
 2215              		.loc 1 2746 0 is_stmt 0 discriminator 1
 2216 0028 D863     		str	r0, [r3, #60]
 2217              	.L238:
 2218              		.loc 1 2746 0 discriminator 3
 2219 002a 1423     		movs	r3, #20
 2220 002c 4343     		muls	r3, r0
 2221 002e 0448     		ldr	r0, .L242+4
 2222 0030 2900     		movs	r1, r5
 2223 0032 1430     		adds	r0, r0, #20
 2224 0034 C018     		adds	r0, r0, r3
 2225 0036 FFF7FEFF 		bl	vListInsertEnd
 2226              	.LVL213:
 2227              	.L236:
2747:freertos\src/tasks.c **** 			}
2748:freertos\src/tasks.c **** 		}
2749:freertos\src/tasks.c **** 	}
 2228              		.loc 1 2749 0 is_stmt 1
 2229              		@ sp needed
 2230              	.LVL214:
 2231 003a 70BD     		pop	{r4, r5, r6, pc}
 2232              	.L243:
 2233              		.align	2
 2234              	.L242:
 2235 003c 80000000 		.word	.LANCHOR2
 2236 0040 00000000 		.word	.LANCHOR0
 2237              		.cfi_endproc
 2238              	.LFE63:
 2239              		.size	vTaskPriorityDisinherit, .-vTaskPriorityDisinherit
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 94


 2240              		.global	pxCurrentTCB
 2241              		.section	.rodata
 2242              		.set	.LANCHOR3,. + 0
 2243              		.type	ucExpectedStackBytes.6737, %object
 2244              		.size	ucExpectedStackBytes.6737, 20
 2245              	ucExpectedStackBytes.6737:
 2246 0000 A5       		.byte	-91
 2247 0001 A5       		.byte	-91
 2248 0002 A5       		.byte	-91
 2249 0003 A5       		.byte	-91
 2250 0004 A5       		.byte	-91
 2251 0005 A5       		.byte	-91
 2252 0006 A5       		.byte	-91
 2253 0007 A5       		.byte	-91
 2254 0008 A5       		.byte	-91
 2255 0009 A5       		.byte	-91
 2256 000a A5       		.byte	-91
 2257 000b A5       		.byte	-91
 2258 000c A5       		.byte	-91
 2259 000d A5       		.byte	-91
 2260 000e A5       		.byte	-91
 2261 000f A5       		.byte	-91
 2262 0010 A5       		.byte	-91
 2263 0011 A5       		.byte	-91
 2264 0012 A5       		.byte	-91
 2265 0013 A5       		.byte	-91
 2266              		.section	.rodata.str1.1,"aMS",%progbits,1
 2267              	.LC24:
 2268 0000 49444C45 		.ascii	"IDLE\000"
 2268      00
 2269              		.data
 2270              		.align	2
 2271              		.set	.LANCHOR1,. + 0
 2272              		.type	xNextTaskUnblockTime, %object
 2273              		.size	xNextTaskUnblockTime, 4
 2274              	xNextTaskUnblockTime:
 2275 0000 FFFFFFFF 		.word	-1
 2276              		.bss
 2277              		.align	2
 2278              		.set	.LANCHOR0,. + 0
 2279              		.set	.LANCHOR2,. + 128
 2280              		.type	pxCurrentTCB, %object
 2281              		.size	pxCurrentTCB, 4
 2282              	pxCurrentTCB:
 2283 0000 00000000 		.space	4
 2284              		.type	xTickCount, %object
 2285              		.size	xTickCount, 4
 2286              	xTickCount:
 2287 0004 00000000 		.space	4
 2288              		.type	pxOverflowDelayedTaskList, %object
 2289              		.size	pxOverflowDelayedTaskList, 4
 2290              	pxOverflowDelayedTaskList:
 2291 0008 00000000 		.space	4
 2292              		.type	pxDelayedTaskList, %object
 2293              		.size	pxDelayedTaskList, 4
 2294              	pxDelayedTaskList:
 2295 000c 00000000 		.space	4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 95


 2296              		.type	uxCurrentNumberOfTasks, %object
 2297              		.size	uxCurrentNumberOfTasks, 4
 2298              	uxCurrentNumberOfTasks:
 2299 0010 00000000 		.space	4
 2300              		.type	pxReadyTasksLists, %object
 2301              		.size	pxReadyTasksLists, 80
 2302              	pxReadyTasksLists:
 2303 0014 00000000 		.space	80
 2303      00000000 
 2303      00000000 
 2303      00000000 
 2303      00000000 
 2304              		.type	xDelayedTaskList1, %object
 2305              		.size	xDelayedTaskList1, 20
 2306              	xDelayedTaskList1:
 2307 0064 00000000 		.space	20
 2307      00000000 
 2307      00000000 
 2307      00000000 
 2307      00000000 
 2308              		.type	xDelayedTaskList2, %object
 2309              		.size	xDelayedTaskList2, 20
 2310              	xDelayedTaskList2:
 2311 0078 00000000 		.space	20
 2311      00000000 
 2311      00000000 
 2311      00000000 
 2311      00000000 
 2312              		.type	xPendingReadyList, %object
 2313              		.size	xPendingReadyList, 20
 2314              	xPendingReadyList:
 2315 008c 00000000 		.space	20
 2315      00000000 
 2315      00000000 
 2315      00000000 
 2315      00000000 
 2316              		.type	xSuspendedTaskList, %object
 2317              		.size	xSuspendedTaskList, 20
 2318              	xSuspendedTaskList:
 2319 00a0 00000000 		.space	20
 2319      00000000 
 2319      00000000 
 2319      00000000 
 2319      00000000 
 2320              		.type	xSchedulerRunning, %object
 2321              		.size	xSchedulerRunning, 4
 2322              	xSchedulerRunning:
 2323 00b4 00000000 		.space	4
 2324              		.type	uxTaskNumber, %object
 2325              		.size	uxTaskNumber, 4
 2326              	uxTaskNumber:
 2327 00b8 00000000 		.space	4
 2328              		.type	uxTopReadyPriority, %object
 2329              		.size	uxTopReadyPriority, 4
 2330              	uxTopReadyPriority:
 2331 00bc 00000000 		.space	4
 2332              		.type	uxSchedulerSuspended, %object
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 96


 2333              		.size	uxSchedulerSuspended, 4
 2334              	uxSchedulerSuspended:
 2335 00c0 00000000 		.space	4
 2336              		.type	xNumOfOverflows, %object
 2337              		.size	xNumOfOverflows, 4
 2338              	xNumOfOverflows:
 2339 00c4 00000000 		.space	4
 2340              		.type	uxPendedTicks, %object
 2341              		.size	uxPendedTicks, 4
 2342              	uxPendedTicks:
 2343 00c8 00000000 		.space	4
 2344              		.type	xYieldPending, %object
 2345              		.size	xYieldPending, 4
 2346              	xYieldPending:
 2347 00cc 00000000 		.space	4
 2348              		.text
 2349              	.Letext0:
 2350              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2351              		.file 3 ".\\freertos\\include/projdefs.h"
 2352              		.file 4 ".\\freertos\\include/portmacro.h"
 2353              		.file 5 ".\\freertos\\include/list.h"
 2354              		.file 6 ".\\freertos\\include/task.h"
 2355              		.file 7 ".\\freertos\\include/portable.h"
 2356              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2357              		.section	.debug_info,"",%progbits
 2358              	.Ldebug_info0:
 2359 0000 DC130000 		.4byte	0x13dc
 2360 0004 0400     		.2byte	0x4
 2361 0006 00000000 		.4byte	.Ldebug_abbrev0
 2362 000a 04       		.byte	0x4
 2363 000b 01       		.uleb128 0x1
 2364 000c AE060000 		.4byte	.LASF149
 2365 0010 0C       		.byte	0xc
 2366 0011 CF040000 		.4byte	.LASF150
 2367 0015 A1000000 		.4byte	.LASF151
 2368 0019 58000000 		.4byte	.Ldebug_ranges0+0x58
 2369 001d 00000000 		.4byte	0
 2370 0021 00000000 		.4byte	.Ldebug_line0
 2371 0025 02       		.uleb128 0x2
 2372 0026 41030000 		.4byte	.LASF11
 2373 002a 02       		.byte	0x2
 2374 002b D8       		.byte	0xd8
 2375 002c 30000000 		.4byte	0x30
 2376 0030 03       		.uleb128 0x3
 2377 0031 04       		.byte	0x4
 2378 0032 07       		.byte	0x7
 2379 0033 DC000000 		.4byte	.LASF0
 2380 0037 04       		.uleb128 0x4
 2381 0038 04       		.byte	0x4
 2382 0039 05       		.byte	0x5
 2383 003a 696E7400 		.ascii	"int\000"
 2384 003e 03       		.uleb128 0x3
 2385 003f 01       		.byte	0x1
 2386 0040 06       		.byte	0x6
 2387 0041 3C090000 		.4byte	.LASF1
 2388 0045 03       		.uleb128 0x3
 2389 0046 01       		.byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 97


 2390 0047 08       		.byte	0x8
 2391 0048 14080000 		.4byte	.LASF2
 2392 004c 03       		.uleb128 0x3
 2393 004d 02       		.byte	0x2
 2394 004e 05       		.byte	0x5
 2395 004f 17060000 		.4byte	.LASF3
 2396 0053 03       		.uleb128 0x3
 2397 0054 02       		.byte	0x2
 2398 0055 07       		.byte	0x7
 2399 0056 48090000 		.4byte	.LASF4
 2400 005a 03       		.uleb128 0x3
 2401 005b 04       		.byte	0x4
 2402 005c 05       		.byte	0x5
 2403 005d 4D060000 		.4byte	.LASF5
 2404 0061 03       		.uleb128 0x3
 2405 0062 04       		.byte	0x4
 2406 0063 07       		.byte	0x7
 2407 0064 CA070000 		.4byte	.LASF6
 2408 0068 03       		.uleb128 0x3
 2409 0069 08       		.byte	0x8
 2410 006a 05       		.byte	0x5
 2411 006b 96040000 		.4byte	.LASF7
 2412 006f 03       		.uleb128 0x3
 2413 0070 08       		.byte	0x8
 2414 0071 07       		.byte	0x7
 2415 0072 87020000 		.4byte	.LASF8
 2416 0076 03       		.uleb128 0x3
 2417 0077 04       		.byte	0x4
 2418 0078 07       		.byte	0x7
 2419 0079 A2070000 		.4byte	.LASF9
 2420 007d 05       		.uleb128 0x5
 2421 007e 04       		.byte	0x4
 2422 007f 03       		.uleb128 0x3
 2423 0080 01       		.byte	0x1
 2424 0081 08       		.byte	0x8
 2425 0082 FE030000 		.4byte	.LASF10
 2426 0086 06       		.uleb128 0x6
 2427 0087 04       		.byte	0x4
 2428 0088 45000000 		.4byte	0x45
 2429 008c 02       		.uleb128 0x2
 2430 008d 6D090000 		.4byte	.LASF12
 2431 0091 03       		.byte	0x3
 2432 0092 46       		.byte	0x46
 2433 0093 97000000 		.4byte	0x97
 2434 0097 06       		.uleb128 0x6
 2435 0098 04       		.byte	0x4
 2436 0099 9D000000 		.4byte	0x9d
 2437 009d 07       		.uleb128 0x7
 2438 009e A8000000 		.4byte	0xa8
 2439 00a2 08       		.uleb128 0x8
 2440 00a3 7D000000 		.4byte	0x7d
 2441 00a7 00       		.byte	0
 2442 00a8 03       		.uleb128 0x3
 2443 00a9 04       		.byte	0x4
 2444 00aa 04       		.byte	0x4
 2445 00ab 52020000 		.4byte	.LASF13
 2446 00af 03       		.uleb128 0x3
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 98


 2447 00b0 08       		.byte	0x8
 2448 00b1 04       		.byte	0x4
 2449 00b2 79090000 		.4byte	.LASF14
 2450 00b6 02       		.uleb128 0x2
 2451 00b7 4B010000 		.4byte	.LASF15
 2452 00bb 04       		.byte	0x4
 2453 00bc 61       		.byte	0x61
 2454 00bd 61000000 		.4byte	0x61
 2455 00c1 09       		.uleb128 0x9
 2456 00c2 2E010000 		.4byte	.LASF22
 2457 00c6 14       		.byte	0x14
 2458 00c7 05       		.byte	0x5
 2459 00c8 88       		.byte	0x88
 2460 00c9 0A010000 		.4byte	0x10a
 2461 00cd 0A       		.uleb128 0xa
 2462 00ce 42060000 		.4byte	.LASF16
 2463 00d2 05       		.byte	0x5
 2464 00d3 8A       		.byte	0x8a
 2465 00d4 B6000000 		.4byte	0xb6
 2466 00d8 00       		.byte	0
 2467 00d9 0A       		.uleb128 0xa
 2468 00da FB040000 		.4byte	.LASF17
 2469 00de 05       		.byte	0x5
 2470 00df 8B       		.byte	0x8b
 2471 00e0 0A010000 		.4byte	0x10a
 2472 00e4 04       		.byte	0x4
 2473 00e5 0A       		.uleb128 0xa
 2474 00e6 DE020000 		.4byte	.LASF18
 2475 00ea 05       		.byte	0x5
 2476 00eb 8C       		.byte	0x8c
 2477 00ec 0A010000 		.4byte	0x10a
 2478 00f0 08       		.byte	0x8
 2479 00f1 0A       		.uleb128 0xa
 2480 00f2 87080000 		.4byte	.LASF19
 2481 00f6 05       		.byte	0x5
 2482 00f7 8D       		.byte	0x8d
 2483 00f8 7D000000 		.4byte	0x7d
 2484 00fc 0C       		.byte	0xc
 2485 00fd 0A       		.uleb128 0xa
 2486 00fe E0050000 		.4byte	.LASF20
 2487 0102 05       		.byte	0x5
 2488 0103 8E       		.byte	0x8e
 2489 0104 7D000000 		.4byte	0x7d
 2490 0108 10       		.byte	0x10
 2491 0109 00       		.byte	0
 2492 010a 06       		.uleb128 0x6
 2493 010b 04       		.byte	0x4
 2494 010c C1000000 		.4byte	0xc1
 2495 0110 02       		.uleb128 0x2
 2496 0111 7F060000 		.4byte	.LASF21
 2497 0115 05       		.byte	0x5
 2498 0116 90       		.byte	0x90
 2499 0117 C1000000 		.4byte	0xc1
 2500 011b 09       		.uleb128 0x9
 2501 011c 56030000 		.4byte	.LASF23
 2502 0120 0C       		.byte	0xc
 2503 0121 05       		.byte	0x5
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 99


 2504 0122 92       		.byte	0x92
 2505 0123 4C010000 		.4byte	0x14c
 2506 0127 0A       		.uleb128 0xa
 2507 0128 42060000 		.4byte	.LASF16
 2508 012c 05       		.byte	0x5
 2509 012d 94       		.byte	0x94
 2510 012e B6000000 		.4byte	0xb6
 2511 0132 00       		.byte	0
 2512 0133 0A       		.uleb128 0xa
 2513 0134 FB040000 		.4byte	.LASF17
 2514 0138 05       		.byte	0x5
 2515 0139 95       		.byte	0x95
 2516 013a 0A010000 		.4byte	0x10a
 2517 013e 04       		.byte	0x4
 2518 013f 0A       		.uleb128 0xa
 2519 0140 DE020000 		.4byte	.LASF18
 2520 0144 05       		.byte	0x5
 2521 0145 96       		.byte	0x96
 2522 0146 0A010000 		.4byte	0x10a
 2523 014a 08       		.byte	0x8
 2524 014b 00       		.byte	0
 2525 014c 02       		.uleb128 0x2
 2526 014d 6C080000 		.4byte	.LASF24
 2527 0151 05       		.byte	0x5
 2528 0152 98       		.byte	0x98
 2529 0153 1B010000 		.4byte	0x11b
 2530 0157 09       		.uleb128 0x9
 2531 0158 73030000 		.4byte	.LASF25
 2532 015c 14       		.byte	0x14
 2533 015d 05       		.byte	0x5
 2534 015e 9D       		.byte	0x9d
 2535 015f 88010000 		.4byte	0x188
 2536 0163 0A       		.uleb128 0xa
 2537 0164 0B000000 		.4byte	.LASF26
 2538 0168 05       		.byte	0x5
 2539 0169 9F       		.byte	0x9f
 2540 016a 61000000 		.4byte	0x61
 2541 016e 00       		.byte	0
 2542 016f 0A       		.uleb128 0xa
 2543 0170 07010000 		.4byte	.LASF27
 2544 0174 05       		.byte	0x5
 2545 0175 A0       		.byte	0xa0
 2546 0176 88010000 		.4byte	0x188
 2547 017a 04       		.byte	0x4
 2548 017b 0A       		.uleb128 0xa
 2549 017c 0F040000 		.4byte	.LASF28
 2550 0180 05       		.byte	0x5
 2551 0181 A1       		.byte	0xa1
 2552 0182 4C010000 		.4byte	0x14c
 2553 0186 08       		.byte	0x8
 2554 0187 00       		.byte	0
 2555 0188 06       		.uleb128 0x6
 2556 0189 04       		.byte	0x4
 2557 018a 10010000 		.4byte	0x110
 2558 018e 02       		.uleb128 0x2
 2559 018f 12020000 		.4byte	.LASF29
 2560 0193 05       		.byte	0x5
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 100


 2561 0194 A2       		.byte	0xa2
 2562 0195 57010000 		.4byte	0x157
 2563 0199 02       		.uleb128 0x2
 2564 019a 35030000 		.4byte	.LASF30
 2565 019e 06       		.byte	0x6
 2566 019f 60       		.byte	0x60
 2567 01a0 7D000000 		.4byte	0x7d
 2568 01a4 09       		.uleb128 0x9
 2569 01a5 24010000 		.4byte	.LASF31
 2570 01a9 08       		.byte	0x8
 2571 01aa 06       		.byte	0x6
 2572 01ab 6F       		.byte	0x6f
 2573 01ac C9010000 		.4byte	0x1c9
 2574 01b0 0A       		.uleb128 0xa
 2575 01b1 A4010000 		.4byte	.LASF32
 2576 01b5 06       		.byte	0x6
 2577 01b6 71       		.byte	0x71
 2578 01b7 5A000000 		.4byte	0x5a
 2579 01bb 00       		.byte	0
 2580 01bc 0A       		.uleb128 0xa
 2581 01bd E4040000 		.4byte	.LASF33
 2582 01c1 06       		.byte	0x6
 2583 01c2 72       		.byte	0x72
 2584 01c3 B6000000 		.4byte	0xb6
 2585 01c7 04       		.byte	0x4
 2586 01c8 00       		.byte	0
 2587 01c9 02       		.uleb128 0x2
 2588 01ca 09090000 		.4byte	.LASF34
 2589 01ce 06       		.byte	0x6
 2590 01cf 73       		.byte	0x73
 2591 01d0 A4010000 		.4byte	0x1a4
 2592 01d4 09       		.uleb128 0x9
 2593 01d5 83050000 		.4byte	.LASF35
 2594 01d9 0C       		.byte	0xc
 2595 01da 06       		.byte	0x6
 2596 01db 78       		.byte	0x78
 2597 01dc 05020000 		.4byte	0x205
 2598 01e0 0A       		.uleb128 0xa
 2599 01e1 FF070000 		.4byte	.LASF36
 2600 01e5 06       		.byte	0x6
 2601 01e6 7A       		.byte	0x7a
 2602 01e7 7D000000 		.4byte	0x7d
 2603 01eb 00       		.byte	0
 2604 01ec 0A       		.uleb128 0xa
 2605 01ed BF040000 		.4byte	.LASF37
 2606 01f1 06       		.byte	0x6
 2607 01f2 7B       		.byte	0x7b
 2608 01f3 61000000 		.4byte	0x61
 2609 01f7 04       		.byte	0x4
 2610 01f8 0A       		.uleb128 0xa
 2611 01f9 D7010000 		.4byte	.LASF38
 2612 01fd 06       		.byte	0x6
 2613 01fe 7C       		.byte	0x7c
 2614 01ff 61000000 		.4byte	0x61
 2615 0203 08       		.byte	0x8
 2616 0204 00       		.byte	0
 2617 0205 02       		.uleb128 0x2
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 101


 2618 0206 48050000 		.4byte	.LASF39
 2619 020a 06       		.byte	0x6
 2620 020b 7D       		.byte	0x7d
 2621 020c D4010000 		.4byte	0x1d4
 2622 0210 06       		.uleb128 0x6
 2623 0211 04       		.byte	0x4
 2624 0212 16020000 		.4byte	0x216
 2625 0216 0B       		.uleb128 0xb
 2626 0217 3E000000 		.4byte	0x3e
 2627 021b 0B       		.uleb128 0xb
 2628 021c 10020000 		.4byte	0x210
 2629 0220 06       		.uleb128 0x6
 2630 0221 04       		.byte	0x4
 2631 0222 61000000 		.4byte	0x61
 2632 0226 09       		.uleb128 0x9
 2633 0227 63000000 		.4byte	.LASF40
 2634 022b 40       		.byte	0x40
 2635 022c 01       		.byte	0x1
 2636 022d 78       		.byte	0x78
 2637 022e 87020000 		.4byte	0x287
 2638 0232 0A       		.uleb128 0xa
 2639 0233 A4090000 		.4byte	.LASF41
 2640 0237 01       		.byte	0x1
 2641 0238 7A       		.byte	0x7a
 2642 0239 87020000 		.4byte	0x287
 2643 023d 00       		.byte	0
 2644 023e 0A       		.uleb128 0xa
 2645 023f B3010000 		.4byte	.LASF42
 2646 0243 01       		.byte	0x1
 2647 0244 80       		.byte	0x80
 2648 0245 10010000 		.4byte	0x110
 2649 0249 04       		.byte	0x4
 2650 024a 0A       		.uleb128 0xa
 2651 024b 5D080000 		.4byte	.LASF43
 2652 024f 01       		.byte	0x1
 2653 0250 81       		.byte	0x81
 2654 0251 10010000 		.4byte	0x110
 2655 0255 18       		.byte	0x18
 2656 0256 0A       		.uleb128 0xa
 2657 0257 41000000 		.4byte	.LASF44
 2658 025b 01       		.byte	0x1
 2659 025c 82       		.byte	0x82
 2660 025d 61000000 		.4byte	0x61
 2661 0261 2C       		.byte	0x2c
 2662 0262 0A       		.uleb128 0xa
 2663 0263 56060000 		.4byte	.LASF45
 2664 0267 01       		.byte	0x1
 2665 0268 83       		.byte	0x83
 2666 0269 20020000 		.4byte	0x220
 2667 026d 30       		.byte	0x30
 2668 026e 0A       		.uleb128 0xa
 2669 026f 00000000 		.4byte	.LASF46
 2670 0273 01       		.byte	0x1
 2671 0274 84       		.byte	0x84
 2672 0275 92020000 		.4byte	0x292
 2673 0279 34       		.byte	0x34
 2674 027a 0A       		.uleb128 0xa
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 102


 2675 027b 3E080000 		.4byte	.LASF47
 2676 027f 01       		.byte	0x1
 2677 0280 94       		.byte	0x94
 2678 0281 61000000 		.4byte	0x61
 2679 0285 3C       		.byte	0x3c
 2680 0286 00       		.byte	0
 2681 0287 06       		.uleb128 0x6
 2682 0288 04       		.byte	0x4
 2683 0289 8D020000 		.4byte	0x28d
 2684 028d 0C       		.uleb128 0xc
 2685 028e 61000000 		.4byte	0x61
 2686 0292 0D       		.uleb128 0xd
 2687 0293 3E000000 		.4byte	0x3e
 2688 0297 A2020000 		.4byte	0x2a2
 2689 029b 0E       		.uleb128 0xe
 2690 029c 76000000 		.4byte	0x76
 2691 02a0 07       		.byte	0x7
 2692 02a1 00       		.byte	0
 2693 02a2 02       		.uleb128 0x2
 2694 02a3 18020000 		.4byte	.LASF48
 2695 02a7 01       		.byte	0x1
 2696 02a8 AA       		.byte	0xaa
 2697 02a9 26020000 		.4byte	0x226
 2698 02ad 0F       		.uleb128 0xf
 2699 02ae E2090000 		.4byte	.LASF152
 2700 02b2 01       		.byte	0x1
 2701 02b3 6C09     		.2byte	0x96c
 2702 02b5 01       		.byte	0x1
 2703 02b6 10       		.uleb128 0x10
 2704 02b7 69050000 		.4byte	.LASF53
 2705 02bb 01       		.byte	0x1
 2706 02bc E808     		.2byte	0x8e8
 2707 02be 01       		.byte	0x1
 2708 02bf 0A030000 		.4byte	0x30a
 2709 02c3 11       		.uleb128 0x11
 2710 02c4 67090000 		.4byte	.LASF49
 2711 02c8 01       		.byte	0x1
 2712 02c9 E808     		.2byte	0x8e8
 2713 02cb 0A030000 		.4byte	0x30a
 2714 02cf 11       		.uleb128 0x11
 2715 02d0 F4040000 		.4byte	.LASF50
 2716 02d4 01       		.byte	0x1
 2717 02d5 E808     		.2byte	0x8e8
 2718 02d7 1B020000 		.4byte	0x21b
 2719 02db 11       		.uleb128 0x11
 2720 02dc 41000000 		.4byte	.LASF44
 2721 02e0 01       		.byte	0x1
 2722 02e1 E808     		.2byte	0x8e8
 2723 02e3 61000000 		.4byte	0x61
 2724 02e7 11       		.uleb128 0x11
 2725 02e8 E1080000 		.4byte	.LASF51
 2726 02ec 01       		.byte	0x1
 2727 02ed E808     		.2byte	0x8e8
 2728 02ef 1B030000 		.4byte	0x31b
 2729 02f3 11       		.uleb128 0x11
 2730 02f4 67020000 		.4byte	.LASF52
 2731 02f8 01       		.byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 103


 2732 02f9 E808     		.2byte	0x8e8
 2733 02fb 53000000 		.4byte	0x53
 2734 02ff 12       		.uleb128 0x12
 2735 0300 7800     		.ascii	"x\000"
 2736 0302 01       		.byte	0x1
 2737 0303 EA08     		.2byte	0x8ea
 2738 0305 61000000 		.4byte	0x61
 2739 0309 00       		.byte	0
 2740 030a 06       		.uleb128 0x6
 2741 030b 04       		.byte	0x4
 2742 030c A2020000 		.4byte	0x2a2
 2743 0310 06       		.uleb128 0x6
 2744 0311 04       		.byte	0x4
 2745 0312 16030000 		.4byte	0x316
 2746 0316 0B       		.uleb128 0xb
 2747 0317 05020000 		.4byte	0x205
 2748 031b 0B       		.uleb128 0xb
 2749 031c 10030000 		.4byte	0x310
 2750 0320 10       		.uleb128 0x10
 2751 0321 EA080000 		.4byte	.LASF54
 2752 0325 01       		.byte	0x1
 2753 0326 8F09     		.2byte	0x98f
 2754 0328 01       		.byte	0x1
 2755 0329 3A030000 		.4byte	0x33a
 2756 032d 11       		.uleb128 0x11
 2757 032e 5B090000 		.4byte	.LASF55
 2758 0332 01       		.byte	0x1
 2759 0333 8F09     		.2byte	0x98f
 2760 0335 B6000000 		.4byte	0xb6
 2761 0339 00       		.byte	0
 2762 033a 13       		.uleb128 0x13
 2763 033b C9020000 		.4byte	.LASF153
 2764 033f 01       		.byte	0x1
 2765 0340 5304     		.2byte	0x453
 2766 0342 5A000000 		.4byte	0x5a
 2767 0346 01       		.byte	0x1
 2768 0347 70030000 		.4byte	0x370
 2769 034b 11       		.uleb128 0x11
 2770 034c 56050000 		.4byte	.LASF56
 2771 0350 01       		.byte	0x1
 2772 0351 5304     		.2byte	0x453
 2773 0353 99010000 		.4byte	0x199
 2774 0357 14       		.uleb128 0x14
 2775 0358 9A070000 		.4byte	.LASF57
 2776 035c 01       		.byte	0x1
 2777 035d 5504     		.2byte	0x455
 2778 035f 5A000000 		.4byte	0x5a
 2779 0363 14       		.uleb128 0x14
 2780 0364 67090000 		.4byte	.LASF49
 2781 0368 01       		.byte	0x1
 2782 0369 5604     		.2byte	0x456
 2783 036b 7B030000 		.4byte	0x37b
 2784 036f 00       		.byte	0
 2785 0370 06       		.uleb128 0x6
 2786 0371 04       		.byte	0x4
 2787 0372 76030000 		.4byte	0x376
 2788 0376 0B       		.uleb128 0xb
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 104


 2789 0377 A2020000 		.4byte	0x2a2
 2790 037b 0B       		.uleb128 0xb
 2791 037c 70030000 		.4byte	0x370
 2792 0380 15       		.uleb128 0x15
 2793 0381 BD050000 		.4byte	.LASF154
 2794 0385 01       		.byte	0x1
 2795 0386 2B07     		.2byte	0x72b
 2796 0388 01       		.byte	0x1
 2797 0389 C3030000 		.4byte	0x3c3
 2798 038d 16       		.uleb128 0x16
 2799 038e B4030000 		.4byte	0x3b4
 2800 0392 17       		.uleb128 0x17
 2801 0393 020A0000 		.4byte	.LASF65
 2802 0397 01       		.byte	0x1
 2803 0398 5007     		.2byte	0x750
 2804 039a D8030000 		.4byte	0x3d8
 2805 039e 14       		.byte	0x14
 2806 039f A5       		.byte	0xa5
 2807 03a0 A5       		.byte	0xa5
 2808 03a1 A5       		.byte	0xa5
 2809 03a2 A5       		.byte	0xa5
 2810 03a3 A5       		.byte	0xa5
 2811 03a4 A5       		.byte	0xa5
 2812 03a5 A5       		.byte	0xa5
 2813 03a6 A5       		.byte	0xa5
 2814 03a7 A5       		.byte	0xa5
 2815 03a8 A5       		.byte	0xa5
 2816 03a9 A5       		.byte	0xa5
 2817 03aa A5       		.byte	0xa5
 2818 03ab A5       		.byte	0xa5
 2819 03ac A5       		.byte	0xa5
 2820 03ad A5       		.byte	0xa5
 2821 03ae A5       		.byte	0xa5
 2822 03af A5       		.byte	0xa5
 2823 03b0 A5       		.byte	0xa5
 2824 03b1 A5       		.byte	0xa5
 2825 03b2 A5       		.byte	0xa5
 2826 03b3 00       		.byte	0
 2827 03b4 18       		.uleb128 0x18
 2828 03b5 14       		.uleb128 0x14
 2829 03b6 4C000000 		.4byte	.LASF58
 2830 03ba 01       		.byte	0x1
 2831 03bb 5207     		.2byte	0x752
 2832 03bd E3030000 		.4byte	0x3e3
 2833 03c1 00       		.byte	0
 2834 03c2 00       		.byte	0
 2835 03c3 0D       		.uleb128 0xd
 2836 03c4 D3030000 		.4byte	0x3d3
 2837 03c8 D3030000 		.4byte	0x3d3
 2838 03cc 0E       		.uleb128 0xe
 2839 03cd 76000000 		.4byte	0x76
 2840 03d1 13       		.byte	0x13
 2841 03d2 00       		.byte	0
 2842 03d3 0B       		.uleb128 0xb
 2843 03d4 45000000 		.4byte	0x45
 2844 03d8 0B       		.uleb128 0xb
 2845 03d9 C3030000 		.4byte	0x3c3
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 105


 2846 03dd 06       		.uleb128 0x6
 2847 03de 04       		.byte	0x4
 2848 03df 8E010000 		.4byte	0x18e
 2849 03e3 0B       		.uleb128 0xb
 2850 03e4 DD030000 		.4byte	0x3dd
 2851 03e8 19       		.uleb128 0x19
 2852 03e9 03040000 		.4byte	.LASF155
 2853 03ed 01       		.byte	0x1
 2854 03ee 6508     		.2byte	0x865
 2855 03f0 00000000 		.4byte	.LFB53
 2856 03f4 02000000 		.4byte	.LFE53-.LFB53
 2857 03f8 01       		.uleb128 0x1
 2858 03f9 9C       		.byte	0x9c
 2859 03fa 0D040000 		.4byte	0x40d
 2860 03fe 1A       		.uleb128 0x1a
 2861 03ff 35060000 		.4byte	.LASF62
 2862 0403 01       		.byte	0x1
 2863 0404 6508     		.2byte	0x865
 2864 0406 7D000000 		.4byte	0x7d
 2865 040a 01       		.uleb128 0x1
 2866 040b 50       		.byte	0x50
 2867 040c 00       		.byte	0
 2868 040d 1B       		.uleb128 0x1b
 2869 040e 20030000 		.4byte	0x320
 2870 0412 00000000 		.4byte	.LFB57
 2871 0416 3C000000 		.4byte	.LFE57-.LFB57
 2872 041a 01       		.uleb128 0x1
 2873 041b 9C       		.byte	0x9c
 2874 041c 53040000 		.4byte	0x453
 2875 0420 1C       		.uleb128 0x1c
 2876 0421 2D030000 		.4byte	0x32d
 2877 0425 00000000 		.4byte	.LLST0
 2878 0429 1D       		.uleb128 0x1d
 2879 042a 10000000 		.4byte	.LBB8
 2880 042e 0C000000 		.4byte	.LBE8-.LBB8
 2881 0432 49040000 		.4byte	0x449
 2882 0436 1C       		.uleb128 0x1c
 2883 0437 2D030000 		.4byte	0x32d
 2884 043b 42000000 		.4byte	.LLST1
 2885 043f 1E       		.uleb128 0x1e
 2886 0440 1A000000 		.4byte	.LVL4
 2887 0444 02130000 		.4byte	0x1302
 2888 0448 00       		.byte	0
 2889 0449 1E       		.uleb128 0x1e
 2890 044a 26000000 		.4byte	.LVL7
 2891 044e 02130000 		.4byte	0x1302
 2892 0452 00       		.byte	0
 2893 0453 1F       		.uleb128 0x1f
 2894 0454 E4010000 		.4byte	.LASF102
 2895 0458 01       		.byte	0x1
 2896 0459 A909     		.2byte	0x9a9
 2897 045b 0A030000 		.4byte	0x30a
 2898 045f 01       		.byte	0x1
 2899 0460 89040000 		.4byte	0x489
 2900 0464 11       		.uleb128 0x11
 2901 0465 67020000 		.4byte	.LASF52
 2902 0469 01       		.byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 106


 2903 046a A909     		.2byte	0x9a9
 2904 046c 53000000 		.4byte	0x53
 2905 0470 11       		.uleb128 0x11
 2906 0471 95090000 		.4byte	.LASF59
 2907 0475 01       		.byte	0x1
 2908 0476 A909     		.2byte	0x9a9
 2909 0478 20020000 		.4byte	0x220
 2910 047c 14       		.uleb128 0x14
 2911 047d 18040000 		.4byte	.LASF60
 2912 0481 01       		.byte	0x1
 2913 0482 AB09     		.2byte	0x9ab
 2914 0484 0A030000 		.4byte	0x30a
 2915 0488 00       		.byte	0
 2916 0489 10       		.uleb128 0x10
 2917 048a BD090000 		.4byte	.LASF61
 2918 048e 01       		.byte	0x1
 2919 048f 4C09     		.2byte	0x94c
 2920 0491 01       		.byte	0x1
 2921 0492 A3040000 		.4byte	0x4a3
 2922 0496 14       		.uleb128 0x14
 2923 0497 41000000 		.4byte	.LASF44
 2924 049b 01       		.byte	0x1
 2925 049c 4E09     		.2byte	0x94e
 2926 049e 61000000 		.4byte	0x61
 2927 04a2 00       		.byte	0
 2928 04a3 20       		.uleb128 0x20
 2929 04a4 AA050000 		.4byte	.LASF67
 2930 04a8 01       		.byte	0x1
 2931 04a9 E701     		.2byte	0x1e7
 2932 04ab 5A000000 		.4byte	0x5a
 2933 04af 00000000 		.4byte	.LFB32
 2934 04b3 6C010000 		.4byte	.LFE32-.LFB32
 2935 04b7 01       		.uleb128 0x1
 2936 04b8 9C       		.byte	0x9c
 2937 04b9 91070000 		.4byte	0x791
 2938 04bd 21       		.uleb128 0x21
 2939 04be 43040000 		.4byte	.LASF63
 2940 04c2 01       		.byte	0x1
 2941 04c3 E701     		.2byte	0x1e7
 2942 04c5 8C000000 		.4byte	0x8c
 2943 04c9 60000000 		.4byte	.LLST2
 2944 04cd 21       		.uleb128 0x21
 2945 04ce F4040000 		.4byte	.LASF50
 2946 04d2 01       		.byte	0x1
 2947 04d3 E701     		.2byte	0x1e7
 2948 04d5 1B020000 		.4byte	0x21b
 2949 04d9 7F000000 		.4byte	.LLST3
 2950 04dd 21       		.uleb128 0x21
 2951 04de 67020000 		.4byte	.LASF52
 2952 04e2 01       		.byte	0x1
 2953 04e3 E701     		.2byte	0x1e7
 2954 04e5 53000000 		.4byte	0x53
 2955 04e9 C4000000 		.4byte	.LLST4
 2956 04ed 21       		.uleb128 0x21
 2957 04ee 35060000 		.4byte	.LASF62
 2958 04f2 01       		.byte	0x1
 2959 04f3 E701     		.2byte	0x1e7
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 107


 2960 04f5 7D000000 		.4byte	0x7d
 2961 04f9 E5000000 		.4byte	.LLST5
 2962 04fd 1A       		.uleb128 0x1a
 2963 04fe 41000000 		.4byte	.LASF44
 2964 0502 01       		.byte	0x1
 2965 0503 E701     		.2byte	0x1e7
 2966 0505 61000000 		.4byte	0x61
 2967 0509 02       		.uleb128 0x2
 2968 050a 91       		.byte	0x91
 2969 050b 00       		.sleb128 0
 2970 050c 1A       		.uleb128 0x1a
 2971 050d D4090000 		.4byte	.LASF64
 2972 0511 01       		.byte	0x1
 2973 0512 E701     		.2byte	0x1e7
 2974 0514 91070000 		.4byte	0x791
 2975 0518 02       		.uleb128 0x2
 2976 0519 91       		.byte	0x91
 2977 051a 04       		.sleb128 4
 2978 051b 1A       		.uleb128 0x1a
 2979 051c 95090000 		.4byte	.LASF59
 2980 0520 01       		.byte	0x1
 2981 0521 E701     		.2byte	0x1e7
 2982 0523 20020000 		.4byte	0x220
 2983 0527 02       		.uleb128 0x2
 2984 0528 91       		.byte	0x91
 2985 0529 08       		.sleb128 8
 2986 052a 1A       		.uleb128 0x1a
 2987 052b E1080000 		.4byte	.LASF51
 2988 052f 01       		.byte	0x1
 2989 0530 E701     		.2byte	0x1e7
 2990 0532 1B030000 		.4byte	0x31b
 2991 0536 02       		.uleb128 0x2
 2992 0537 91       		.byte	0x91
 2993 0538 0C       		.sleb128 12
 2994 0539 22       		.uleb128 0x22
 2995 053a 9A070000 		.4byte	.LASF57
 2996 053e 01       		.byte	0x1
 2997 053f E901     		.2byte	0x1e9
 2998 0541 5A000000 		.4byte	0x5a
 2999 0545 04010000 		.4byte	.LLST6
 3000 0549 23       		.uleb128 0x23
 3001 054a 18040000 		.4byte	.LASF60
 3002 054e 01       		.byte	0x1
 3003 054f EA01     		.2byte	0x1ea
 3004 0551 0A030000 		.4byte	0x30a
 3005 0555 01       		.uleb128 0x1
 3006 0556 54       		.byte	0x54
 3007 0557 24       		.uleb128 0x24
 3008 0558 53040000 		.4byte	0x453
 3009 055c 04000000 		.4byte	.LBB17
 3010 0560 00000000 		.4byte	.Ldebug_ranges0+0
 3011 0564 01       		.byte	0x1
 3012 0565 F101     		.2byte	0x1f1
 3013 0567 E1050000 		.4byte	0x5e1
 3014 056b 1C       		.uleb128 0x1c
 3015 056c 70040000 		.4byte	0x470
 3016 0570 25010000 		.4byte	.LLST7
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 108


 3017 0574 1C       		.uleb128 0x1c
 3018 0575 64040000 		.4byte	0x464
 3019 0579 39010000 		.4byte	.LLST8
 3020 057d 25       		.uleb128 0x25
 3021 057e 00000000 		.4byte	.Ldebug_ranges0+0
 3022 0582 26       		.uleb128 0x26
 3023 0583 7C040000 		.4byte	0x47c
 3024 0587 57010000 		.4byte	.LLST9
 3025 058b 27       		.uleb128 0x27
 3026 058c 10000000 		.4byte	.LVL12
 3027 0590 0E130000 		.4byte	0x130e
 3028 0594 9F050000 		.4byte	0x59f
 3029 0598 28       		.uleb128 0x28
 3030 0599 01       		.uleb128 0x1
 3031 059a 50       		.byte	0x50
 3032 059b 02       		.uleb128 0x2
 3033 059c 08       		.byte	0x8
 3034 059d 40       		.byte	0x40
 3035 059e 00       		.byte	0
 3036 059f 27       		.uleb128 0x27
 3037 05a0 22000000 		.4byte	.LVL15
 3038 05a4 0E130000 		.4byte	0x130e
 3039 05a8 B5050000 		.4byte	0x5b5
 3040 05ac 28       		.uleb128 0x28
 3041 05ad 01       		.uleb128 0x1
 3042 05ae 50       		.byte	0x50
 3043 05af 04       		.uleb128 0x4
 3044 05b0 75       		.byte	0x75
 3045 05b1 00       		.sleb128 0
 3046 05b2 32       		.byte	0x32
 3047 05b3 24       		.byte	0x24
 3048 05b4 00       		.byte	0
 3049 05b5 27       		.uleb128 0x27
 3050 05b6 2E000000 		.4byte	.LVL16
 3051 05ba 1A130000 		.4byte	0x131a
 3052 05be C9050000 		.4byte	0x5c9
 3053 05c2 28       		.uleb128 0x28
 3054 05c3 01       		.uleb128 0x1
 3055 05c4 50       		.byte	0x50
 3056 05c5 02       		.uleb128 0x2
 3057 05c6 74       		.byte	0x74
 3058 05c7 00       		.sleb128 0
 3059 05c8 00       		.byte	0
 3060 05c9 29       		.uleb128 0x29
 3061 05ca 3A000000 		.4byte	.LVL19
 3062 05ce 26130000 		.4byte	0x1326
 3063 05d2 28       		.uleb128 0x28
 3064 05d3 01       		.uleb128 0x1
 3065 05d4 51       		.byte	0x51
 3066 05d5 02       		.uleb128 0x2
 3067 05d6 08       		.byte	0x8
 3068 05d7 A5       		.byte	0xa5
 3069 05d8 28       		.uleb128 0x28
 3070 05d9 01       		.uleb128 0x1
 3071 05da 52       		.byte	0x52
 3072 05db 02       		.uleb128 0x2
 3073 05dc 75       		.byte	0x75
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 109


 3074 05dd 00       		.sleb128 0
 3075 05de 00       		.byte	0
 3076 05df 00       		.byte	0
 3077 05e0 00       		.byte	0
 3078 05e1 1D       		.uleb128 0x1d
 3079 05e2 3A000000 		.4byte	.LBB21
 3080 05e6 02010000 		.4byte	.LBE21-.LBB21
 3081 05ea 87070000 		.4byte	0x787
 3082 05ee 22       		.uleb128 0x22
 3083 05ef A4090000 		.4byte	.LASF41
 3084 05f3 01       		.byte	0x1
 3085 05f4 F501     		.2byte	0x1f5
 3086 05f6 20020000 		.4byte	0x220
 3087 05fa 8C010000 		.4byte	.LLST10
 3088 05fe 2A       		.uleb128 0x2a
 3089 05ff B6020000 		.4byte	0x2b6
 3090 0603 46000000 		.4byte	.LBB22
 3091 0607 44000000 		.4byte	.LBE22-.LBB22
 3092 060b 01       		.byte	0x1
 3093 060c 2002     		.2byte	0x220
 3094 060e 73060000 		.4byte	0x673
 3095 0612 1C       		.uleb128 0x1c
 3096 0613 E7020000 		.4byte	0x2e7
 3097 0617 D9010000 		.4byte	.LLST11
 3098 061b 2B       		.uleb128 0x2b
 3099 061c F3020000 		.4byte	0x2f3
 3100 0620 1C       		.uleb128 0x1c
 3101 0621 DB020000 		.4byte	0x2db
 3102 0625 ED010000 		.4byte	.LLST12
 3103 0629 1C       		.uleb128 0x1c
 3104 062a CF020000 		.4byte	0x2cf
 3105 062e 0C020000 		.4byte	.LLST13
 3106 0632 1C       		.uleb128 0x1c
 3107 0633 C3020000 		.4byte	0x2c3
 3108 0637 2D020000 		.4byte	.LLST14
 3109 063b 2C       		.uleb128 0x2c
 3110 063c 46000000 		.4byte	.LBB23
 3111 0640 44000000 		.4byte	.LBE23-.LBB23
 3112 0644 26       		.uleb128 0x26
 3113 0645 FF020000 		.4byte	0x2ff
 3114 0649 40020000 		.4byte	.LLST15
 3115 064d 27       		.uleb128 0x27
 3116 064e 78000000 		.4byte	.LVL29
 3117 0652 31130000 		.4byte	0x1331
 3118 0656 61060000 		.4byte	0x661
 3119 065a 28       		.uleb128 0x28
 3120 065b 01       		.uleb128 0x1
 3121 065c 50       		.byte	0x50
 3122 065d 02       		.uleb128 0x2
 3123 065e 76       		.byte	0x76
 3124 065f 00       		.sleb128 0
 3125 0660 00       		.byte	0
 3126 0661 29       		.uleb128 0x29
 3127 0662 80000000 		.4byte	.LVL30
 3128 0666 31130000 		.4byte	0x1331
 3129 066a 28       		.uleb128 0x28
 3130 066b 01       		.uleb128 0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 110


 3131 066c 50       		.byte	0x50
 3132 066d 02       		.uleb128 0x2
 3133 066e 74       		.byte	0x74
 3134 066f 18       		.sleb128 24
 3135 0670 00       		.byte	0
 3136 0671 00       		.byte	0
 3137 0672 00       		.byte	0
 3138 0673 2A       		.uleb128 0x2a
 3139 0674 89040000 		.4byte	0x489
 3140 0678 B8000000 		.4byte	.LBB24
 3141 067c 48000000 		.4byte	.LBE24-.LBB24
 3142 0680 01       		.byte	0x1
 3143 0681 4802     		.2byte	0x248
 3144 0683 3E070000 		.4byte	0x73e
 3145 0687 2C       		.uleb128 0x2c
 3146 0688 B8000000 		.4byte	.LBB25
 3147 068c 48000000 		.4byte	.LBE25-.LBB25
 3148 0690 26       		.uleb128 0x26
 3149 0691 96040000 		.4byte	0x496
 3150 0695 5F020000 		.4byte	.LLST16
 3151 0699 27       		.uleb128 0x27
 3152 069a C0000000 		.4byte	.LVL36
 3153 069e 3D130000 		.4byte	0x133d
 3154 06a2 AD060000 		.4byte	0x6ad
 3155 06a6 28       		.uleb128 0x28
 3156 06a7 01       		.uleb128 0x1
 3157 06a8 50       		.byte	0x50
 3158 06a9 02       		.uleb128 0x2
 3159 06aa 75       		.byte	0x75
 3160 06ab 14       		.sleb128 20
 3161 06ac 00       		.byte	0
 3162 06ad 27       		.uleb128 0x27
 3163 06ae C8000000 		.4byte	.LVL37
 3164 06b2 3D130000 		.4byte	0x133d
 3165 06b6 C1060000 		.4byte	0x6c1
 3166 06ba 28       		.uleb128 0x28
 3167 06bb 01       		.uleb128 0x1
 3168 06bc 50       		.byte	0x50
 3169 06bd 02       		.uleb128 0x2
 3170 06be 75       		.byte	0x75
 3171 06bf 28       		.sleb128 40
 3172 06c0 00       		.byte	0
 3173 06c1 27       		.uleb128 0x27
 3174 06c2 D0000000 		.4byte	.LVL38
 3175 06c6 3D130000 		.4byte	0x133d
 3176 06ca D5060000 		.4byte	0x6d5
 3177 06ce 28       		.uleb128 0x28
 3178 06cf 01       		.uleb128 0x1
 3179 06d0 50       		.byte	0x50
 3180 06d1 02       		.uleb128 0x2
 3181 06d2 75       		.byte	0x75
 3182 06d3 3C       		.sleb128 60
 3183 06d4 00       		.byte	0
 3184 06d5 27       		.uleb128 0x27
 3185 06d6 D8000000 		.4byte	.LVL39
 3186 06da 3D130000 		.4byte	0x133d
 3187 06de EA060000 		.4byte	0x6ea
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 111


 3188 06e2 28       		.uleb128 0x28
 3189 06e3 01       		.uleb128 0x1
 3190 06e4 50       		.byte	0x50
 3191 06e5 03       		.uleb128 0x3
 3192 06e6 75       		.byte	0x75
 3193 06e7 D000     		.sleb128 80
 3194 06e9 00       		.byte	0
 3195 06ea 27       		.uleb128 0x27
 3196 06eb DE000000 		.4byte	.LVL40
 3197 06ef 3D130000 		.4byte	0x133d
 3198 06f3 01070000 		.4byte	0x701
 3199 06f7 28       		.uleb128 0x28
 3200 06f8 01       		.uleb128 0x1
 3201 06f9 50       		.byte	0x50
 3202 06fa 05       		.uleb128 0x5
 3203 06fb 03       		.byte	0x3
 3204 06fc 64000000 		.4byte	.LANCHOR0+100
 3205 0700 00       		.byte	0
 3206 0701 27       		.uleb128 0x27
 3207 0702 E4000000 		.4byte	.LVL41
 3208 0706 3D130000 		.4byte	0x133d
 3209 070a 18070000 		.4byte	0x718
 3210 070e 28       		.uleb128 0x28
 3211 070f 01       		.uleb128 0x1
 3212 0710 50       		.byte	0x50
 3213 0711 05       		.uleb128 0x5
 3214 0712 03       		.byte	0x3
 3215 0713 78000000 		.4byte	.LANCHOR0+120
 3216 0717 00       		.byte	0
 3217 0718 27       		.uleb128 0x27
 3218 0719 EE000000 		.4byte	.LVL43
 3219 071d 3D130000 		.4byte	0x133d
 3220 0721 2C070000 		.4byte	0x72c
 3221 0725 28       		.uleb128 0x28
 3222 0726 01       		.uleb128 0x1
 3223 0727 50       		.byte	0x50
 3224 0728 02       		.uleb128 0x2
 3225 0729 77       		.byte	0x77
 3226 072a 0C       		.sleb128 12
 3227 072b 00       		.byte	0
 3228 072c 29       		.uleb128 0x29
 3229 072d F6000000 		.4byte	.LVL44
 3230 0731 3D130000 		.4byte	0x133d
 3231 0735 28       		.uleb128 0x28
 3232 0736 01       		.uleb128 0x1
 3233 0737 50       		.byte	0x50
 3234 0738 02       		.uleb128 0x2
 3235 0739 77       		.byte	0x77
 3236 073a 20       		.sleb128 32
 3237 073b 00       		.byte	0
 3238 073c 00       		.byte	0
 3239 073d 00       		.byte	0
 3240 073e 27       		.uleb128 0x27
 3241 073f 94000000 		.4byte	.LVL33
 3242 0743 49130000 		.4byte	0x1349
 3243 0747 60070000 		.4byte	0x760
 3244 074b 28       		.uleb128 0x28
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 112


 3245 074c 01       		.uleb128 0x1
 3246 074d 50       		.byte	0x50
 3247 074e 02       		.uleb128 0x2
 3248 074f 77       		.byte	0x77
 3249 0750 00       		.sleb128 0
 3250 0751 28       		.uleb128 0x28
 3251 0752 01       		.uleb128 0x1
 3252 0753 51       		.byte	0x51
 3253 0754 03       		.uleb128 0x3
 3254 0755 7D       		.byte	0x7d
 3255 0756 00       		.sleb128 0
 3256 0757 06       		.byte	0x6
 3257 0758 28       		.uleb128 0x28
 3258 0759 01       		.uleb128 0x1
 3259 075a 52       		.byte	0x52
 3260 075b 03       		.uleb128 0x3
 3261 075c 91       		.byte	0x91
 3262 075d 64       		.sleb128 -28
 3263 075e 06       		.byte	0x6
 3264 075f 00       		.byte	0
 3265 0760 1E       		.uleb128 0x1e
 3266 0761 A2000000 		.4byte	.LVL34
 3267 0765 55130000 		.4byte	0x1355
 3268 0769 27       		.uleb128 0x27
 3269 076a 38010000 		.4byte	.LVL47
 3270 076e 60130000 		.4byte	0x1360
 3271 0772 7D070000 		.4byte	0x77d
 3272 0776 28       		.uleb128 0x28
 3273 0777 01       		.uleb128 0x1
 3274 0778 51       		.byte	0x51
 3275 0779 02       		.uleb128 0x2
 3276 077a 76       		.byte	0x76
 3277 077b 00       		.sleb128 0
 3278 077c 00       		.byte	0
 3279 077d 1E       		.uleb128 0x1e
 3280 077e 3C010000 		.4byte	.LVL48
 3281 0782 6C130000 		.4byte	0x136c
 3282 0786 00       		.byte	0
 3283 0787 1E       		.uleb128 0x1e
 3284 0788 52010000 		.4byte	.LVL49
 3285 078c 77130000 		.4byte	0x1377
 3286 0790 00       		.byte	0
 3287 0791 06       		.uleb128 0x6
 3288 0792 04       		.byte	0x4
 3289 0793 99010000 		.4byte	0x199
 3290 0797 1B       		.uleb128 0x1b
 3291 0798 3A030000 		.4byte	0x33a
 3292 079c 00000000 		.4byte	.LFB36
 3293 07a0 24000000 		.4byte	.LFE36-.LFB36
 3294 07a4 01       		.uleb128 0x1
 3295 07a5 9C       		.byte	0x9c
 3296 07a6 ED070000 		.4byte	0x7ed
 3297 07aa 1C       		.uleb128 0x1c
 3298 07ab 4B030000 		.4byte	0x34b
 3299 07af A3020000 		.4byte	.LLST17
 3300 07b3 26       		.uleb128 0x26
 3301 07b4 57030000 		.4byte	0x357
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 113


 3302 07b8 C4020000 		.4byte	.LLST18
 3303 07bc 26       		.uleb128 0x26
 3304 07bd 63030000 		.4byte	0x363
 3305 07c1 D8020000 		.4byte	.LLST19
 3306 07c5 2C       		.uleb128 0x2c
 3307 07c6 0C000000 		.4byte	.LBB28
 3308 07ca 08000000 		.4byte	.LBE28-.LBB28
 3309 07ce 1C       		.uleb128 0x1c
 3310 07cf 4B030000 		.4byte	0x34b
 3311 07d3 F9020000 		.4byte	.LLST20
 3312 07d7 2C       		.uleb128 0x2c
 3313 07d8 0C000000 		.4byte	.LBB29
 3314 07dc 08000000 		.4byte	.LBE29-.LBB29
 3315 07e0 2D       		.uleb128 0x2d
 3316 07e1 57030000 		.4byte	0x357
 3317 07e5 2D       		.uleb128 0x2d
 3318 07e6 63030000 		.4byte	0x363
 3319 07ea 00       		.byte	0
 3320 07eb 00       		.byte	0
 3321 07ec 00       		.byte	0
 3322 07ed 2E       		.uleb128 0x2e
 3323 07ee B1090000 		.4byte	.LASF71
 3324 07f2 01       		.byte	0x1
 3325 07f3 7504     		.2byte	0x475
 3326 07f5 00000000 		.4byte	.LFB37
 3327 07f9 5C000000 		.4byte	.LFE37-.LFB37
 3328 07fd 01       		.uleb128 0x1
 3329 07fe 9C       		.byte	0x9c
 3330 07ff 7B080000 		.4byte	0x87b
 3331 0803 21       		.uleb128 0x21
 3332 0804 FB010000 		.4byte	.LASF66
 3333 0808 01       		.byte	0x1
 3334 0809 7504     		.2byte	0x475
 3335 080b 99010000 		.4byte	0x199
 3336 080f 1A030000 		.4byte	.LLST21
 3337 0813 22       		.uleb128 0x22
 3338 0814 67090000 		.4byte	.LASF49
 3339 0818 01       		.byte	0x1
 3340 0819 7704     		.2byte	0x477
 3341 081b 7B080000 		.4byte	0x87b
 3342 081f 46030000 		.4byte	.LLST22
 3343 0823 1E       		.uleb128 0x1e
 3344 0824 12000000 		.4byte	.LVL58
 3345 0828 55130000 		.4byte	0x1355
 3346 082c 27       		.uleb128 0x27
 3347 082d 18000000 		.4byte	.LVL59
 3348 0831 3A030000 		.4byte	0x33a
 3349 0835 40080000 		.4byte	0x840
 3350 0839 28       		.uleb128 0x28
 3351 083a 01       		.uleb128 0x1
 3352 083b 50       		.byte	0x50
 3353 083c 02       		.uleb128 0x2
 3354 083d 74       		.byte	0x74
 3355 083e 00       		.sleb128 0
 3356 083f 00       		.byte	0
 3357 0840 27       		.uleb128 0x27
 3358 0841 24000000 		.4byte	.LVL60
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 114


 3359 0845 82130000 		.4byte	0x1382
 3360 0849 54080000 		.4byte	0x854
 3361 084d 28       		.uleb128 0x28
 3362 084e 01       		.uleb128 0x1
 3363 084f 50       		.byte	0x50
 3364 0850 02       		.uleb128 0x2
 3365 0851 76       		.byte	0x76
 3366 0852 00       		.sleb128 0
 3367 0853 00       		.byte	0
 3368 0854 27       		.uleb128 0x27
 3369 0855 40000000 		.4byte	.LVL61
 3370 0859 60130000 		.4byte	0x1360
 3371 085d 68080000 		.4byte	0x868
 3372 0861 28       		.uleb128 0x28
 3373 0862 01       		.uleb128 0x1
 3374 0863 51       		.byte	0x51
 3375 0864 02       		.uleb128 0x2
 3376 0865 76       		.byte	0x76
 3377 0866 00       		.sleb128 0
 3378 0867 00       		.byte	0
 3379 0868 1E       		.uleb128 0x1e
 3380 0869 4E000000 		.4byte	.LVL62
 3381 086d 77130000 		.4byte	0x1377
 3382 0871 1E       		.uleb128 0x1e
 3383 0872 52000000 		.4byte	.LVL63
 3384 0876 6C130000 		.4byte	0x136c
 3385 087a 00       		.byte	0
 3386 087b 0B       		.uleb128 0xb
 3387 087c 0A030000 		.4byte	0x30a
 3388 0880 20       		.uleb128 0x20
 3389 0881 E9020000 		.4byte	.LASF68
 3390 0885 01       		.byte	0x1
 3391 0886 9F04     		.2byte	0x49f
 3392 0888 5A000000 		.4byte	0x5a
 3393 088c 00000000 		.4byte	.LFB38
 3394 0890 68000000 		.4byte	.LFE38-.LFB38
 3395 0894 01       		.uleb128 0x1
 3396 0895 9C       		.byte	0x9c
 3397 0896 27090000 		.4byte	0x927
 3398 089a 21       		.uleb128 0x21
 3399 089b FB010000 		.4byte	.LASF66
 3400 089f 01       		.byte	0x1
 3401 08a0 9F04     		.2byte	0x49f
 3402 08a2 99010000 		.4byte	0x199
 3403 08a6 72030000 		.4byte	.LLST23
 3404 08aa 22       		.uleb128 0x22
 3405 08ab 43020000 		.4byte	.LASF69
 3406 08af 01       		.byte	0x1
 3407 08b0 A104     		.2byte	0x4a1
 3408 08b2 5A000000 		.4byte	0x5a
 3409 08b6 9E030000 		.4byte	.LLST24
 3410 08ba 22       		.uleb128 0x22
 3411 08bb 67090000 		.4byte	.LASF49
 3412 08bf 01       		.byte	0x1
 3413 08c0 A204     		.2byte	0x4a2
 3414 08c2 7B080000 		.4byte	0x87b
 3415 08c6 DF030000 		.4byte	.LLST25
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 115


 3416 08ca 22       		.uleb128 0x22
 3417 08cb 1F020000 		.4byte	.LASF70
 3418 08cf 01       		.byte	0x1
 3419 08d0 A304     		.2byte	0x4a3
 3420 08d2 61000000 		.4byte	0x61
 3421 08d6 0B040000 		.4byte	.LLST26
 3422 08da 1E       		.uleb128 0x1e
 3423 08db 08000000 		.4byte	.LVL67
 3424 08df 8E130000 		.4byte	0x138e
 3425 08e3 27       		.uleb128 0x27
 3426 08e4 10000000 		.4byte	.LVL70
 3427 08e8 3A030000 		.4byte	0x33a
 3428 08ec F7080000 		.4byte	0x8f7
 3429 08f0 28       		.uleb128 0x28
 3430 08f1 01       		.uleb128 0x1
 3431 08f2 50       		.byte	0x50
 3432 08f3 02       		.uleb128 0x2
 3433 08f4 74       		.byte	0x74
 3434 08f5 00       		.sleb128 0
 3435 08f6 00       		.byte	0
 3436 08f7 27       		.uleb128 0x27
 3437 08f8 34000000 		.4byte	.LVL72
 3438 08fc 82130000 		.4byte	0x1382
 3439 0900 0C090000 		.4byte	0x90c
 3440 0904 28       		.uleb128 0x28
 3441 0905 01       		.uleb128 0x1
 3442 0906 50       		.byte	0x50
 3443 0907 03       		.uleb128 0x3
 3444 0908 91       		.byte	0x91
 3445 0909 64       		.sleb128 -28
 3446 090a 06       		.byte	0x6
 3447 090b 00       		.byte	0
 3448 090c 1E       		.uleb128 0x1e
 3449 090d 56000000 		.4byte	.LVL75
 3450 0911 60130000 		.4byte	0x1360
 3451 0915 29       		.uleb128 0x29
 3452 0916 5C000000 		.4byte	.LVL76
 3453 091a 99130000 		.4byte	0x1399
 3454 091e 28       		.uleb128 0x28
 3455 091f 01       		.uleb128 0x1
 3456 0920 50       		.byte	0x50
 3457 0921 03       		.uleb128 0x3
 3458 0922 7D       		.byte	0x7d
 3459 0923 00       		.sleb128 0
 3460 0924 06       		.byte	0x6
 3461 0925 00       		.byte	0
 3462 0926 00       		.byte	0
 3463 0927 2E       		.uleb128 0x2e
 3464 0928 E3070000 		.4byte	.LASF72
 3465 092c 01       		.byte	0x1
 3466 092d DA04     		.2byte	0x4da
 3467 092f 00000000 		.4byte	.LFB39
 3468 0933 3C000000 		.4byte	.LFE39-.LFB39
 3469 0937 01       		.uleb128 0x1
 3470 0938 9C       		.byte	0x9c
 3471 0939 9F090000 		.4byte	0x99f
 3472 093d 22       		.uleb128 0x22
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 116


 3473 093e 9A070000 		.4byte	.LASF57
 3474 0942 01       		.byte	0x1
 3475 0943 DC04     		.2byte	0x4dc
 3476 0945 5A000000 		.4byte	0x5a
 3477 0949 2A040000 		.4byte	.LLST27
 3478 094d 27       		.uleb128 0x27
 3479 094e 18000000 		.4byte	.LVL79
 3480 0952 A3040000 		.4byte	0x4a3
 3481 0956 95090000 		.4byte	0x995
 3482 095a 28       		.uleb128 0x28
 3483 095b 01       		.uleb128 0x1
 3484 095c 50       		.byte	0x50
 3485 095d 05       		.uleb128 0x5
 3486 095e 03       		.byte	0x3
 3487 095f 00000000 		.4byte	prvIdleTask
 3488 0963 28       		.uleb128 0x28
 3489 0964 01       		.uleb128 0x1
 3490 0965 51       		.byte	0x51
 3491 0966 05       		.uleb128 0x5
 3492 0967 03       		.byte	0x3
 3493 0968 00000000 		.4byte	.LC24
 3494 096c 28       		.uleb128 0x28
 3495 096d 01       		.uleb128 0x1
 3496 096e 52       		.byte	0x52
 3497 096f 02       		.uleb128 0x2
 3498 0970 08       		.byte	0x8
 3499 0971 32       		.byte	0x32
 3500 0972 28       		.uleb128 0x28
 3501 0973 01       		.uleb128 0x1
 3502 0974 53       		.byte	0x53
 3503 0975 02       		.uleb128 0x2
 3504 0976 74       		.byte	0x74
 3505 0977 00       		.sleb128 0
 3506 0978 28       		.uleb128 0x28
 3507 0979 02       		.uleb128 0x2
 3508 097a 7D       		.byte	0x7d
 3509 097b 00       		.sleb128 0
 3510 097c 02       		.uleb128 0x2
 3511 097d 74       		.byte	0x74
 3512 097e 00       		.sleb128 0
 3513 097f 28       		.uleb128 0x28
 3514 0980 02       		.uleb128 0x2
 3515 0981 7D       		.byte	0x7d
 3516 0982 04       		.sleb128 4
 3517 0983 02       		.uleb128 0x2
 3518 0984 74       		.byte	0x74
 3519 0985 00       		.sleb128 0
 3520 0986 28       		.uleb128 0x28
 3521 0987 02       		.uleb128 0x2
 3522 0988 7D       		.byte	0x7d
 3523 0989 08       		.sleb128 8
 3524 098a 02       		.uleb128 0x2
 3525 098b 74       		.byte	0x74
 3526 098c 00       		.sleb128 0
 3527 098d 28       		.uleb128 0x28
 3528 098e 02       		.uleb128 0x2
 3529 098f 7D       		.byte	0x7d
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 117


 3530 0990 0C       		.sleb128 12
 3531 0991 02       		.uleb128 0x2
 3532 0992 74       		.byte	0x74
 3533 0993 00       		.sleb128 0
 3534 0994 00       		.byte	0
 3535 0995 1E       		.uleb128 0x1e
 3536 0996 2A000000 		.4byte	.LVL80
 3537 099a A4130000 		.4byte	0x13a4
 3538 099e 00       		.byte	0
 3539 099f 2E       		.uleb128 0x2e
 3540 09a0 79030000 		.4byte	.LASF73
 3541 09a4 01       		.byte	0x1
 3542 09a5 2405     		.2byte	0x524
 3543 09a7 00000000 		.4byte	.LFB40
 3544 09ab 14000000 		.4byte	.LFE40-.LFB40
 3545 09af 01       		.uleb128 0x1
 3546 09b0 9C       		.byte	0x9c
 3547 09b1 BF090000 		.4byte	0x9bf
 3548 09b5 1E       		.uleb128 0x1e
 3549 09b6 0E000000 		.4byte	.LVL81
 3550 09ba B0130000 		.4byte	0x13b0
 3551 09be 00       		.byte	0
 3552 09bf 2F       		.uleb128 0x2f
 3553 09c0 09030000 		.4byte	.LASF100
 3554 09c4 01       		.byte	0x1
 3555 09c5 2F05     		.2byte	0x52f
 3556 09c7 00000000 		.4byte	.LFB41
 3557 09cb 10000000 		.4byte	.LFE41-.LFB41
 3558 09cf 01       		.uleb128 0x1
 3559 09d0 9C       		.byte	0x9c
 3560 09d1 20       		.uleb128 0x20
 3561 09d2 4E040000 		.4byte	.LASF74
 3562 09d6 01       		.byte	0x1
 3563 09d7 9B05     		.2byte	0x59b
 3564 09d9 B6000000 		.4byte	0xb6
 3565 09dd 00000000 		.4byte	.LFB43
 3566 09e1 18000000 		.4byte	.LFE43-.LFB43
 3567 09e5 01       		.uleb128 0x1
 3568 09e6 9C       		.byte	0x9c
 3569 09e7 0E0A0000 		.4byte	0xa0e
 3570 09eb 22       		.uleb128 0x22
 3571 09ec DC070000 		.4byte	.LASF75
 3572 09f0 01       		.byte	0x1
 3573 09f1 9D05     		.2byte	0x59d
 3574 09f3 B6000000 		.4byte	0xb6
 3575 09f7 3D040000 		.4byte	.LLST28
 3576 09fb 1E       		.uleb128 0x1e
 3577 09fc 06000000 		.4byte	.LVL82
 3578 0a00 55130000 		.4byte	0x1355
 3579 0a04 1E       		.uleb128 0x1e
 3580 0a05 0E000000 		.4byte	.LVL84
 3581 0a09 6C130000 		.4byte	0x136c
 3582 0a0d 00       		.byte	0
 3583 0a0e 20       		.uleb128 0x20
 3584 0a0f 9E020000 		.4byte	.LASF76
 3585 0a13 01       		.byte	0x1
 3586 0a14 AA05     		.2byte	0x5aa
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 118


 3587 0a16 B6000000 		.4byte	0xb6
 3588 0a1a 00000000 		.4byte	.LFB44
 3589 0a1e 18000000 		.4byte	.LFE44-.LFB44
 3590 0a22 01       		.uleb128 0x1
 3591 0a23 9C       		.byte	0x9c
 3592 0a24 5B0A0000 		.4byte	0xa5b
 3593 0a28 22       		.uleb128 0x22
 3594 0a29 9A070000 		.4byte	.LASF57
 3595 0a2d 01       		.byte	0x1
 3596 0a2e AC05     		.2byte	0x5ac
 3597 0a30 B6000000 		.4byte	0xb6
 3598 0a34 5B040000 		.4byte	.LLST29
 3599 0a38 22       		.uleb128 0x22
 3600 0a39 1F020000 		.4byte	.LASF70
 3601 0a3d 01       		.byte	0x1
 3602 0a3e AD05     		.2byte	0x5ad
 3603 0a40 61000000 		.4byte	0x61
 3604 0a44 79040000 		.4byte	.LLST30
 3605 0a48 1E       		.uleb128 0x1e
 3606 0a49 06000000 		.4byte	.LVL86
 3607 0a4d 8E130000 		.4byte	0x138e
 3608 0a51 1E       		.uleb128 0x1e
 3609 0a52 0E000000 		.4byte	.LVL88
 3610 0a56 99130000 		.4byte	0x1399
 3611 0a5a 00       		.byte	0
 3612 0a5b 30       		.uleb128 0x30
 3613 0a5c 77000000 		.4byte	.LASF156
 3614 0a60 01       		.byte	0x1
 3615 0a61 C705     		.2byte	0x5c7
 3616 0a63 61000000 		.4byte	0x61
 3617 0a67 00000000 		.4byte	.LFB45
 3618 0a6b 0C000000 		.4byte	.LFE45-.LFB45
 3619 0a6f 01       		.uleb128 0x1
 3620 0a70 9C       		.byte	0x9c
 3621 0a71 20       		.uleb128 0x20
 3622 0a72 6D010000 		.4byte	.LASF77
 3623 0a76 01       		.byte	0x1
 3624 0a77 4406     		.2byte	0x644
 3625 0a79 5A000000 		.4byte	0x5a
 3626 0a7d 00000000 		.4byte	.LFB46
 3627 0a81 FC000000 		.4byte	.LFE46-.LFB46
 3628 0a85 01       		.uleb128 0x1
 3629 0a86 9C       		.byte	0x9c
 3630 0a87 3F0B0000 		.4byte	0xb3f
 3631 0a8b 22       		.uleb128 0x22
 3632 0a8c 67090000 		.4byte	.LASF49
 3633 0a90 01       		.byte	0x1
 3634 0a91 4606     		.2byte	0x646
 3635 0a93 0A030000 		.4byte	0x30a
 3636 0a97 8C040000 		.4byte	.LLST31
 3637 0a9b 22       		.uleb128 0x22
 3638 0a9c 42060000 		.4byte	.LASF16
 3639 0aa0 01       		.byte	0x1
 3640 0aa1 4706     		.2byte	0x647
 3641 0aa3 B6000000 		.4byte	0xb6
 3642 0aa7 C5040000 		.4byte	.LLST32
 3643 0aab 22       		.uleb128 0x22
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 119


 3644 0aac 89060000 		.4byte	.LASF78
 3645 0ab0 01       		.byte	0x1
 3646 0ab1 4806     		.2byte	0x648
 3647 0ab3 5A000000 		.4byte	0x5a
 3648 0ab7 E4040000 		.4byte	.LLST33
 3649 0abb 31       		.uleb128 0x31
 3650 0abc 18000000 		.4byte	.Ldebug_ranges0+0x18
 3651 0ac0 2C0B0000 		.4byte	0xb2c
 3652 0ac4 22       		.uleb128 0x22
 3653 0ac5 9A030000 		.4byte	.LASF79
 3654 0ac9 01       		.byte	0x1
 3655 0aca 5706     		.2byte	0x657
 3656 0acc 3F0B0000 		.4byte	0xb3f
 3657 0ad0 30050000 		.4byte	.LLST34
 3658 0ad4 1D       		.uleb128 0x1d
 3659 0ad5 1E000000 		.4byte	.LBB31
 3660 0ad9 26000000 		.4byte	.LBE31-.LBB31
 3661 0add F20A0000 		.4byte	0xaf2
 3662 0ae1 22       		.uleb128 0x22
 3663 0ae2 0D080000 		.4byte	.LASF80
 3664 0ae6 01       		.byte	0x1
 3665 0ae7 5B06     		.2byte	0x65b
 3666 0ae9 DD030000 		.4byte	0x3dd
 3667 0aed 66050000 		.4byte	.LLST35
 3668 0af1 00       		.byte	0
 3669 0af2 27       		.uleb128 0x27
 3670 0af3 B4000000 		.4byte	.LVL111
 3671 0af7 82130000 		.4byte	0x1382
 3672 0afb 070B0000 		.4byte	0xb07
 3673 0aff 28       		.uleb128 0x28
 3674 0b00 01       		.uleb128 0x1
 3675 0b01 50       		.byte	0x50
 3676 0b02 03       		.uleb128 0x3
 3677 0b03 91       		.byte	0x91
 3678 0b04 64       		.sleb128 -28
 3679 0b05 06       		.byte	0x6
 3680 0b06 00       		.byte	0
 3681 0b07 27       		.uleb128 0x27
 3682 0b08 C2000000 		.4byte	.LVL112
 3683 0b0c 82130000 		.4byte	0x1382
 3684 0b10 1B0B0000 		.4byte	0xb1b
 3685 0b14 28       		.uleb128 0x28
 3686 0b15 01       		.uleb128 0x1
 3687 0b16 50       		.byte	0x50
 3688 0b17 02       		.uleb128 0x2
 3689 0b18 75       		.byte	0x75
 3690 0b19 18       		.sleb128 24
 3691 0b1a 00       		.byte	0
 3692 0b1b 29       		.uleb128 0x29
 3693 0b1c DC000000 		.4byte	.LVL113
 3694 0b20 60130000 		.4byte	0x1360
 3695 0b24 28       		.uleb128 0x28
 3696 0b25 01       		.uleb128 0x1
 3697 0b26 51       		.byte	0x51
 3698 0b27 02       		.uleb128 0x2
 3699 0b28 75       		.byte	0x75
 3700 0b29 04       		.sleb128 4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 120


 3701 0b2a 00       		.byte	0
 3702 0b2b 00       		.byte	0
 3703 0b2c 1E       		.uleb128 0x1e
 3704 0b2d 7E000000 		.4byte	.LVL103
 3705 0b31 BC130000 		.4byte	0x13bc
 3706 0b35 1E       		.uleb128 0x1e
 3707 0b36 8C000000 		.4byte	.LVL105
 3708 0b3a BC130000 		.4byte	0x13bc
 3709 0b3e 00       		.byte	0
 3710 0b3f 0B       		.uleb128 0xb
 3711 0b40 B6000000 		.4byte	0xb6
 3712 0b44 20       		.uleb128 0x20
 3713 0b45 5E060000 		.4byte	.LASF81
 3714 0b49 01       		.byte	0x1
 3715 0b4a 5305     		.2byte	0x553
 3716 0b4c 5A000000 		.4byte	0x5a
 3717 0b50 00000000 		.4byte	.LFB42
 3718 0b54 A0000000 		.4byte	.LFE42-.LFB42
 3719 0b58 01       		.uleb128 0x1
 3720 0b59 9C       		.byte	0x9c
 3721 0b5a DF0B0000 		.4byte	0xbdf
 3722 0b5e 22       		.uleb128 0x22
 3723 0b5f 67090000 		.4byte	.LASF49
 3724 0b63 01       		.byte	0x1
 3725 0b64 5505     		.2byte	0x555
 3726 0b66 0A030000 		.4byte	0x30a
 3727 0b6a 88050000 		.4byte	.LLST36
 3728 0b6e 22       		.uleb128 0x22
 3729 0b6f 9C080000 		.4byte	.LASF82
 3730 0b73 01       		.byte	0x1
 3731 0b74 5605     		.2byte	0x556
 3732 0b76 5A000000 		.4byte	0x5a
 3733 0b7a 9B050000 		.4byte	.LLST37
 3734 0b7e 1E       		.uleb128 0x1e
 3735 0b7f 06000000 		.4byte	.LVL118
 3736 0b83 55130000 		.4byte	0x1355
 3737 0b87 27       		.uleb128 0x27
 3738 0b88 34000000 		.4byte	.LVL120
 3739 0b8c 82130000 		.4byte	0x1382
 3740 0b90 9B0B0000 		.4byte	0xb9b
 3741 0b94 28       		.uleb128 0x28
 3742 0b95 01       		.uleb128 0x1
 3743 0b96 50       		.byte	0x50
 3744 0b97 02       		.uleb128 0x2
 3745 0b98 76       		.byte	0x76
 3746 0b99 18       		.sleb128 24
 3747 0b9a 00       		.byte	0
 3748 0b9b 27       		.uleb128 0x27
 3749 0b9c 3A000000 		.4byte	.LVL121
 3750 0ba0 82130000 		.4byte	0x1382
 3751 0ba4 AF0B0000 		.4byte	0xbaf
 3752 0ba8 28       		.uleb128 0x28
 3753 0ba9 01       		.uleb128 0x1
 3754 0baa 50       		.byte	0x50
 3755 0bab 02       		.uleb128 0x2
 3756 0bac 77       		.byte	0x77
 3757 0bad 00       		.sleb128 0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 121


 3758 0bae 00       		.byte	0
 3759 0baf 27       		.uleb128 0x27
 3760 0bb0 54000000 		.4byte	.LVL122
 3761 0bb4 60130000 		.4byte	0x1360
 3762 0bb8 C30B0000 		.4byte	0xbc3
 3763 0bbc 28       		.uleb128 0x28
 3764 0bbd 01       		.uleb128 0x1
 3765 0bbe 51       		.byte	0x51
 3766 0bbf 02       		.uleb128 0x2
 3767 0bc0 77       		.byte	0x77
 3768 0bc1 00       		.sleb128 0
 3769 0bc2 00       		.byte	0
 3770 0bc3 1E       		.uleb128 0x1e
 3771 0bc4 74000000 		.4byte	.LVL125
 3772 0bc8 77130000 		.4byte	0x1377
 3773 0bcc 1E       		.uleb128 0x1e
 3774 0bcd 82000000 		.4byte	.LVL127
 3775 0bd1 710A0000 		.4byte	0xa71
 3776 0bd5 1E       		.uleb128 0x1e
 3777 0bd6 94000000 		.4byte	.LVL129
 3778 0bda 6C130000 		.4byte	0x136c
 3779 0bde 00       		.byte	0
 3780 0bdf 2E       		.uleb128 0x2e
 3781 0be0 4D080000 		.4byte	.LASF83
 3782 0be4 01       		.byte	0x1
 3783 0be5 B902     		.2byte	0x2b9
 3784 0be7 00000000 		.4byte	.LFB33
 3785 0beb 50000000 		.4byte	.LFE33-.LFB33
 3786 0bef 01       		.uleb128 0x1
 3787 0bf0 9C       		.byte	0x9c
 3788 0bf1 940C0000 		.4byte	0xc94
 3789 0bf5 21       		.uleb128 0x21
 3790 0bf6 87070000 		.4byte	.LASF84
 3791 0bfa 01       		.byte	0x1
 3792 0bfb B902     		.2byte	0x2b9
 3793 0bfd 9A0C0000 		.4byte	0xc9a
 3794 0c01 DD050000 		.4byte	.LLST38
 3795 0c05 21       		.uleb128 0x21
 3796 0c06 2D090000 		.4byte	.LASF85
 3797 0c0a 01       		.byte	0x1
 3798 0c0b B902     		.2byte	0x2b9
 3799 0c0d B6000000 		.4byte	0xb6
 3800 0c11 09060000 		.4byte	.LLST39
 3801 0c15 22       		.uleb128 0x22
 3802 0c16 5B090000 		.4byte	.LASF55
 3803 0c1a 01       		.byte	0x1
 3804 0c1b BB02     		.2byte	0x2bb
 3805 0c1d B6000000 		.4byte	0xb6
 3806 0c21 35060000 		.4byte	.LLST40
 3807 0c25 22       		.uleb128 0x22
 3808 0c26 9C080000 		.4byte	.LASF82
 3809 0c2a 01       		.byte	0x1
 3810 0c2b BC02     		.2byte	0x2bc
 3811 0c2d 5A000000 		.4byte	0x5a
 3812 0c31 48060000 		.4byte	.LLST41
 3813 0c35 22       		.uleb128 0x22
 3814 0c36 5C050000 		.4byte	.LASF86
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 122


 3815 0c3a 01       		.byte	0x1
 3816 0c3b BC02     		.2byte	0x2bc
 3817 0c3d 5A000000 		.4byte	0x5a
 3818 0c41 5B060000 		.4byte	.LLST42
 3819 0c45 31       		.uleb128 0x31
 3820 0c46 38000000 		.4byte	.Ldebug_ranges0+0x38
 3821 0c4a 780C0000 		.4byte	0xc78
 3822 0c4e 22       		.uleb128 0x22
 3823 0c4f 9A030000 		.4byte	.LASF79
 3824 0c53 01       		.byte	0x1
 3825 0c54 C502     		.2byte	0x2c5
 3826 0c56 3F0B0000 		.4byte	0xb3f
 3827 0c5a 6F060000 		.4byte	.LLST43
 3828 0c5e 1E       		.uleb128 0x1e
 3829 0c5f 38000000 		.4byte	.LVL137
 3830 0c63 82130000 		.4byte	0x1382
 3831 0c67 29       		.uleb128 0x29
 3832 0c68 3E000000 		.4byte	.LVL138
 3833 0c6c 20030000 		.4byte	0x320
 3834 0c70 28       		.uleb128 0x28
 3835 0c71 01       		.uleb128 0x1
 3836 0c72 50       		.byte	0x50
 3837 0c73 02       		.uleb128 0x2
 3838 0c74 74       		.byte	0x74
 3839 0c75 00       		.sleb128 0
 3840 0c76 00       		.byte	0
 3841 0c77 00       		.byte	0
 3842 0c78 1E       		.uleb128 0x1e
 3843 0c79 0A000000 		.4byte	.LVL132
 3844 0c7d BF090000 		.4byte	0x9bf
 3845 0c81 1E       		.uleb128 0x1e
 3846 0c82 42000000 		.4byte	.LVL139
 3847 0c86 440B0000 		.4byte	0xb44
 3848 0c8a 1E       		.uleb128 0x1e
 3849 0c8b 4A000000 		.4byte	.LVL140
 3850 0c8f 77130000 		.4byte	0x1377
 3851 0c93 00       		.byte	0
 3852 0c94 06       		.uleb128 0x6
 3853 0c95 04       		.byte	0x4
 3854 0c96 B6000000 		.4byte	0xb6
 3855 0c9a 0B       		.uleb128 0xb
 3856 0c9b 940C0000 		.4byte	0xc94
 3857 0c9f 2E       		.uleb128 0x2e
 3858 0ca0 DA030000 		.4byte	.LASF87
 3859 0ca4 01       		.byte	0x1
 3860 0ca5 0503     		.2byte	0x305
 3861 0ca7 00000000 		.4byte	.LFB34
 3862 0cab 34000000 		.4byte	.LFE34-.LFB34
 3863 0caf 01       		.uleb128 0x1
 3864 0cb0 9C       		.byte	0x9c
 3865 0cb1 1E0D0000 		.4byte	0xd1e
 3866 0cb5 21       		.uleb128 0x21
 3867 0cb6 13050000 		.4byte	.LASF88
 3868 0cba 01       		.byte	0x1
 3869 0cbb 0503     		.2byte	0x305
 3870 0cbd B6000000 		.4byte	0xb6
 3871 0cc1 82060000 		.4byte	.LLST44
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 123


 3872 0cc5 22       		.uleb128 0x22
 3873 0cc6 5B090000 		.4byte	.LASF55
 3874 0cca 01       		.byte	0x1
 3875 0ccb 0703     		.2byte	0x307
 3876 0ccd B6000000 		.4byte	0xb6
 3877 0cd1 C7060000 		.4byte	.LLST45
 3878 0cd5 22       		.uleb128 0x22
 3879 0cd6 9C080000 		.4byte	.LASF82
 3880 0cda 01       		.byte	0x1
 3881 0cdb 0803     		.2byte	0x308
 3882 0cdd 5A000000 		.4byte	0x5a
 3883 0ce1 DA060000 		.4byte	.LLST46
 3884 0ce5 1E       		.uleb128 0x1e
 3885 0ce6 0A000000 		.4byte	.LVL145
 3886 0cea 77130000 		.4byte	0x1377
 3887 0cee 1E       		.uleb128 0x1e
 3888 0cef 10000000 		.4byte	.LVL147
 3889 0cf3 BF090000 		.4byte	0x9bf
 3890 0cf7 1E       		.uleb128 0x1e
 3891 0cf8 1E000000 		.4byte	.LVL149
 3892 0cfc 82130000 		.4byte	0x1382
 3893 0d00 27       		.uleb128 0x27
 3894 0d01 24000000 		.4byte	.LVL150
 3895 0d05 20030000 		.4byte	0x320
 3896 0d09 140D0000 		.4byte	0xd14
 3897 0d0d 28       		.uleb128 0x28
 3898 0d0e 01       		.uleb128 0x1
 3899 0d0f 50       		.byte	0x50
 3900 0d10 02       		.uleb128 0x2
 3901 0d11 74       		.byte	0x74
 3902 0d12 00       		.sleb128 0
 3903 0d13 00       		.byte	0
 3904 0d14 1E       		.uleb128 0x1e
 3905 0d15 28000000 		.4byte	.LVL151
 3906 0d19 440B0000 		.4byte	0xb44
 3907 0d1d 00       		.byte	0
 3908 0d1e 1B       		.uleb128 0x1b
 3909 0d1f 80030000 		.4byte	0x380
 3910 0d23 00000000 		.4byte	.LFB47
 3911 0d27 90000000 		.4byte	.LFE47-.LFB47
 3912 0d2b 01       		.uleb128 0x1
 3913 0d2c 9C       		.byte	0x9c
 3914 0d2d 900D0000 		.4byte	0xd90
 3915 0d31 1D       		.uleb128 0x1d
 3916 0d32 2C000000 		.4byte	.LBB43
 3917 0d36 1A000000 		.4byte	.LBE43-.LBB43
 3918 0d3a 6F0D0000 		.4byte	0xd6f
 3919 0d3e 32       		.uleb128 0x32
 3920 0d3f 92030000 		.4byte	0x392
 3921 0d43 05       		.uleb128 0x5
 3922 0d44 03       		.byte	0x3
 3923 0d45 00000000 		.4byte	ucExpectedStackBytes.6737
 3924 0d49 27       		.uleb128 0x27
 3925 0d4a 38000000 		.4byte	.LVL154
 3926 0d4e C8130000 		.4byte	0x13c8
 3927 0d52 650D0000 		.4byte	0xd65
 3928 0d56 28       		.uleb128 0x28
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 124


 3929 0d57 01       		.uleb128 0x1
 3930 0d58 51       		.byte	0x51
 3931 0d59 05       		.uleb128 0x5
 3932 0d5a 03       		.byte	0x3
 3933 0d5b 00000000 		.4byte	.LANCHOR3
 3934 0d5f 28       		.uleb128 0x28
 3935 0d60 01       		.uleb128 0x1
 3936 0d61 52       		.byte	0x52
 3937 0d62 01       		.uleb128 0x1
 3938 0d63 44       		.byte	0x44
 3939 0d64 00       		.byte	0
 3940 0d65 1E       		.uleb128 0x1e
 3941 0d66 46000000 		.4byte	.LVL155
 3942 0d6a D3130000 		.4byte	0x13d3
 3943 0d6e 00       		.byte	0
 3944 0d6f 1D       		.uleb128 0x1d
 3945 0d70 5C000000 		.4byte	.LBB44
 3946 0d74 26000000 		.4byte	.LBE44-.LBB44
 3947 0d78 860D0000 		.4byte	0xd86
 3948 0d7c 26       		.uleb128 0x26
 3949 0d7d B5030000 		.4byte	0x3b5
 3950 0d81 05070000 		.4byte	.LLST47
 3951 0d85 00       		.byte	0
 3952 0d86 1E       		.uleb128 0x1e
 3953 0d87 2C000000 		.4byte	.LVL153
 3954 0d8b D3130000 		.4byte	0x13d3
 3955 0d8f 00       		.byte	0
 3956 0d90 2E       		.uleb128 0x2e
 3957 0d91 8F080000 		.4byte	.LASF89
 3958 0d95 01       		.byte	0x1
 3959 0d96 1604     		.2byte	0x416
 3960 0d98 00000000 		.4byte	.LFB35
 3961 0d9c 64000000 		.4byte	.LFE35-.LFB35
 3962 0da0 01       		.uleb128 0x1
 3963 0da1 9C       		.byte	0x9c
 3964 0da2 2D0E0000 		.4byte	0xe2d
 3965 0da6 21       		.uleb128 0x21
 3966 0da7 47070000 		.4byte	.LASF90
 3967 0dab 01       		.byte	0x1
 3968 0dac 1604     		.2byte	0x416
 3969 0dae 99010000 		.4byte	0x199
 3970 0db2 22070000 		.4byte	.LLST48
 3971 0db6 22       		.uleb128 0x22
 3972 0db7 67090000 		.4byte	.LASF49
 3973 0dbb 01       		.byte	0x1
 3974 0dbc 1804     		.2byte	0x418
 3975 0dbe 0A030000 		.4byte	0x30a
 3976 0dc2 40070000 		.4byte	.LLST49
 3977 0dc6 1E       		.uleb128 0x1e
 3978 0dc7 08000000 		.4byte	.LVL159
 3979 0dcb 55130000 		.4byte	0x1355
 3980 0dcf 27       		.uleb128 0x27
 3981 0dd0 18000000 		.4byte	.LVL161
 3982 0dd4 82130000 		.4byte	0x1382
 3983 0dd8 E30D0000 		.4byte	0xde3
 3984 0ddc 28       		.uleb128 0x28
 3985 0ddd 01       		.uleb128 0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 125


 3986 0dde 50       		.byte	0x50
 3987 0ddf 02       		.uleb128 0x2
 3988 0de0 77       		.byte	0x77
 3989 0de1 00       		.sleb128 0
 3990 0de2 00       		.byte	0
 3991 0de3 27       		.uleb128 0x27
 3992 0de4 26000000 		.4byte	.LVL162
 3993 0de8 82130000 		.4byte	0x1382
 3994 0dec F70D0000 		.4byte	0xdf7
 3995 0df0 28       		.uleb128 0x28
 3996 0df1 01       		.uleb128 0x1
 3997 0df2 50       		.byte	0x50
 3998 0df3 02       		.uleb128 0x2
 3999 0df4 74       		.byte	0x74
 4000 0df5 18       		.sleb128 24
 4001 0df6 00       		.byte	0
 4002 0df7 27       		.uleb128 0x27
 4003 0df8 32000000 		.4byte	.LVL163
 4004 0dfc 60130000 		.4byte	0x1360
 4005 0e00 110E0000 		.4byte	0xe11
 4006 0e04 28       		.uleb128 0x28
 4007 0e05 01       		.uleb128 0x1
 4008 0e06 50       		.byte	0x50
 4009 0e07 02       		.uleb128 0x2
 4010 0e08 76       		.byte	0x76
 4011 0e09 20       		.sleb128 32
 4012 0e0a 28       		.uleb128 0x28
 4013 0e0b 01       		.uleb128 0x1
 4014 0e0c 51       		.byte	0x51
 4015 0e0d 02       		.uleb128 0x2
 4016 0e0e 77       		.byte	0x77
 4017 0e0f 00       		.sleb128 0
 4018 0e10 00       		.byte	0
 4019 0e11 1E       		.uleb128 0x1e
 4020 0e12 36000000 		.4byte	.LVL164
 4021 0e16 6C130000 		.4byte	0x136c
 4022 0e1a 1E       		.uleb128 0x1e
 4023 0e1b 46000000 		.4byte	.LVL165
 4024 0e1f 77130000 		.4byte	0x1377
 4025 0e23 1E       		.uleb128 0x1e
 4026 0e24 58000000 		.4byte	.LVL166
 4027 0e28 80030000 		.4byte	0x380
 4028 0e2c 00       		.byte	0
 4029 0e2d 2E       		.uleb128 0x2e
 4030 0e2e C4030000 		.4byte	.LASF91
 4031 0e32 01       		.byte	0x1
 4032 0e33 6107     		.2byte	0x761
 4033 0e35 00000000 		.4byte	.LFB48
 4034 0e39 3C000000 		.4byte	.LFE48-.LFB48
 4035 0e3d 01       		.uleb128 0x1
 4036 0e3e 9C       		.byte	0x9c
 4037 0e3f B20E0000 		.4byte	0xeb2
 4038 0e43 21       		.uleb128 0x21
 4039 0e44 E9000000 		.4byte	.LASF92
 4040 0e48 01       		.byte	0x1
 4041 0e49 6107     		.2byte	0x761
 4042 0e4b E3030000 		.4byte	0x3e3
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 126


 4043 0e4f 60070000 		.4byte	.LLST50
 4044 0e53 21       		.uleb128 0x21
 4045 0e54 7A080000 		.4byte	.LASF93
 4046 0e58 01       		.byte	0x1
 4047 0e59 6107     		.2byte	0x761
 4048 0e5b B6000000 		.4byte	0xb6
 4049 0e5f 81070000 		.4byte	.LLST51
 4050 0e63 22       		.uleb128 0x22
 4051 0e64 5B090000 		.4byte	.LASF55
 4052 0e68 01       		.byte	0x1
 4053 0e69 6307     		.2byte	0x763
 4054 0e6b B6000000 		.4byte	0xb6
 4055 0e6f AD070000 		.4byte	.LLST52
 4056 0e73 27       		.uleb128 0x27
 4057 0e74 0E000000 		.4byte	.LVL171
 4058 0e78 02130000 		.4byte	0x1302
 4059 0e7c 880E0000 		.4byte	0xe88
 4060 0e80 28       		.uleb128 0x28
 4061 0e81 01       		.uleb128 0x1
 4062 0e82 50       		.byte	0x50
 4063 0e83 03       		.uleb128 0x3
 4064 0e84 F3       		.byte	0xf3
 4065 0e85 01       		.uleb128 0x1
 4066 0e86 50       		.byte	0x50
 4067 0e87 00       		.byte	0
 4068 0e88 1E       		.uleb128 0x1e
 4069 0e89 16000000 		.4byte	.LVL172
 4070 0e8d 82130000 		.4byte	0x1382
 4071 0e91 27       		.uleb128 0x27
 4072 0e92 26000000 		.4byte	.LVL173
 4073 0e96 60130000 		.4byte	0x1360
 4074 0e9a A80E0000 		.4byte	0xea8
 4075 0e9e 28       		.uleb128 0x28
 4076 0e9f 01       		.uleb128 0x1
 4077 0ea0 50       		.byte	0x50
 4078 0ea1 05       		.uleb128 0x5
 4079 0ea2 03       		.byte	0x3
 4080 0ea3 A0000000 		.4byte	.LANCHOR2+32
 4081 0ea7 00       		.byte	0
 4082 0ea8 1E       		.uleb128 0x1e
 4083 0ea9 30000000 		.4byte	.LVL176
 4084 0ead 20030000 		.4byte	0x320
 4085 0eb1 00       		.byte	0
 4086 0eb2 20       		.uleb128 0x20
 4087 0eb3 E5030000 		.4byte	.LASF94
 4088 0eb7 01       		.byte	0x1
 4089 0eb8 BE07     		.2byte	0x7be
 4090 0eba 5A000000 		.4byte	0x5a
 4091 0ebe 00000000 		.4byte	.LFB49
 4092 0ec2 5C000000 		.4byte	.LFE49-.LFB49
 4093 0ec6 01       		.uleb128 0x1
 4094 0ec7 9C       		.byte	0x9c
 4095 0ec8 350F0000 		.4byte	0xf35
 4096 0ecc 21       		.uleb128 0x21
 4097 0ecd E9000000 		.4byte	.LASF92
 4098 0ed1 01       		.byte	0x1
 4099 0ed2 BE07     		.2byte	0x7be
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 127


 4100 0ed4 400F0000 		.4byte	0xf40
 4101 0ed8 D0070000 		.4byte	.LLST53
 4102 0edc 22       		.uleb128 0x22
 4103 0edd 58020000 		.4byte	.LASF95
 4104 0ee1 01       		.byte	0x1
 4105 0ee2 C007     		.2byte	0x7c0
 4106 0ee4 0A030000 		.4byte	0x30a
 4107 0ee8 F1070000 		.4byte	.LLST54
 4108 0eec 22       		.uleb128 0x22
 4109 0eed 9A070000 		.4byte	.LASF57
 4110 0ef1 01       		.byte	0x1
 4111 0ef2 C107     		.2byte	0x7c1
 4112 0ef4 5A000000 		.4byte	0x5a
 4113 0ef8 04080000 		.4byte	.LLST55
 4114 0efc 27       		.uleb128 0x27
 4115 0efd 10000000 		.4byte	.LVL181
 4116 0f01 82130000 		.4byte	0x1382
 4117 0f05 100F0000 		.4byte	0xf10
 4118 0f09 28       		.uleb128 0x28
 4119 0f0a 01       		.uleb128 0x1
 4120 0f0b 50       		.byte	0x50
 4121 0f0c 02       		.uleb128 0x2
 4122 0f0d 77       		.byte	0x77
 4123 0f0e 00       		.sleb128 0
 4124 0f0f 00       		.byte	0
 4125 0f10 27       		.uleb128 0x27
 4126 0f11 22000000 		.4byte	.LVL182
 4127 0f15 82130000 		.4byte	0x1382
 4128 0f19 240F0000 		.4byte	0xf24
 4129 0f1d 28       		.uleb128 0x28
 4130 0f1e 01       		.uleb128 0x1
 4131 0f1f 50       		.byte	0x50
 4132 0f20 02       		.uleb128 0x2
 4133 0f21 77       		.byte	0x77
 4134 0f22 00       		.sleb128 0
 4135 0f23 00       		.byte	0
 4136 0f24 29       		.uleb128 0x29
 4137 0f25 42000000 		.4byte	.LVL183
 4138 0f29 60130000 		.4byte	0x1360
 4139 0f2d 28       		.uleb128 0x28
 4140 0f2e 01       		.uleb128 0x1
 4141 0f2f 51       		.byte	0x51
 4142 0f30 02       		.uleb128 0x2
 4143 0f31 77       		.byte	0x77
 4144 0f32 00       		.sleb128 0
 4145 0f33 00       		.byte	0
 4146 0f34 00       		.byte	0
 4147 0f35 06       		.uleb128 0x6
 4148 0f36 04       		.byte	0x4
 4149 0f37 3B0F0000 		.4byte	0xf3b
 4150 0f3b 0B       		.uleb128 0xb
 4151 0f3c 8E010000 		.4byte	0x18e
 4152 0f40 0B       		.uleb128 0xb
 4153 0f41 350F0000 		.4byte	0xf35
 4154 0f45 2E       		.uleb128 0x2e
 4155 0f46 58010000 		.4byte	.LASF96
 4156 0f4a 01       		.byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 128


 4157 0f4b F507     		.2byte	0x7f5
 4158 0f4d 00000000 		.4byte	.LFB50
 4159 0f51 18000000 		.4byte	.LFE50-.LFB50
 4160 0f55 01       		.uleb128 0x1
 4161 0f56 9C       		.byte	0x9c
 4162 0f57 6A0F0000 		.4byte	0xf6a
 4163 0f5b 1A       		.uleb128 0x1a
 4164 0f5c 09050000 		.4byte	.LASF97
 4165 0f60 01       		.byte	0x1
 4166 0f61 F507     		.2byte	0x7f5
 4167 0f63 700F0000 		.4byte	0xf70
 4168 0f67 01       		.uleb128 0x1
 4169 0f68 50       		.byte	0x50
 4170 0f69 00       		.byte	0
 4171 0f6a 06       		.uleb128 0x6
 4172 0f6b 04       		.byte	0x4
 4173 0f6c C9010000 		.4byte	0x1c9
 4174 0f70 0B       		.uleb128 0xb
 4175 0f71 6A0F0000 		.4byte	0xf6a
 4176 0f75 20       		.uleb128 0x20
 4177 0f76 56070000 		.4byte	.LASF98
 4178 0f7a 01       		.byte	0x1
 4179 0f7b FD07     		.2byte	0x7fd
 4180 0f7d 5A000000 		.4byte	0x5a
 4181 0f81 00000000 		.4byte	.LFB51
 4182 0f85 50000000 		.4byte	.LFE51-.LFB51
 4183 0f89 01       		.uleb128 0x1
 4184 0f8a 9C       		.byte	0x9c
 4185 0f8b 00100000 		.4byte	0x1000
 4186 0f8f 21       		.uleb128 0x21
 4187 0f90 09050000 		.4byte	.LASF97
 4188 0f94 01       		.byte	0x1
 4189 0f95 FD07     		.2byte	0x7fd
 4190 0f97 700F0000 		.4byte	0xf70
 4191 0f9b 23080000 		.4byte	.LLST56
 4192 0f9f 21       		.uleb128 0x21
 4193 0fa0 48030000 		.4byte	.LASF99
 4194 0fa4 01       		.byte	0x1
 4195 0fa5 FD07     		.2byte	0x7fd
 4196 0fa7 9A0C0000 		.4byte	0xc9a
 4197 0fab 4F080000 		.4byte	.LLST57
 4198 0faf 22       		.uleb128 0x22
 4199 0fb0 9A070000 		.4byte	.LASF57
 4200 0fb4 01       		.byte	0x1
 4201 0fb5 FF07     		.2byte	0x7ff
 4202 0fb7 5A000000 		.4byte	0x5a
 4203 0fbb 7B080000 		.4byte	.LLST58
 4204 0fbf 1D       		.uleb128 0x1d
 4205 0fc0 0A000000 		.4byte	.LBB45
 4206 0fc4 34000000 		.4byte	.LBE45-.LBB45
 4207 0fc8 ED0F0000 		.4byte	0xfed
 4208 0fcc 22       		.uleb128 0x22
 4209 0fcd 9A030000 		.4byte	.LASF79
 4210 0fd1 01       		.byte	0x1
 4211 0fd2 0708     		.2byte	0x807
 4212 0fd4 3F0B0000 		.4byte	0xb3f
 4213 0fd8 A5080000 		.4byte	.LLST59
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 129


 4214 0fdc 29       		.uleb128 0x29
 4215 0fdd 3C000000 		.4byte	.LVL191
 4216 0fe1 450F0000 		.4byte	0xf45
 4217 0fe5 28       		.uleb128 0x28
 4218 0fe6 01       		.uleb128 0x1
 4219 0fe7 50       		.byte	0x50
 4220 0fe8 02       		.uleb128 0x2
 4221 0fe9 74       		.byte	0x74
 4222 0fea 00       		.sleb128 0
 4223 0feb 00       		.byte	0
 4224 0fec 00       		.byte	0
 4225 0fed 1E       		.uleb128 0x1e
 4226 0fee 0A000000 		.4byte	.LVL189
 4227 0ff2 55130000 		.4byte	0x1355
 4228 0ff6 1E       		.uleb128 0x1e
 4229 0ff7 42000000 		.4byte	.LVL193
 4230 0ffb 6C130000 		.4byte	0x136c
 4231 0fff 00       		.byte	0
 4232 1000 2F       		.uleb128 0x2f
 4233 1001 AB070000 		.4byte	.LASF101
 4234 1005 01       		.byte	0x1
 4235 1006 2E08     		.2byte	0x82e
 4236 1008 00000000 		.4byte	.LFB52
 4237 100c 0C000000 		.4byte	.LFE52-.LFB52
 4238 1010 01       		.uleb128 0x1
 4239 1011 9C       		.byte	0x9c
 4240 1012 1F       		.uleb128 0x1f
 4241 1013 C6080000 		.4byte	.LASF103
 4242 1017 01       		.byte	0x1
 4243 1018 0D0A     		.2byte	0xa0d
 4244 101a 53000000 		.4byte	0x53
 4245 101e 01       		.byte	0x1
 4246 101f 3C100000 		.4byte	0x103c
 4247 1023 11       		.uleb128 0x11
 4248 1024 66030000 		.4byte	.LASF104
 4249 1028 01       		.byte	0x1
 4250 1029 0D0A     		.2byte	0xa0d
 4251 102b 3C100000 		.4byte	0x103c
 4252 102f 14       		.uleb128 0x14
 4253 1030 F7070000 		.4byte	.LASF105
 4254 1034 01       		.byte	0x1
 4255 1035 0F0A     		.2byte	0xa0f
 4256 1037 53000000 		.4byte	0x53
 4257 103b 00       		.byte	0
 4258 103c 06       		.uleb128 0x6
 4259 103d 04       		.byte	0x4
 4260 103e D3030000 		.4byte	0x3d3
 4261 1042 20       		.uleb128 0x20
 4262 1043 19030000 		.4byte	.LASF106
 4263 1047 01       		.byte	0x1
 4264 1048 210A     		.2byte	0xa21
 4265 104a 61000000 		.4byte	0x61
 4266 104e 00000000 		.4byte	.LFB60
 4267 1052 20000000 		.4byte	.LFE60-.LFB60
 4268 1056 01       		.uleb128 0x1
 4269 1057 9C       		.byte	0x9c
 4270 1058 C8100000 		.4byte	0x10c8
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 130


 4271 105c 21       		.uleb128 0x21
 4272 105d 56050000 		.4byte	.LASF56
 4273 1061 01       		.byte	0x1
 4274 1062 210A     		.2byte	0xa21
 4275 1064 99010000 		.4byte	0x199
 4276 1068 B8080000 		.4byte	.LLST60
 4277 106c 22       		.uleb128 0x22
 4278 106d 67090000 		.4byte	.LASF49
 4279 1071 01       		.byte	0x1
 4280 1072 230A     		.2byte	0xa23
 4281 1074 0A030000 		.4byte	0x30a
 4282 1078 CB080000 		.4byte	.LLST61
 4283 107c 23       		.uleb128 0x23
 4284 107d 21040000 		.4byte	.LASF107
 4285 1081 01       		.byte	0x1
 4286 1082 240A     		.2byte	0xa24
 4287 1084 86000000 		.4byte	0x86
 4288 1088 01       		.uleb128 0x1
 4289 1089 51       		.byte	0x51
 4290 108a 22       		.uleb128 0x22
 4291 108b 09020000 		.4byte	.LASF108
 4292 108f 01       		.byte	0x1
 4293 1090 250A     		.2byte	0xa25
 4294 1092 61000000 		.4byte	0x61
 4295 1096 DE080000 		.4byte	.LLST62
 4296 109a 33       		.uleb128 0x33
 4297 109b 12100000 		.4byte	0x1012
 4298 109f 0C000000 		.4byte	.LBB48
 4299 10a3 0A000000 		.4byte	.LBE48-.LBB48
 4300 10a7 01       		.byte	0x1
 4301 10a8 330A     		.2byte	0xa33
 4302 10aa 1C       		.uleb128 0x1c
 4303 10ab 23100000 		.4byte	0x1023
 4304 10af F9080000 		.4byte	.LLST63
 4305 10b3 2C       		.uleb128 0x2c
 4306 10b4 0C000000 		.4byte	.LBB49
 4307 10b8 0A000000 		.4byte	.LBE49-.LBB49
 4308 10bc 26       		.uleb128 0x26
 4309 10bd 2F100000 		.4byte	0x102f
 4310 10c1 23090000 		.4byte	.LLST64
 4311 10c5 00       		.byte	0
 4312 10c6 00       		.byte	0
 4313 10c7 00       		.byte	0
 4314 10c8 20       		.uleb128 0x20
 4315 10c9 AC080000 		.4byte	.LASF109
 4316 10cd 01       		.byte	0x1
 4317 10ce 4F0A     		.2byte	0xa4f
 4318 10d0 99010000 		.4byte	0x199
 4319 10d4 00000000 		.4byte	.LFB61
 4320 10d8 0C000000 		.4byte	.LFE61-.LFB61
 4321 10dc 01       		.uleb128 0x1
 4322 10dd 9C       		.byte	0x9c
 4323 10de F1100000 		.4byte	0x10f1
 4324 10e2 23       		.uleb128 0x23
 4325 10e3 9A070000 		.4byte	.LASF57
 4326 10e7 01       		.byte	0x1
 4327 10e8 510A     		.2byte	0xa51
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 131


 4328 10ea 99010000 		.4byte	0x199
 4329 10ee 01       		.uleb128 0x1
 4330 10ef 50       		.byte	0x50
 4331 10f0 00       		.byte	0
 4332 10f1 2E       		.uleb128 0x2e
 4333 10f2 0F010000 		.4byte	.LASF110
 4334 10f6 01       		.byte	0x1
 4335 10f7 7C0A     		.2byte	0xa7c
 4336 10f9 00000000 		.4byte	.LFB62
 4337 10fd 68000000 		.4byte	.LFE62-.LFB62
 4338 1101 01       		.uleb128 0x1
 4339 1102 9C       		.byte	0x9c
 4340 1103 4C110000 		.4byte	0x114c
 4341 1107 21       		.uleb128 0x21
 4342 1108 A0060000 		.4byte	.LASF111
 4343 110c 01       		.byte	0x1
 4344 110d 7C0A     		.2byte	0xa7c
 4345 110f 4C110000 		.4byte	0x114c
 4346 1113 36090000 		.4byte	.LLST65
 4347 1117 22       		.uleb128 0x22
 4348 1118 67090000 		.4byte	.LASF49
 4349 111c 01       		.byte	0x1
 4350 111d 7E0A     		.2byte	0xa7e
 4351 111f 7B080000 		.4byte	0x87b
 4352 1123 62090000 		.4byte	.LLST66
 4353 1127 27       		.uleb128 0x27
 4354 1128 36000000 		.4byte	.LVL207
 4355 112c 82130000 		.4byte	0x1382
 4356 1130 3B110000 		.4byte	0x113b
 4357 1134 28       		.uleb128 0x28
 4358 1135 01       		.uleb128 0x1
 4359 1136 50       		.byte	0x50
 4360 1137 02       		.uleb128 0x2
 4361 1138 75       		.byte	0x75
 4362 1139 00       		.sleb128 0
 4363 113a 00       		.byte	0
 4364 113b 29       		.uleb128 0x29
 4365 113c 54000000 		.4byte	.LVL208
 4366 1140 60130000 		.4byte	0x1360
 4367 1144 28       		.uleb128 0x28
 4368 1145 01       		.uleb128 0x1
 4369 1146 51       		.byte	0x51
 4370 1147 02       		.uleb128 0x2
 4371 1148 75       		.byte	0x75
 4372 1149 00       		.sleb128 0
 4373 114a 00       		.byte	0
 4374 114b 00       		.byte	0
 4375 114c 0B       		.uleb128 0xb
 4376 114d 99010000 		.4byte	0x199
 4377 1151 2E       		.uleb128 0x2e
 4378 1152 92050000 		.4byte	.LASF112
 4379 1156 01       		.byte	0x1
 4380 1157 A60A     		.2byte	0xaa6
 4381 1159 00000000 		.4byte	.LFB63
 4382 115d 44000000 		.4byte	.LFE63-.LFB63
 4383 1161 01       		.uleb128 0x1
 4384 1162 9C       		.byte	0x9c
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 132


 4385 1163 AC110000 		.4byte	0x11ac
 4386 1167 21       		.uleb128 0x21
 4387 1168 A0060000 		.4byte	.LASF111
 4388 116c 01       		.byte	0x1
 4389 116d A60A     		.2byte	0xaa6
 4390 116f 4C110000 		.4byte	0x114c
 4391 1173 8E090000 		.4byte	.LLST67
 4392 1177 22       		.uleb128 0x22
 4393 1178 67090000 		.4byte	.LASF49
 4394 117c 01       		.byte	0x1
 4395 117d A80A     		.2byte	0xaa8
 4396 117f 7B080000 		.4byte	0x87b
 4397 1183 BA090000 		.4byte	.LLST68
 4398 1187 27       		.uleb128 0x27
 4399 1188 16000000 		.4byte	.LVL212
 4400 118c 82130000 		.4byte	0x1382
 4401 1190 9B110000 		.4byte	0x119b
 4402 1194 28       		.uleb128 0x28
 4403 1195 01       		.uleb128 0x1
 4404 1196 50       		.byte	0x50
 4405 1197 02       		.uleb128 0x2
 4406 1198 75       		.byte	0x75
 4407 1199 00       		.sleb128 0
 4408 119a 00       		.byte	0
 4409 119b 29       		.uleb128 0x29
 4410 119c 3A000000 		.4byte	.LVL213
 4411 11a0 60130000 		.4byte	0x1360
 4412 11a4 28       		.uleb128 0x28
 4413 11a5 01       		.uleb128 0x1
 4414 11a6 51       		.byte	0x51
 4415 11a7 02       		.uleb128 0x2
 4416 11a8 75       		.byte	0x75
 4417 11a9 00       		.sleb128 0
 4418 11aa 00       		.byte	0
 4419 11ab 00       		.byte	0
 4420 11ac 0D       		.uleb128 0xd
 4421 11ad 8E010000 		.4byte	0x18e
 4422 11b1 BC110000 		.4byte	0x11bc
 4423 11b5 0E       		.uleb128 0xe
 4424 11b6 76000000 		.4byte	0x76
 4425 11ba 03       		.byte	0x3
 4426 11bb 00       		.byte	0
 4427 11bc 34       		.uleb128 0x34
 4428 11bd 39010000 		.4byte	.LASF113
 4429 11c1 01       		.byte	0x1
 4430 11c2 BB       		.byte	0xbb
 4431 11c3 AC110000 		.4byte	0x11ac
 4432 11c7 05       		.uleb128 0x5
 4433 11c8 03       		.byte	0x3
 4434 11c9 14000000 		.4byte	pxReadyTasksLists
 4435 11cd 34       		.uleb128 0x34
 4436 11ce 80010000 		.4byte	.LASF114
 4437 11d2 01       		.byte	0x1
 4438 11d3 BC       		.byte	0xbc
 4439 11d4 8E010000 		.4byte	0x18e
 4440 11d8 05       		.uleb128 0x5
 4441 11d9 03       		.byte	0x3
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 133


 4442 11da 64000000 		.4byte	xDelayedTaskList1
 4443 11de 34       		.uleb128 0x34
 4444 11df 92010000 		.4byte	.LASF115
 4445 11e3 01       		.byte	0x1
 4446 11e4 BD       		.byte	0xbd
 4447 11e5 8E010000 		.4byte	0x18e
 4448 11e9 05       		.uleb128 0x5
 4449 11ea 03       		.byte	0x3
 4450 11eb 78000000 		.4byte	xDelayedTaskList2
 4451 11ef 34       		.uleb128 0x34
 4452 11f0 6D060000 		.4byte	.LASF116
 4453 11f4 01       		.byte	0x1
 4454 11f5 BE       		.byte	0xbe
 4455 11f6 00120000 		.4byte	0x1200
 4456 11fa 05       		.uleb128 0x5
 4457 11fb 03       		.byte	0x3
 4458 11fc 0C000000 		.4byte	pxDelayedTaskList
 4459 1200 0C       		.uleb128 0xc
 4460 1201 DD030000 		.4byte	0x3dd
 4461 1205 34       		.uleb128 0x34
 4462 1206 AA030000 		.4byte	.LASF117
 4463 120a 01       		.byte	0x1
 4464 120b BF       		.byte	0xbf
 4465 120c 00120000 		.4byte	0x1200
 4466 1210 05       		.uleb128 0x5
 4467 1211 03       		.byte	0x3
 4468 1212 08000000 		.4byte	pxOverflowDelayedTaskList
 4469 1216 34       		.uleb128 0x34
 4470 1217 B7020000 		.4byte	.LASF118
 4471 121b 01       		.byte	0x1
 4472 121c C0       		.byte	0xc0
 4473 121d 8E010000 		.4byte	0x18e
 4474 1221 05       		.uleb128 0x5
 4475 1222 03       		.byte	0x3
 4476 1223 8C000000 		.4byte	xPendingReadyList
 4477 1227 34       		.uleb128 0x34
 4478 1228 74020000 		.4byte	.LASF119
 4479 122c 01       		.byte	0x1
 4480 122d CB       		.byte	0xcb
 4481 122e 8E010000 		.4byte	0x18e
 4482 1232 05       		.uleb128 0x5
 4483 1233 03       		.byte	0x3
 4484 1234 A0000000 		.4byte	xSuspendedTaskList
 4485 1238 34       		.uleb128 0x34
 4486 1239 16090000 		.4byte	.LASF120
 4487 123d 01       		.byte	0x1
 4488 123e D6       		.byte	0xd6
 4489 123f 8D020000 		.4byte	0x28d
 4490 1243 05       		.uleb128 0x5
 4491 1244 03       		.byte	0x3
 4492 1245 10000000 		.4byte	uxCurrentNumberOfTasks
 4493 1249 34       		.uleb128 0x34
 4494 124a 8B040000 		.4byte	.LASF121
 4495 124e 01       		.byte	0x1
 4496 124f D7       		.byte	0xd7
 4497 1250 5A120000 		.4byte	0x125a
 4498 1254 05       		.uleb128 0x5
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 134


 4499 1255 03       		.byte	0x3
 4500 1256 04000000 		.4byte	xTickCount
 4501 125a 0C       		.uleb128 0xc
 4502 125b B6000000 		.4byte	0xb6
 4503 125f 34       		.uleb128 0x34
 4504 1260 8E000000 		.4byte	.LASF122
 4505 1264 01       		.byte	0x1
 4506 1265 D8       		.byte	0xd8
 4507 1266 8D020000 		.4byte	0x28d
 4508 126a 05       		.uleb128 0x5
 4509 126b 03       		.byte	0x3
 4510 126c BC000000 		.4byte	uxTopReadyPriority
 4511 1270 34       		.uleb128 0x34
 4512 1271 F5000000 		.4byte	.LASF123
 4513 1275 01       		.byte	0x1
 4514 1276 D9       		.byte	0xd9
 4515 1277 81120000 		.4byte	0x1281
 4516 127b 05       		.uleb128 0x5
 4517 127c 03       		.byte	0x3
 4518 127d B4000000 		.4byte	xSchedulerRunning
 4519 1281 0C       		.uleb128 0xc
 4520 1282 5A000000 		.4byte	0x5a
 4521 1286 34       		.uleb128 0x34
 4522 1287 80090000 		.4byte	.LASF124
 4523 128b 01       		.byte	0x1
 4524 128c DA       		.byte	0xda
 4525 128d 8D020000 		.4byte	0x28d
 4526 1291 05       		.uleb128 0x5
 4527 1292 03       		.byte	0x3
 4528 1293 C0000000 		.4byte	uxSchedulerSuspended
 4529 1297 34       		.uleb128 0x34
 4530 1298 BC070000 		.4byte	.LASF125
 4531 129c 01       		.byte	0x1
 4532 129d DB       		.byte	0xdb
 4533 129e 8D020000 		.4byte	0x28d
 4534 12a2 05       		.uleb128 0x5
 4535 12a3 03       		.byte	0x3
 4536 12a4 C8000000 		.4byte	uxPendedTicks
 4537 12a8 34       		.uleb128 0x34
 4538 12a9 170A0000 		.4byte	.LASF126
 4539 12ad 01       		.byte	0x1
 4540 12ae DC       		.byte	0xdc
 4541 12af 81120000 		.4byte	0x1281
 4542 12b3 05       		.uleb128 0x5
 4543 12b4 03       		.byte	0x3
 4544 12b5 CC000000 		.4byte	xYieldPending
 4545 12b9 34       		.uleb128 0x34
 4546 12ba D0050000 		.4byte	.LASF127
 4547 12be 01       		.byte	0x1
 4548 12bf DD       		.byte	0xdd
 4549 12c0 81120000 		.4byte	0x1281
 4550 12c4 05       		.uleb128 0x5
 4551 12c5 03       		.byte	0x3
 4552 12c6 C4000000 		.4byte	xNumOfOverflows
 4553 12ca 34       		.uleb128 0x34
 4554 12cb 21050000 		.4byte	.LASF128
 4555 12cf 01       		.byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 135


 4556 12d0 DE       		.byte	0xde
 4557 12d1 61000000 		.4byte	0x61
 4558 12d5 05       		.uleb128 0x5
 4559 12d6 03       		.byte	0x3
 4560 12d7 B8000000 		.4byte	uxTaskNumber
 4561 12db 34       		.uleb128 0x34
 4562 12dc 60040000 		.4byte	.LASF129
 4563 12e0 01       		.byte	0x1
 4564 12e1 DF       		.byte	0xdf
 4565 12e2 5A120000 		.4byte	0x125a
 4566 12e6 05       		.uleb128 0x5
 4567 12e7 03       		.byte	0x3
 4568 12e8 00000000 		.4byte	xNextTaskUnblockTime
 4569 12ec 35       		.uleb128 0x35
 4570 12ed EC050000 		.4byte	.LASF157
 4571 12f1 01       		.byte	0x1
 4572 12f2 B8       		.byte	0xb8
 4573 12f3 FD120000 		.4byte	0x12fd
 4574 12f7 05       		.uleb128 0x5
 4575 12f8 03       		.byte	0x3
 4576 12f9 00000000 		.4byte	pxCurrentTCB
 4577 12fd 0C       		.uleb128 0xc
 4578 12fe 0A030000 		.4byte	0x30a
 4579 1302 36       		.uleb128 0x36
 4580 1303 32080000 		.4byte	.LASF130
 4581 1307 32080000 		.4byte	.LASF130
 4582 130b 05       		.byte	0x5
 4583 130c 5001     		.2byte	0x150
 4584 130e 36       		.uleb128 0x36
 4585 130f FC020000 		.4byte	.LASF131
 4586 1313 FC020000 		.4byte	.LASF131
 4587 1317 07       		.byte	0x7
 4588 1318 6F01     		.2byte	0x16f
 4589 131a 36       		.uleb128 0x36
 4590 131b 7D070000 		.4byte	.LASF132
 4591 131f 7D070000 		.4byte	.LASF132
 4592 1323 07       		.byte	0x7
 4593 1324 7001     		.2byte	0x170
 4594 1326 37       		.uleb128 0x37
 4595 1327 02050000 		.4byte	.LASF133
 4596 132b 02050000 		.4byte	.LASF133
 4597 132f 08       		.byte	0x8
 4598 1330 19       		.byte	0x19
 4599 1331 36       		.uleb128 0x36
 4600 1332 21060000 		.4byte	.LASF134
 4601 1336 21060000 		.4byte	.LASF134
 4602 133a 05       		.byte	0x5
 4603 133b 4301     		.2byte	0x143
 4604 133d 36       		.uleb128 0x36
 4605 133e 22080000 		.4byte	.LASF135
 4606 1342 22080000 		.4byte	.LASF135
 4607 1346 05       		.byte	0x5
 4608 1347 3801     		.2byte	0x138
 4609 1349 36       		.uleb128 0x36
 4610 134a 75040000 		.4byte	.LASF136
 4611 134e 75040000 		.4byte	.LASF136
 4612 1352 07       		.byte	0x7
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 136


 4613 1353 6901     		.2byte	0x169
 4614 1355 37       		.uleb128 0x37
 4615 1356 C4010000 		.4byte	.LASF137
 4616 135a C4010000 		.4byte	.LASF137
 4617 135e 04       		.byte	0x4
 4618 135f 78       		.byte	0x78
 4619 1360 36       		.uleb128 0x36
 4620 1361 8B030000 		.4byte	.LASF138
 4621 1365 8B030000 		.4byte	.LASF138
 4622 1369 05       		.byte	0x5
 4623 136a 6501     		.2byte	0x165
 4624 136c 37       		.uleb128 0x37
 4625 136d 1B000000 		.4byte	.LASF139
 4626 1371 1B000000 		.4byte	.LASF139
 4627 1375 04       		.byte	0x4
 4628 1376 79       		.byte	0x79
 4629 1377 37       		.uleb128 0x37
 4630 1378 58000000 		.4byte	.LASF140
 4631 137c 58000000 		.4byte	.LASF140
 4632 1380 04       		.byte	0x4
 4633 1381 6E       		.byte	0x6e
 4634 1382 36       		.uleb128 0x36
 4635 1383 36020000 		.4byte	.LASF141
 4636 1387 36020000 		.4byte	.LASF141
 4637 138b 05       		.byte	0x5
 4638 138c 7401     		.2byte	0x174
 4639 138e 37       		.uleb128 0x37
 4640 138f 2E050000 		.4byte	.LASF142
 4641 1393 2E050000 		.4byte	.LASF142
 4642 1397 04       		.byte	0x4
 4643 1398 7A       		.byte	0x7a
 4644 1399 37       		.uleb128 0x37
 4645 139a A4040000 		.4byte	.LASF143
 4646 139e A4040000 		.4byte	.LASF143
 4647 13a2 04       		.byte	0x4
 4648 13a3 7B       		.byte	0x7b
 4649 13a4 36       		.uleb128 0x36
 4650 13a5 2D000000 		.4byte	.LASF144
 4651 13a9 2D000000 		.4byte	.LASF144
 4652 13ad 07       		.byte	0x7
 4653 13ae 7801     		.2byte	0x178
 4654 13b0 36       		.uleb128 0x36
 4655 13b1 6B070000 		.4byte	.LASF145
 4656 13b5 6B070000 		.4byte	.LASF145
 4657 13b9 07       		.byte	0x7
 4658 13ba 7F01     		.2byte	0x17f
 4659 13bc 36       		.uleb128 0x36
 4660 13bd 2E040000 		.4byte	.LASF146
 4661 13c1 2E040000 		.4byte	.LASF146
 4662 13c5 01       		.byte	0x1
 4663 13c6 8201     		.2byte	0x182
 4664 13c8 37       		.uleb128 0x37
 4665 13c9 99060000 		.4byte	.LASF147
 4666 13cd 99060000 		.4byte	.LASF147
 4667 13d1 08       		.byte	0x8
 4668 13d2 16       		.byte	0x16
 4669 13d3 36       		.uleb128 0x36
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 137


 4670 13d4 F9050000 		.4byte	.LASF148
 4671 13d8 F9050000 		.4byte	.LASF148
 4672 13dc 01       		.byte	0x1
 4673 13dd 8101     		.2byte	0x181
 4674 13df 00       		.byte	0
 4675              		.section	.debug_abbrev,"",%progbits
 4676              	.Ldebug_abbrev0:
 4677 0000 01       		.uleb128 0x1
 4678 0001 11       		.uleb128 0x11
 4679 0002 01       		.byte	0x1
 4680 0003 25       		.uleb128 0x25
 4681 0004 0E       		.uleb128 0xe
 4682 0005 13       		.uleb128 0x13
 4683 0006 0B       		.uleb128 0xb
 4684 0007 03       		.uleb128 0x3
 4685 0008 0E       		.uleb128 0xe
 4686 0009 1B       		.uleb128 0x1b
 4687 000a 0E       		.uleb128 0xe
 4688 000b 55       		.uleb128 0x55
 4689 000c 17       		.uleb128 0x17
 4690 000d 11       		.uleb128 0x11
 4691 000e 01       		.uleb128 0x1
 4692 000f 10       		.uleb128 0x10
 4693 0010 17       		.uleb128 0x17
 4694 0011 00       		.byte	0
 4695 0012 00       		.byte	0
 4696 0013 02       		.uleb128 0x2
 4697 0014 16       		.uleb128 0x16
 4698 0015 00       		.byte	0
 4699 0016 03       		.uleb128 0x3
 4700 0017 0E       		.uleb128 0xe
 4701 0018 3A       		.uleb128 0x3a
 4702 0019 0B       		.uleb128 0xb
 4703 001a 3B       		.uleb128 0x3b
 4704 001b 0B       		.uleb128 0xb
 4705 001c 49       		.uleb128 0x49
 4706 001d 13       		.uleb128 0x13
 4707 001e 00       		.byte	0
 4708 001f 00       		.byte	0
 4709 0020 03       		.uleb128 0x3
 4710 0021 24       		.uleb128 0x24
 4711 0022 00       		.byte	0
 4712 0023 0B       		.uleb128 0xb
 4713 0024 0B       		.uleb128 0xb
 4714 0025 3E       		.uleb128 0x3e
 4715 0026 0B       		.uleb128 0xb
 4716 0027 03       		.uleb128 0x3
 4717 0028 0E       		.uleb128 0xe
 4718 0029 00       		.byte	0
 4719 002a 00       		.byte	0
 4720 002b 04       		.uleb128 0x4
 4721 002c 24       		.uleb128 0x24
 4722 002d 00       		.byte	0
 4723 002e 0B       		.uleb128 0xb
 4724 002f 0B       		.uleb128 0xb
 4725 0030 3E       		.uleb128 0x3e
 4726 0031 0B       		.uleb128 0xb
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 138


 4727 0032 03       		.uleb128 0x3
 4728 0033 08       		.uleb128 0x8
 4729 0034 00       		.byte	0
 4730 0035 00       		.byte	0
 4731 0036 05       		.uleb128 0x5
 4732 0037 0F       		.uleb128 0xf
 4733 0038 00       		.byte	0
 4734 0039 0B       		.uleb128 0xb
 4735 003a 0B       		.uleb128 0xb
 4736 003b 00       		.byte	0
 4737 003c 00       		.byte	0
 4738 003d 06       		.uleb128 0x6
 4739 003e 0F       		.uleb128 0xf
 4740 003f 00       		.byte	0
 4741 0040 0B       		.uleb128 0xb
 4742 0041 0B       		.uleb128 0xb
 4743 0042 49       		.uleb128 0x49
 4744 0043 13       		.uleb128 0x13
 4745 0044 00       		.byte	0
 4746 0045 00       		.byte	0
 4747 0046 07       		.uleb128 0x7
 4748 0047 15       		.uleb128 0x15
 4749 0048 01       		.byte	0x1
 4750 0049 27       		.uleb128 0x27
 4751 004a 19       		.uleb128 0x19
 4752 004b 01       		.uleb128 0x1
 4753 004c 13       		.uleb128 0x13
 4754 004d 00       		.byte	0
 4755 004e 00       		.byte	0
 4756 004f 08       		.uleb128 0x8
 4757 0050 05       		.uleb128 0x5
 4758 0051 00       		.byte	0
 4759 0052 49       		.uleb128 0x49
 4760 0053 13       		.uleb128 0x13
 4761 0054 00       		.byte	0
 4762 0055 00       		.byte	0
 4763 0056 09       		.uleb128 0x9
 4764 0057 13       		.uleb128 0x13
 4765 0058 01       		.byte	0x1
 4766 0059 03       		.uleb128 0x3
 4767 005a 0E       		.uleb128 0xe
 4768 005b 0B       		.uleb128 0xb
 4769 005c 0B       		.uleb128 0xb
 4770 005d 3A       		.uleb128 0x3a
 4771 005e 0B       		.uleb128 0xb
 4772 005f 3B       		.uleb128 0x3b
 4773 0060 0B       		.uleb128 0xb
 4774 0061 01       		.uleb128 0x1
 4775 0062 13       		.uleb128 0x13
 4776 0063 00       		.byte	0
 4777 0064 00       		.byte	0
 4778 0065 0A       		.uleb128 0xa
 4779 0066 0D       		.uleb128 0xd
 4780 0067 00       		.byte	0
 4781 0068 03       		.uleb128 0x3
 4782 0069 0E       		.uleb128 0xe
 4783 006a 3A       		.uleb128 0x3a
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 139


 4784 006b 0B       		.uleb128 0xb
 4785 006c 3B       		.uleb128 0x3b
 4786 006d 0B       		.uleb128 0xb
 4787 006e 49       		.uleb128 0x49
 4788 006f 13       		.uleb128 0x13
 4789 0070 38       		.uleb128 0x38
 4790 0071 0B       		.uleb128 0xb
 4791 0072 00       		.byte	0
 4792 0073 00       		.byte	0
 4793 0074 0B       		.uleb128 0xb
 4794 0075 26       		.uleb128 0x26
 4795 0076 00       		.byte	0
 4796 0077 49       		.uleb128 0x49
 4797 0078 13       		.uleb128 0x13
 4798 0079 00       		.byte	0
 4799 007a 00       		.byte	0
 4800 007b 0C       		.uleb128 0xc
 4801 007c 35       		.uleb128 0x35
 4802 007d 00       		.byte	0
 4803 007e 49       		.uleb128 0x49
 4804 007f 13       		.uleb128 0x13
 4805 0080 00       		.byte	0
 4806 0081 00       		.byte	0
 4807 0082 0D       		.uleb128 0xd
 4808 0083 01       		.uleb128 0x1
 4809 0084 01       		.byte	0x1
 4810 0085 49       		.uleb128 0x49
 4811 0086 13       		.uleb128 0x13
 4812 0087 01       		.uleb128 0x1
 4813 0088 13       		.uleb128 0x13
 4814 0089 00       		.byte	0
 4815 008a 00       		.byte	0
 4816 008b 0E       		.uleb128 0xe
 4817 008c 21       		.uleb128 0x21
 4818 008d 00       		.byte	0
 4819 008e 49       		.uleb128 0x49
 4820 008f 13       		.uleb128 0x13
 4821 0090 2F       		.uleb128 0x2f
 4822 0091 0B       		.uleb128 0xb
 4823 0092 00       		.byte	0
 4824 0093 00       		.byte	0
 4825 0094 0F       		.uleb128 0xf
 4826 0095 2E       		.uleb128 0x2e
 4827 0096 00       		.byte	0
 4828 0097 03       		.uleb128 0x3
 4829 0098 0E       		.uleb128 0xe
 4830 0099 3A       		.uleb128 0x3a
 4831 009a 0B       		.uleb128 0xb
 4832 009b 3B       		.uleb128 0x3b
 4833 009c 05       		.uleb128 0x5
 4834 009d 27       		.uleb128 0x27
 4835 009e 19       		.uleb128 0x19
 4836 009f 20       		.uleb128 0x20
 4837 00a0 0B       		.uleb128 0xb
 4838 00a1 00       		.byte	0
 4839 00a2 00       		.byte	0
 4840 00a3 10       		.uleb128 0x10
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 140


 4841 00a4 2E       		.uleb128 0x2e
 4842 00a5 01       		.byte	0x1
 4843 00a6 03       		.uleb128 0x3
 4844 00a7 0E       		.uleb128 0xe
 4845 00a8 3A       		.uleb128 0x3a
 4846 00a9 0B       		.uleb128 0xb
 4847 00aa 3B       		.uleb128 0x3b
 4848 00ab 05       		.uleb128 0x5
 4849 00ac 27       		.uleb128 0x27
 4850 00ad 19       		.uleb128 0x19
 4851 00ae 20       		.uleb128 0x20
 4852 00af 0B       		.uleb128 0xb
 4853 00b0 01       		.uleb128 0x1
 4854 00b1 13       		.uleb128 0x13
 4855 00b2 00       		.byte	0
 4856 00b3 00       		.byte	0
 4857 00b4 11       		.uleb128 0x11
 4858 00b5 05       		.uleb128 0x5
 4859 00b6 00       		.byte	0
 4860 00b7 03       		.uleb128 0x3
 4861 00b8 0E       		.uleb128 0xe
 4862 00b9 3A       		.uleb128 0x3a
 4863 00ba 0B       		.uleb128 0xb
 4864 00bb 3B       		.uleb128 0x3b
 4865 00bc 05       		.uleb128 0x5
 4866 00bd 49       		.uleb128 0x49
 4867 00be 13       		.uleb128 0x13
 4868 00bf 00       		.byte	0
 4869 00c0 00       		.byte	0
 4870 00c1 12       		.uleb128 0x12
 4871 00c2 34       		.uleb128 0x34
 4872 00c3 00       		.byte	0
 4873 00c4 03       		.uleb128 0x3
 4874 00c5 08       		.uleb128 0x8
 4875 00c6 3A       		.uleb128 0x3a
 4876 00c7 0B       		.uleb128 0xb
 4877 00c8 3B       		.uleb128 0x3b
 4878 00c9 05       		.uleb128 0x5
 4879 00ca 49       		.uleb128 0x49
 4880 00cb 13       		.uleb128 0x13
 4881 00cc 00       		.byte	0
 4882 00cd 00       		.byte	0
 4883 00ce 13       		.uleb128 0x13
 4884 00cf 2E       		.uleb128 0x2e
 4885 00d0 01       		.byte	0x1
 4886 00d1 3F       		.uleb128 0x3f
 4887 00d2 19       		.uleb128 0x19
 4888 00d3 03       		.uleb128 0x3
 4889 00d4 0E       		.uleb128 0xe
 4890 00d5 3A       		.uleb128 0x3a
 4891 00d6 0B       		.uleb128 0xb
 4892 00d7 3B       		.uleb128 0x3b
 4893 00d8 05       		.uleb128 0x5
 4894 00d9 27       		.uleb128 0x27
 4895 00da 19       		.uleb128 0x19
 4896 00db 49       		.uleb128 0x49
 4897 00dc 13       		.uleb128 0x13
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 141


 4898 00dd 20       		.uleb128 0x20
 4899 00de 0B       		.uleb128 0xb
 4900 00df 01       		.uleb128 0x1
 4901 00e0 13       		.uleb128 0x13
 4902 00e1 00       		.byte	0
 4903 00e2 00       		.byte	0
 4904 00e3 14       		.uleb128 0x14
 4905 00e4 34       		.uleb128 0x34
 4906 00e5 00       		.byte	0
 4907 00e6 03       		.uleb128 0x3
 4908 00e7 0E       		.uleb128 0xe
 4909 00e8 3A       		.uleb128 0x3a
 4910 00e9 0B       		.uleb128 0xb
 4911 00ea 3B       		.uleb128 0x3b
 4912 00eb 05       		.uleb128 0x5
 4913 00ec 49       		.uleb128 0x49
 4914 00ed 13       		.uleb128 0x13
 4915 00ee 00       		.byte	0
 4916 00ef 00       		.byte	0
 4917 00f0 15       		.uleb128 0x15
 4918 00f1 2E       		.uleb128 0x2e
 4919 00f2 01       		.byte	0x1
 4920 00f3 3F       		.uleb128 0x3f
 4921 00f4 19       		.uleb128 0x19
 4922 00f5 03       		.uleb128 0x3
 4923 00f6 0E       		.uleb128 0xe
 4924 00f7 3A       		.uleb128 0x3a
 4925 00f8 0B       		.uleb128 0xb
 4926 00f9 3B       		.uleb128 0x3b
 4927 00fa 05       		.uleb128 0x5
 4928 00fb 27       		.uleb128 0x27
 4929 00fc 19       		.uleb128 0x19
 4930 00fd 20       		.uleb128 0x20
 4931 00fe 0B       		.uleb128 0xb
 4932 00ff 01       		.uleb128 0x1
 4933 0100 13       		.uleb128 0x13
 4934 0101 00       		.byte	0
 4935 0102 00       		.byte	0
 4936 0103 16       		.uleb128 0x16
 4937 0104 0B       		.uleb128 0xb
 4938 0105 01       		.byte	0x1
 4939 0106 01       		.uleb128 0x1
 4940 0107 13       		.uleb128 0x13
 4941 0108 00       		.byte	0
 4942 0109 00       		.byte	0
 4943 010a 17       		.uleb128 0x17
 4944 010b 34       		.uleb128 0x34
 4945 010c 00       		.byte	0
 4946 010d 03       		.uleb128 0x3
 4947 010e 0E       		.uleb128 0xe
 4948 010f 3A       		.uleb128 0x3a
 4949 0110 0B       		.uleb128 0xb
 4950 0111 3B       		.uleb128 0x3b
 4951 0112 05       		.uleb128 0x5
 4952 0113 49       		.uleb128 0x49
 4953 0114 13       		.uleb128 0x13
 4954 0115 1C       		.uleb128 0x1c
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 142


 4955 0116 0A       		.uleb128 0xa
 4956 0117 00       		.byte	0
 4957 0118 00       		.byte	0
 4958 0119 18       		.uleb128 0x18
 4959 011a 0B       		.uleb128 0xb
 4960 011b 01       		.byte	0x1
 4961 011c 00       		.byte	0
 4962 011d 00       		.byte	0
 4963 011e 19       		.uleb128 0x19
 4964 011f 2E       		.uleb128 0x2e
 4965 0120 01       		.byte	0x1
 4966 0121 03       		.uleb128 0x3
 4967 0122 0E       		.uleb128 0xe
 4968 0123 3A       		.uleb128 0x3a
 4969 0124 0B       		.uleb128 0xb
 4970 0125 3B       		.uleb128 0x3b
 4971 0126 05       		.uleb128 0x5
 4972 0127 27       		.uleb128 0x27
 4973 0128 19       		.uleb128 0x19
 4974 0129 8701     		.uleb128 0x87
 4975 012b 19       		.uleb128 0x19
 4976 012c 11       		.uleb128 0x11
 4977 012d 01       		.uleb128 0x1
 4978 012e 12       		.uleb128 0x12
 4979 012f 06       		.uleb128 0x6
 4980 0130 40       		.uleb128 0x40
 4981 0131 18       		.uleb128 0x18
 4982 0132 9742     		.uleb128 0x2117
 4983 0134 19       		.uleb128 0x19
 4984 0135 01       		.uleb128 0x1
 4985 0136 13       		.uleb128 0x13
 4986 0137 00       		.byte	0
 4987 0138 00       		.byte	0
 4988 0139 1A       		.uleb128 0x1a
 4989 013a 05       		.uleb128 0x5
 4990 013b 00       		.byte	0
 4991 013c 03       		.uleb128 0x3
 4992 013d 0E       		.uleb128 0xe
 4993 013e 3A       		.uleb128 0x3a
 4994 013f 0B       		.uleb128 0xb
 4995 0140 3B       		.uleb128 0x3b
 4996 0141 05       		.uleb128 0x5
 4997 0142 49       		.uleb128 0x49
 4998 0143 13       		.uleb128 0x13
 4999 0144 02       		.uleb128 0x2
 5000 0145 18       		.uleb128 0x18
 5001 0146 00       		.byte	0
 5002 0147 00       		.byte	0
 5003 0148 1B       		.uleb128 0x1b
 5004 0149 2E       		.uleb128 0x2e
 5005 014a 01       		.byte	0x1
 5006 014b 31       		.uleb128 0x31
 5007 014c 13       		.uleb128 0x13
 5008 014d 11       		.uleb128 0x11
 5009 014e 01       		.uleb128 0x1
 5010 014f 12       		.uleb128 0x12
 5011 0150 06       		.uleb128 0x6
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 143


 5012 0151 40       		.uleb128 0x40
 5013 0152 18       		.uleb128 0x18
 5014 0153 9742     		.uleb128 0x2117
 5015 0155 19       		.uleb128 0x19
 5016 0156 01       		.uleb128 0x1
 5017 0157 13       		.uleb128 0x13
 5018 0158 00       		.byte	0
 5019 0159 00       		.byte	0
 5020 015a 1C       		.uleb128 0x1c
 5021 015b 05       		.uleb128 0x5
 5022 015c 00       		.byte	0
 5023 015d 31       		.uleb128 0x31
 5024 015e 13       		.uleb128 0x13
 5025 015f 02       		.uleb128 0x2
 5026 0160 17       		.uleb128 0x17
 5027 0161 00       		.byte	0
 5028 0162 00       		.byte	0
 5029 0163 1D       		.uleb128 0x1d
 5030 0164 0B       		.uleb128 0xb
 5031 0165 01       		.byte	0x1
 5032 0166 11       		.uleb128 0x11
 5033 0167 01       		.uleb128 0x1
 5034 0168 12       		.uleb128 0x12
 5035 0169 06       		.uleb128 0x6
 5036 016a 01       		.uleb128 0x1
 5037 016b 13       		.uleb128 0x13
 5038 016c 00       		.byte	0
 5039 016d 00       		.byte	0
 5040 016e 1E       		.uleb128 0x1e
 5041 016f 898201   		.uleb128 0x4109
 5042 0172 00       		.byte	0
 5043 0173 11       		.uleb128 0x11
 5044 0174 01       		.uleb128 0x1
 5045 0175 31       		.uleb128 0x31
 5046 0176 13       		.uleb128 0x13
 5047 0177 00       		.byte	0
 5048 0178 00       		.byte	0
 5049 0179 1F       		.uleb128 0x1f
 5050 017a 2E       		.uleb128 0x2e
 5051 017b 01       		.byte	0x1
 5052 017c 03       		.uleb128 0x3
 5053 017d 0E       		.uleb128 0xe
 5054 017e 3A       		.uleb128 0x3a
 5055 017f 0B       		.uleb128 0xb
 5056 0180 3B       		.uleb128 0x3b
 5057 0181 05       		.uleb128 0x5
 5058 0182 27       		.uleb128 0x27
 5059 0183 19       		.uleb128 0x19
 5060 0184 49       		.uleb128 0x49
 5061 0185 13       		.uleb128 0x13
 5062 0186 20       		.uleb128 0x20
 5063 0187 0B       		.uleb128 0xb
 5064 0188 01       		.uleb128 0x1
 5065 0189 13       		.uleb128 0x13
 5066 018a 00       		.byte	0
 5067 018b 00       		.byte	0
 5068 018c 20       		.uleb128 0x20
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 144


 5069 018d 2E       		.uleb128 0x2e
 5070 018e 01       		.byte	0x1
 5071 018f 3F       		.uleb128 0x3f
 5072 0190 19       		.uleb128 0x19
 5073 0191 03       		.uleb128 0x3
 5074 0192 0E       		.uleb128 0xe
 5075 0193 3A       		.uleb128 0x3a
 5076 0194 0B       		.uleb128 0xb
 5077 0195 3B       		.uleb128 0x3b
 5078 0196 05       		.uleb128 0x5
 5079 0197 27       		.uleb128 0x27
 5080 0198 19       		.uleb128 0x19
 5081 0199 49       		.uleb128 0x49
 5082 019a 13       		.uleb128 0x13
 5083 019b 11       		.uleb128 0x11
 5084 019c 01       		.uleb128 0x1
 5085 019d 12       		.uleb128 0x12
 5086 019e 06       		.uleb128 0x6
 5087 019f 40       		.uleb128 0x40
 5088 01a0 18       		.uleb128 0x18
 5089 01a1 9742     		.uleb128 0x2117
 5090 01a3 19       		.uleb128 0x19
 5091 01a4 01       		.uleb128 0x1
 5092 01a5 13       		.uleb128 0x13
 5093 01a6 00       		.byte	0
 5094 01a7 00       		.byte	0
 5095 01a8 21       		.uleb128 0x21
 5096 01a9 05       		.uleb128 0x5
 5097 01aa 00       		.byte	0
 5098 01ab 03       		.uleb128 0x3
 5099 01ac 0E       		.uleb128 0xe
 5100 01ad 3A       		.uleb128 0x3a
 5101 01ae 0B       		.uleb128 0xb
 5102 01af 3B       		.uleb128 0x3b
 5103 01b0 05       		.uleb128 0x5
 5104 01b1 49       		.uleb128 0x49
 5105 01b2 13       		.uleb128 0x13
 5106 01b3 02       		.uleb128 0x2
 5107 01b4 17       		.uleb128 0x17
 5108 01b5 00       		.byte	0
 5109 01b6 00       		.byte	0
 5110 01b7 22       		.uleb128 0x22
 5111 01b8 34       		.uleb128 0x34
 5112 01b9 00       		.byte	0
 5113 01ba 03       		.uleb128 0x3
 5114 01bb 0E       		.uleb128 0xe
 5115 01bc 3A       		.uleb128 0x3a
 5116 01bd 0B       		.uleb128 0xb
 5117 01be 3B       		.uleb128 0x3b
 5118 01bf 05       		.uleb128 0x5
 5119 01c0 49       		.uleb128 0x49
 5120 01c1 13       		.uleb128 0x13
 5121 01c2 02       		.uleb128 0x2
 5122 01c3 17       		.uleb128 0x17
 5123 01c4 00       		.byte	0
 5124 01c5 00       		.byte	0
 5125 01c6 23       		.uleb128 0x23
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 145


 5126 01c7 34       		.uleb128 0x34
 5127 01c8 00       		.byte	0
 5128 01c9 03       		.uleb128 0x3
 5129 01ca 0E       		.uleb128 0xe
 5130 01cb 3A       		.uleb128 0x3a
 5131 01cc 0B       		.uleb128 0xb
 5132 01cd 3B       		.uleb128 0x3b
 5133 01ce 05       		.uleb128 0x5
 5134 01cf 49       		.uleb128 0x49
 5135 01d0 13       		.uleb128 0x13
 5136 01d1 02       		.uleb128 0x2
 5137 01d2 18       		.uleb128 0x18
 5138 01d3 00       		.byte	0
 5139 01d4 00       		.byte	0
 5140 01d5 24       		.uleb128 0x24
 5141 01d6 1D       		.uleb128 0x1d
 5142 01d7 01       		.byte	0x1
 5143 01d8 31       		.uleb128 0x31
 5144 01d9 13       		.uleb128 0x13
 5145 01da 52       		.uleb128 0x52
 5146 01db 01       		.uleb128 0x1
 5147 01dc 55       		.uleb128 0x55
 5148 01dd 17       		.uleb128 0x17
 5149 01de 58       		.uleb128 0x58
 5150 01df 0B       		.uleb128 0xb
 5151 01e0 59       		.uleb128 0x59
 5152 01e1 05       		.uleb128 0x5
 5153 01e2 01       		.uleb128 0x1
 5154 01e3 13       		.uleb128 0x13
 5155 01e4 00       		.byte	0
 5156 01e5 00       		.byte	0
 5157 01e6 25       		.uleb128 0x25
 5158 01e7 0B       		.uleb128 0xb
 5159 01e8 01       		.byte	0x1
 5160 01e9 55       		.uleb128 0x55
 5161 01ea 17       		.uleb128 0x17
 5162 01eb 00       		.byte	0
 5163 01ec 00       		.byte	0
 5164 01ed 26       		.uleb128 0x26
 5165 01ee 34       		.uleb128 0x34
 5166 01ef 00       		.byte	0
 5167 01f0 31       		.uleb128 0x31
 5168 01f1 13       		.uleb128 0x13
 5169 01f2 02       		.uleb128 0x2
 5170 01f3 17       		.uleb128 0x17
 5171 01f4 00       		.byte	0
 5172 01f5 00       		.byte	0
 5173 01f6 27       		.uleb128 0x27
 5174 01f7 898201   		.uleb128 0x4109
 5175 01fa 01       		.byte	0x1
 5176 01fb 11       		.uleb128 0x11
 5177 01fc 01       		.uleb128 0x1
 5178 01fd 31       		.uleb128 0x31
 5179 01fe 13       		.uleb128 0x13
 5180 01ff 01       		.uleb128 0x1
 5181 0200 13       		.uleb128 0x13
 5182 0201 00       		.byte	0
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 146


 5183 0202 00       		.byte	0
 5184 0203 28       		.uleb128 0x28
 5185 0204 8A8201   		.uleb128 0x410a
 5186 0207 00       		.byte	0
 5187 0208 02       		.uleb128 0x2
 5188 0209 18       		.uleb128 0x18
 5189 020a 9142     		.uleb128 0x2111
 5190 020c 18       		.uleb128 0x18
 5191 020d 00       		.byte	0
 5192 020e 00       		.byte	0
 5193 020f 29       		.uleb128 0x29
 5194 0210 898201   		.uleb128 0x4109
 5195 0213 01       		.byte	0x1
 5196 0214 11       		.uleb128 0x11
 5197 0215 01       		.uleb128 0x1
 5198 0216 31       		.uleb128 0x31
 5199 0217 13       		.uleb128 0x13
 5200 0218 00       		.byte	0
 5201 0219 00       		.byte	0
 5202 021a 2A       		.uleb128 0x2a
 5203 021b 1D       		.uleb128 0x1d
 5204 021c 01       		.byte	0x1
 5205 021d 31       		.uleb128 0x31
 5206 021e 13       		.uleb128 0x13
 5207 021f 11       		.uleb128 0x11
 5208 0220 01       		.uleb128 0x1
 5209 0221 12       		.uleb128 0x12
 5210 0222 06       		.uleb128 0x6
 5211 0223 58       		.uleb128 0x58
 5212 0224 0B       		.uleb128 0xb
 5213 0225 59       		.uleb128 0x59
 5214 0226 05       		.uleb128 0x5
 5215 0227 01       		.uleb128 0x1
 5216 0228 13       		.uleb128 0x13
 5217 0229 00       		.byte	0
 5218 022a 00       		.byte	0
 5219 022b 2B       		.uleb128 0x2b
 5220 022c 05       		.uleb128 0x5
 5221 022d 00       		.byte	0
 5222 022e 31       		.uleb128 0x31
 5223 022f 13       		.uleb128 0x13
 5224 0230 00       		.byte	0
 5225 0231 00       		.byte	0
 5226 0232 2C       		.uleb128 0x2c
 5227 0233 0B       		.uleb128 0xb
 5228 0234 01       		.byte	0x1
 5229 0235 11       		.uleb128 0x11
 5230 0236 01       		.uleb128 0x1
 5231 0237 12       		.uleb128 0x12
 5232 0238 06       		.uleb128 0x6
 5233 0239 00       		.byte	0
 5234 023a 00       		.byte	0
 5235 023b 2D       		.uleb128 0x2d
 5236 023c 34       		.uleb128 0x34
 5237 023d 00       		.byte	0
 5238 023e 31       		.uleb128 0x31
 5239 023f 13       		.uleb128 0x13
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 147


 5240 0240 00       		.byte	0
 5241 0241 00       		.byte	0
 5242 0242 2E       		.uleb128 0x2e
 5243 0243 2E       		.uleb128 0x2e
 5244 0244 01       		.byte	0x1
 5245 0245 3F       		.uleb128 0x3f
 5246 0246 19       		.uleb128 0x19
 5247 0247 03       		.uleb128 0x3
 5248 0248 0E       		.uleb128 0xe
 5249 0249 3A       		.uleb128 0x3a
 5250 024a 0B       		.uleb128 0xb
 5251 024b 3B       		.uleb128 0x3b
 5252 024c 05       		.uleb128 0x5
 5253 024d 27       		.uleb128 0x27
 5254 024e 19       		.uleb128 0x19
 5255 024f 11       		.uleb128 0x11
 5256 0250 01       		.uleb128 0x1
 5257 0251 12       		.uleb128 0x12
 5258 0252 06       		.uleb128 0x6
 5259 0253 40       		.uleb128 0x40
 5260 0254 18       		.uleb128 0x18
 5261 0255 9742     		.uleb128 0x2117
 5262 0257 19       		.uleb128 0x19
 5263 0258 01       		.uleb128 0x1
 5264 0259 13       		.uleb128 0x13
 5265 025a 00       		.byte	0
 5266 025b 00       		.byte	0
 5267 025c 2F       		.uleb128 0x2f
 5268 025d 2E       		.uleb128 0x2e
 5269 025e 00       		.byte	0
 5270 025f 3F       		.uleb128 0x3f
 5271 0260 19       		.uleb128 0x19
 5272 0261 03       		.uleb128 0x3
 5273 0262 0E       		.uleb128 0xe
 5274 0263 3A       		.uleb128 0x3a
 5275 0264 0B       		.uleb128 0xb
 5276 0265 3B       		.uleb128 0x3b
 5277 0266 05       		.uleb128 0x5
 5278 0267 27       		.uleb128 0x27
 5279 0268 19       		.uleb128 0x19
 5280 0269 11       		.uleb128 0x11
 5281 026a 01       		.uleb128 0x1
 5282 026b 12       		.uleb128 0x12
 5283 026c 06       		.uleb128 0x6
 5284 026d 40       		.uleb128 0x40
 5285 026e 18       		.uleb128 0x18
 5286 026f 9742     		.uleb128 0x2117
 5287 0271 19       		.uleb128 0x19
 5288 0272 00       		.byte	0
 5289 0273 00       		.byte	0
 5290 0274 30       		.uleb128 0x30
 5291 0275 2E       		.uleb128 0x2e
 5292 0276 00       		.byte	0
 5293 0277 3F       		.uleb128 0x3f
 5294 0278 19       		.uleb128 0x19
 5295 0279 03       		.uleb128 0x3
 5296 027a 0E       		.uleb128 0xe
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 148


 5297 027b 3A       		.uleb128 0x3a
 5298 027c 0B       		.uleb128 0xb
 5299 027d 3B       		.uleb128 0x3b
 5300 027e 05       		.uleb128 0x5
 5301 027f 27       		.uleb128 0x27
 5302 0280 19       		.uleb128 0x19
 5303 0281 49       		.uleb128 0x49
 5304 0282 13       		.uleb128 0x13
 5305 0283 11       		.uleb128 0x11
 5306 0284 01       		.uleb128 0x1
 5307 0285 12       		.uleb128 0x12
 5308 0286 06       		.uleb128 0x6
 5309 0287 40       		.uleb128 0x40
 5310 0288 18       		.uleb128 0x18
 5311 0289 9742     		.uleb128 0x2117
 5312 028b 19       		.uleb128 0x19
 5313 028c 00       		.byte	0
 5314 028d 00       		.byte	0
 5315 028e 31       		.uleb128 0x31
 5316 028f 0B       		.uleb128 0xb
 5317 0290 01       		.byte	0x1
 5318 0291 55       		.uleb128 0x55
 5319 0292 17       		.uleb128 0x17
 5320 0293 01       		.uleb128 0x1
 5321 0294 13       		.uleb128 0x13
 5322 0295 00       		.byte	0
 5323 0296 00       		.byte	0
 5324 0297 32       		.uleb128 0x32
 5325 0298 34       		.uleb128 0x34
 5326 0299 00       		.byte	0
 5327 029a 31       		.uleb128 0x31
 5328 029b 13       		.uleb128 0x13
 5329 029c 02       		.uleb128 0x2
 5330 029d 18       		.uleb128 0x18
 5331 029e 00       		.byte	0
 5332 029f 00       		.byte	0
 5333 02a0 33       		.uleb128 0x33
 5334 02a1 1D       		.uleb128 0x1d
 5335 02a2 01       		.byte	0x1
 5336 02a3 31       		.uleb128 0x31
 5337 02a4 13       		.uleb128 0x13
 5338 02a5 11       		.uleb128 0x11
 5339 02a6 01       		.uleb128 0x1
 5340 02a7 12       		.uleb128 0x12
 5341 02a8 06       		.uleb128 0x6
 5342 02a9 58       		.uleb128 0x58
 5343 02aa 0B       		.uleb128 0xb
 5344 02ab 59       		.uleb128 0x59
 5345 02ac 05       		.uleb128 0x5
 5346 02ad 00       		.byte	0
 5347 02ae 00       		.byte	0
 5348 02af 34       		.uleb128 0x34
 5349 02b0 34       		.uleb128 0x34
 5350 02b1 00       		.byte	0
 5351 02b2 03       		.uleb128 0x3
 5352 02b3 0E       		.uleb128 0xe
 5353 02b4 3A       		.uleb128 0x3a
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 149


 5354 02b5 0B       		.uleb128 0xb
 5355 02b6 3B       		.uleb128 0x3b
 5356 02b7 0B       		.uleb128 0xb
 5357 02b8 49       		.uleb128 0x49
 5358 02b9 13       		.uleb128 0x13
 5359 02ba 02       		.uleb128 0x2
 5360 02bb 18       		.uleb128 0x18
 5361 02bc 00       		.byte	0
 5362 02bd 00       		.byte	0
 5363 02be 35       		.uleb128 0x35
 5364 02bf 34       		.uleb128 0x34
 5365 02c0 00       		.byte	0
 5366 02c1 03       		.uleb128 0x3
 5367 02c2 0E       		.uleb128 0xe
 5368 02c3 3A       		.uleb128 0x3a
 5369 02c4 0B       		.uleb128 0xb
 5370 02c5 3B       		.uleb128 0x3b
 5371 02c6 0B       		.uleb128 0xb
 5372 02c7 49       		.uleb128 0x49
 5373 02c8 13       		.uleb128 0x13
 5374 02c9 3F       		.uleb128 0x3f
 5375 02ca 19       		.uleb128 0x19
 5376 02cb 02       		.uleb128 0x2
 5377 02cc 18       		.uleb128 0x18
 5378 02cd 00       		.byte	0
 5379 02ce 00       		.byte	0
 5380 02cf 36       		.uleb128 0x36
 5381 02d0 2E       		.uleb128 0x2e
 5382 02d1 00       		.byte	0
 5383 02d2 3F       		.uleb128 0x3f
 5384 02d3 19       		.uleb128 0x19
 5385 02d4 3C       		.uleb128 0x3c
 5386 02d5 19       		.uleb128 0x19
 5387 02d6 6E       		.uleb128 0x6e
 5388 02d7 0E       		.uleb128 0xe
 5389 02d8 03       		.uleb128 0x3
 5390 02d9 0E       		.uleb128 0xe
 5391 02da 3A       		.uleb128 0x3a
 5392 02db 0B       		.uleb128 0xb
 5393 02dc 3B       		.uleb128 0x3b
 5394 02dd 05       		.uleb128 0x5
 5395 02de 00       		.byte	0
 5396 02df 00       		.byte	0
 5397 02e0 37       		.uleb128 0x37
 5398 02e1 2E       		.uleb128 0x2e
 5399 02e2 00       		.byte	0
 5400 02e3 3F       		.uleb128 0x3f
 5401 02e4 19       		.uleb128 0x19
 5402 02e5 3C       		.uleb128 0x3c
 5403 02e6 19       		.uleb128 0x19
 5404 02e7 6E       		.uleb128 0x6e
 5405 02e8 0E       		.uleb128 0xe
 5406 02e9 03       		.uleb128 0x3
 5407 02ea 0E       		.uleb128 0xe
 5408 02eb 3A       		.uleb128 0x3a
 5409 02ec 0B       		.uleb128 0xb
 5410 02ed 3B       		.uleb128 0x3b
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 150


 5411 02ee 0B       		.uleb128 0xb
 5412 02ef 00       		.byte	0
 5413 02f0 00       		.byte	0
 5414 02f1 00       		.byte	0
 5415              		.section	.debug_loc,"",%progbits
 5416              	.Ldebug_loc0:
 5417              	.LLST0:
 5418 0000 00000000 		.4byte	.LVL1
 5419 0004 12000000 		.4byte	.LVL3
 5420 0008 0100     		.2byte	0x1
 5421 000a 50       		.byte	0x50
 5422 000b 12000000 		.4byte	.LVL3
 5423 000f 1C000000 		.4byte	.LVL5
 5424 0013 0100     		.2byte	0x1
 5425 0015 54       		.byte	0x54
 5426 0016 1C000000 		.4byte	.LVL5
 5427 001a 1E000000 		.4byte	.LVL6
 5428 001e 0100     		.2byte	0x1
 5429 0020 50       		.byte	0x50
 5430 0021 1E000000 		.4byte	.LVL6
 5431 0025 30000000 		.4byte	.LVL8
 5432 0029 0100     		.2byte	0x1
 5433 002b 54       		.byte	0x54
 5434 002c 30000000 		.4byte	.LVL8
 5435 0030 3C000000 		.4byte	.LFE57
 5436 0034 0400     		.2byte	0x4
 5437 0036 F3       		.byte	0xf3
 5438 0037 01       		.uleb128 0x1
 5439 0038 50       		.byte	0x50
 5440 0039 9F       		.byte	0x9f
 5441 003a 00000000 		.4byte	0
 5442 003e 00000000 		.4byte	0
 5443              	.LLST1:
 5444 0042 10000000 		.4byte	.LVL2
 5445 0046 12000000 		.4byte	.LVL3
 5446 004a 0100     		.2byte	0x1
 5447 004c 50       		.byte	0x50
 5448 004d 12000000 		.4byte	.LVL3
 5449 0051 1C000000 		.4byte	.LVL5
 5450 0055 0100     		.2byte	0x1
 5451 0057 54       		.byte	0x54
 5452 0058 00000000 		.4byte	0
 5453 005c 00000000 		.4byte	0
 5454              	.LLST2:
 5455 0060 00000000 		.4byte	.LVL9
 5456 0064 06000000 		.4byte	.LVL10
 5457 0068 0100     		.2byte	0x1
 5458 006a 50       		.byte	0x50
 5459 006b 06000000 		.4byte	.LVL10
 5460 006f 6C010000 		.4byte	.LFE32
 5461 0073 0200     		.2byte	0x2
 5462 0075 7D       		.byte	0x7d
 5463 0076 00       		.sleb128 0
 5464 0077 00000000 		.4byte	0
 5465 007b 00000000 		.4byte	0
 5466              	.LLST3:
 5467 007f 00000000 		.4byte	.LVL9
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 151


 5468 0083 0F000000 		.4byte	.LVL12-1
 5469 0087 0100     		.2byte	0x1
 5470 0089 51       		.byte	0x51
 5471 008a 0F000000 		.4byte	.LVL12-1
 5472 008e 6E000000 		.4byte	.LVL28
 5473 0092 0100     		.2byte	0x1
 5474 0094 56       		.byte	0x56
 5475 0095 6E000000 		.4byte	.LVL28
 5476 0099 54010000 		.4byte	.LVL50
 5477 009d 0400     		.2byte	0x4
 5478 009f F3       		.byte	0xf3
 5479 00a0 01       		.uleb128 0x1
 5480 00a1 51       		.byte	0x51
 5481 00a2 9F       		.byte	0x9f
 5482 00a3 54010000 		.4byte	.LVL50
 5483 00a7 58010000 		.4byte	.LVL51
 5484 00ab 0100     		.2byte	0x1
 5485 00ad 56       		.byte	0x56
 5486 00ae 58010000 		.4byte	.LVL51
 5487 00b2 6C010000 		.4byte	.LFE32
 5488 00b6 0400     		.2byte	0x4
 5489 00b8 F3       		.byte	0xf3
 5490 00b9 01       		.uleb128 0x1
 5491 00ba 51       		.byte	0x51
 5492 00bb 9F       		.byte	0x9f
 5493 00bc 00000000 		.4byte	0
 5494 00c0 00000000 		.4byte	0
 5495              	.LLST4:
 5496 00c4 00000000 		.4byte	.LVL9
 5497 00c8 0F000000 		.4byte	.LVL12-1
 5498 00cc 0100     		.2byte	0x1
 5499 00ce 52       		.byte	0x52
 5500 00cf 0F000000 		.4byte	.LVL12-1
 5501 00d3 6C010000 		.4byte	.LFE32
 5502 00d7 0400     		.2byte	0x4
 5503 00d9 F3       		.byte	0xf3
 5504 00da 01       		.uleb128 0x1
 5505 00db 52       		.byte	0x52
 5506 00dc 9F       		.byte	0x9f
 5507 00dd 00000000 		.4byte	0
 5508 00e1 00000000 		.4byte	0
 5509              	.LLST5:
 5510 00e5 00000000 		.4byte	.LVL9
 5511 00e9 0F000000 		.4byte	.LVL12-1
 5512 00ed 0100     		.2byte	0x1
 5513 00ef 53       		.byte	0x53
 5514 00f0 0F000000 		.4byte	.LVL12-1
 5515 00f4 6C010000 		.4byte	.LFE32
 5516 00f8 0200     		.2byte	0x2
 5517 00fa 91       		.byte	0x91
 5518 00fb 64       		.sleb128 -28
 5519 00fc 00000000 		.4byte	0
 5520 0100 00000000 		.4byte	0
 5521              	.LLST6:
 5522 0104 38010000 		.4byte	.LVL47
 5523 0108 54010000 		.4byte	.LVL50
 5524 010c 0200     		.2byte	0x2
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 152


 5525 010e 31       		.byte	0x31
 5526 010f 9F       		.byte	0x9f
 5527 0110 54010000 		.4byte	.LVL50
 5528 0114 58010000 		.4byte	.LVL51
 5529 0118 0300     		.2byte	0x3
 5530 011a 09       		.byte	0x9
 5531 011b FF       		.byte	0xff
 5532 011c 9F       		.byte	0x9f
 5533 011d 00000000 		.4byte	0
 5534 0121 00000000 		.4byte	0
 5535              	.LLST7:
 5536 0125 08000000 		.4byte	.LVL11
 5537 0129 3A000000 		.4byte	.LVL19
 5538 012d 0200     		.2byte	0x2
 5539 012f 91       		.byte	0x91
 5540 0130 08       		.sleb128 8
 5541 0131 00000000 		.4byte	0
 5542 0135 00000000 		.4byte	0
 5543              	.LLST8:
 5544 0139 08000000 		.4byte	.LVL11
 5545 013d 0F000000 		.4byte	.LVL12-1
 5546 0141 0100     		.2byte	0x1
 5547 0143 52       		.byte	0x52
 5548 0144 0F000000 		.4byte	.LVL12-1
 5549 0148 32000000 		.4byte	.LVL18
 5550 014c 0100     		.2byte	0x1
 5551 014e 55       		.byte	0x55
 5552 014f 00000000 		.4byte	0
 5553 0153 00000000 		.4byte	0
 5554              	.LLST9:
 5555 0157 12000000 		.4byte	.LVL13
 5556 015b 18000000 		.4byte	.LVL14
 5557 015f 0100     		.2byte	0x1
 5558 0161 50       		.byte	0x50
 5559 0162 18000000 		.4byte	.LVL14
 5560 0166 2E000000 		.4byte	.LVL16
 5561 016a 0100     		.2byte	0x1
 5562 016c 54       		.byte	0x54
 5563 016d 2E000000 		.4byte	.LVL16
 5564 0171 30000000 		.4byte	.LVL17
 5565 0175 0200     		.2byte	0x2
 5566 0177 30       		.byte	0x30
 5567 0178 9F       		.byte	0x9f
 5568 0179 30000000 		.4byte	.LVL17
 5569 017d 3A000000 		.4byte	.LVL19
 5570 0181 0100     		.2byte	0x1
 5571 0183 54       		.byte	0x54
 5572 0184 00000000 		.4byte	0
 5573 0188 00000000 		.4byte	0
 5574              	.LLST10:
 5575 018c 3A000000 		.4byte	.LVL19
 5576 0190 3E000000 		.4byte	.LVL20
 5577 0194 0900     		.2byte	0x9
 5578 0196 74       		.byte	0x74
 5579 0197 30       		.sleb128 48
 5580 0198 06       		.byte	0x6
 5581 0199 75       		.byte	0x75
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 153


 5582 019a 00       		.sleb128 0
 5583 019b 22       		.byte	0x22
 5584 019c 34       		.byte	0x34
 5585 019d 1C       		.byte	0x1c
 5586 019e 9F       		.byte	0x9f
 5587 019f 3E000000 		.4byte	.LVL20
 5588 01a3 40000000 		.4byte	.LVL21
 5589 01a7 0700     		.2byte	0x7
 5590 01a9 74       		.byte	0x74
 5591 01aa 30       		.sleb128 48
 5592 01ab 06       		.byte	0x6
 5593 01ac 75       		.byte	0x75
 5594 01ad 00       		.sleb128 0
 5595 01ae 22       		.byte	0x22
 5596 01af 9F       		.byte	0x9f
 5597 01b0 46000000 		.4byte	.LVL22
 5598 01b4 62000000 		.4byte	.LVL26
 5599 01b8 0100     		.2byte	0x1
 5600 01ba 55       		.byte	0x55
 5601 01bb 62000000 		.4byte	.LVL26
 5602 01bf E6000000 		.4byte	.LVL42
 5603 01c3 0100     		.2byte	0x1
 5604 01c5 57       		.byte	0x57
 5605 01c6 00010000 		.4byte	.LVL45
 5606 01ca 14010000 		.4byte	.LVL46
 5607 01ce 0100     		.2byte	0x1
 5608 01d0 57       		.byte	0x57
 5609 01d1 00000000 		.4byte	0
 5610 01d5 00000000 		.4byte	0
 5611              	.LLST11:
 5612 01d9 46000000 		.4byte	.LVL22
 5613 01dd 54010000 		.4byte	.LVL50
 5614 01e1 0200     		.2byte	0x2
 5615 01e3 91       		.byte	0x91
 5616 01e4 0C       		.sleb128 12
 5617 01e5 00000000 		.4byte	0
 5618 01e9 00000000 		.4byte	0
 5619              	.LLST12:
 5620 01ed 46000000 		.4byte	.LVL22
 5621 01f1 6C000000 		.4byte	.LVL27
 5622 01f5 0200     		.2byte	0x2
 5623 01f7 91       		.byte	0x91
 5624 01f8 00       		.sleb128 0
 5625 01f9 6C000000 		.4byte	.LVL27
 5626 01fd 84000000 		.4byte	.LVL31
 5627 0201 0100     		.2byte	0x1
 5628 0203 55       		.byte	0x55
 5629 0204 00000000 		.4byte	0
 5630 0208 00000000 		.4byte	0
 5631              	.LLST13:
 5632 020c 46000000 		.4byte	.LVL22
 5633 0210 6E000000 		.4byte	.LVL28
 5634 0214 0100     		.2byte	0x1
 5635 0216 56       		.byte	0x56
 5636 0217 6E000000 		.4byte	.LVL28
 5637 021b 8A000000 		.4byte	.LVL32
 5638 021f 0400     		.2byte	0x4
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 154


 5639 0221 F3       		.byte	0xf3
 5640 0222 01       		.uleb128 0x1
 5641 0223 51       		.byte	0x51
 5642 0224 9F       		.byte	0x9f
 5643 0225 00000000 		.4byte	0
 5644 0229 00000000 		.4byte	0
 5645              	.LLST14:
 5646 022d 46000000 		.4byte	.LVL22
 5647 0231 8A000000 		.4byte	.LVL32
 5648 0235 0100     		.2byte	0x1
 5649 0237 54       		.byte	0x54
 5650 0238 00000000 		.4byte	0
 5651 023c 00000000 		.4byte	0
 5652              	.LLST15:
 5653 0240 46000000 		.4byte	.LVL22
 5654 0244 48000000 		.4byte	.LVL23
 5655 0248 0200     		.2byte	0x2
 5656 024a 30       		.byte	0x30
 5657 024b 9F       		.byte	0x9f
 5658 024c 48000000 		.4byte	.LVL23
 5659 0250 5E000000 		.4byte	.LVL25
 5660 0254 0100     		.2byte	0x1
 5661 0256 53       		.byte	0x53
 5662 0257 00000000 		.4byte	0
 5663 025b 00000000 		.4byte	0
 5664              	.LLST16:
 5665 025f B8000000 		.4byte	.LVL35
 5666 0263 C0000000 		.4byte	.LVL36
 5667 0267 0200     		.2byte	0x2
 5668 0269 30       		.byte	0x30
 5669 026a 9F       		.byte	0x9f
 5670 026b C0000000 		.4byte	.LVL36
 5671 026f C8000000 		.4byte	.LVL37
 5672 0273 0200     		.2byte	0x2
 5673 0275 31       		.byte	0x31
 5674 0276 9F       		.byte	0x9f
 5675 0277 C8000000 		.4byte	.LVL37
 5676 027b D0000000 		.4byte	.LVL38
 5677 027f 0200     		.2byte	0x2
 5678 0281 32       		.byte	0x32
 5679 0282 9F       		.byte	0x9f
 5680 0283 D0000000 		.4byte	.LVL38
 5681 0287 D8000000 		.4byte	.LVL39
 5682 028b 0200     		.2byte	0x2
 5683 028d 33       		.byte	0x33
 5684 028e 9F       		.byte	0x9f
 5685 028f D8000000 		.4byte	.LVL39
 5686 0293 00010000 		.4byte	.LVL45
 5687 0297 0200     		.2byte	0x2
 5688 0299 34       		.byte	0x34
 5689 029a 9F       		.byte	0x9f
 5690 029b 00000000 		.4byte	0
 5691 029f 00000000 		.4byte	0
 5692              	.LLST17:
 5693 02a3 00000000 		.4byte	.LVL52
 5694 02a7 0E000000 		.4byte	.LVL54
 5695 02ab 0100     		.2byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 155


 5696 02ad 50       		.byte	0x50
 5697 02ae 0E000000 		.4byte	.LVL54
 5698 02b2 24000000 		.4byte	.LFE36
 5699 02b6 0400     		.2byte	0x4
 5700 02b8 F3       		.byte	0xf3
 5701 02b9 01       		.uleb128 0x1
 5702 02ba 50       		.byte	0x50
 5703 02bb 9F       		.byte	0x9f
 5704 02bc 00000000 		.4byte	0
 5705 02c0 00000000 		.4byte	0
 5706              	.LLST18:
 5707 02c4 00000000 		.4byte	.LVL52
 5708 02c8 1C000000 		.4byte	.LVL56
 5709 02cc 0200     		.2byte	0x2
 5710 02ce 30       		.byte	0x30
 5711 02cf 9F       		.byte	0x9f
 5712 02d0 00000000 		.4byte	0
 5713 02d4 00000000 		.4byte	0
 5714              	.LLST19:
 5715 02d8 00000000 		.4byte	.LVL52
 5716 02dc 0E000000 		.4byte	.LVL54
 5717 02e0 0100     		.2byte	0x1
 5718 02e2 50       		.byte	0x50
 5719 02e3 0E000000 		.4byte	.LVL54
 5720 02e7 24000000 		.4byte	.LFE36
 5721 02eb 0400     		.2byte	0x4
 5722 02ed F3       		.byte	0xf3
 5723 02ee 01       		.uleb128 0x1
 5724 02ef 50       		.byte	0x50
 5725 02f0 9F       		.byte	0x9f
 5726 02f1 00000000 		.4byte	0
 5727 02f5 00000000 		.4byte	0
 5728              	.LLST20:
 5729 02f9 0C000000 		.4byte	.LVL53
 5730 02fd 0E000000 		.4byte	.LVL54
 5731 0301 0100     		.2byte	0x1
 5732 0303 50       		.byte	0x50
 5733 0304 0E000000 		.4byte	.LVL54
 5734 0308 1A000000 		.4byte	.LVL55
 5735 030c 0400     		.2byte	0x4
 5736 030e F3       		.byte	0xf3
 5737 030f 01       		.uleb128 0x1
 5738 0310 50       		.byte	0x50
 5739 0311 9F       		.byte	0x9f
 5740 0312 00000000 		.4byte	0
 5741 0316 00000000 		.4byte	0
 5742              	.LLST21:
 5743 031a 00000000 		.4byte	.LVL57
 5744 031e 11000000 		.4byte	.LVL58-1
 5745 0322 0100     		.2byte	0x1
 5746 0324 50       		.byte	0x50
 5747 0325 11000000 		.4byte	.LVL58-1
 5748 0329 52000000 		.4byte	.LVL64
 5749 032d 0100     		.2byte	0x1
 5750 032f 54       		.byte	0x54
 5751 0330 52000000 		.4byte	.LVL64
 5752 0334 5C000000 		.4byte	.LFE37
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 156


 5753 0338 0400     		.2byte	0x4
 5754 033a F3       		.byte	0xf3
 5755 033b 01       		.uleb128 0x1
 5756 033c 50       		.byte	0x50
 5757 033d 9F       		.byte	0x9f
 5758 033e 00000000 		.4byte	0
 5759 0342 00000000 		.4byte	0
 5760              	.LLST22:
 5761 0346 00000000 		.4byte	.LVL57
 5762 034a 11000000 		.4byte	.LVL58-1
 5763 034e 0100     		.2byte	0x1
 5764 0350 50       		.byte	0x50
 5765 0351 11000000 		.4byte	.LVL58-1
 5766 0355 52000000 		.4byte	.LVL64
 5767 0359 0100     		.2byte	0x1
 5768 035b 54       		.byte	0x54
 5769 035c 52000000 		.4byte	.LVL64
 5770 0360 5C000000 		.4byte	.LFE37
 5771 0364 0400     		.2byte	0x4
 5772 0366 F3       		.byte	0xf3
 5773 0367 01       		.uleb128 0x1
 5774 0368 50       		.byte	0x50
 5775 0369 9F       		.byte	0x9f
 5776 036a 00000000 		.4byte	0
 5777 036e 00000000 		.4byte	0
 5778              	.LLST23:
 5779 0372 00000000 		.4byte	.LVL65
 5780 0376 07000000 		.4byte	.LVL67-1
 5781 037a 0100     		.2byte	0x1
 5782 037c 50       		.byte	0x50
 5783 037d 07000000 		.4byte	.LVL67-1
 5784 0381 5E000000 		.4byte	.LVL77
 5785 0385 0100     		.2byte	0x1
 5786 0387 54       		.byte	0x54
 5787 0388 5E000000 		.4byte	.LVL77
 5788 038c 68000000 		.4byte	.LFE38
 5789 0390 0400     		.2byte	0x4
 5790 0392 F3       		.byte	0xf3
 5791 0393 01       		.uleb128 0x1
 5792 0394 50       		.byte	0x50
 5793 0395 9F       		.byte	0x9f
 5794 0396 00000000 		.4byte	0
 5795 039a 00000000 		.4byte	0
 5796              	.LLST24:
 5797 039e 00000000 		.4byte	.LVL65
 5798 03a2 2A000000 		.4byte	.LVL71
 5799 03a6 0200     		.2byte	0x2
 5800 03a8 30       		.byte	0x30
 5801 03a9 9F       		.byte	0x9f
 5802 03aa 2A000000 		.4byte	.LVL71
 5803 03ae 4A000000 		.4byte	.LVL73
 5804 03b2 0100     		.2byte	0x1
 5805 03b4 57       		.byte	0x57
 5806 03b5 4A000000 		.4byte	.LVL73
 5807 03b9 52000000 		.4byte	.LVL74
 5808 03bd 0200     		.2byte	0x2
 5809 03bf 30       		.byte	0x30
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 157


 5810 03c0 9F       		.byte	0x9f
 5811 03c1 56000000 		.4byte	.LVL75
 5812 03c5 5E000000 		.4byte	.LVL78
 5813 03c9 0100     		.2byte	0x1
 5814 03cb 57       		.byte	0x57
 5815 03cc 5E000000 		.4byte	.LVL78
 5816 03d0 68000000 		.4byte	.LFE38
 5817 03d4 0100     		.2byte	0x1
 5818 03d6 50       		.byte	0x50
 5819 03d7 00000000 		.4byte	0
 5820 03db 00000000 		.4byte	0
 5821              	.LLST25:
 5822 03df 04000000 		.4byte	.LVL66
 5823 03e3 07000000 		.4byte	.LVL67-1
 5824 03e7 0100     		.2byte	0x1
 5825 03e9 50       		.byte	0x50
 5826 03ea 07000000 		.4byte	.LVL67-1
 5827 03ee 5E000000 		.4byte	.LVL77
 5828 03f2 0100     		.2byte	0x1
 5829 03f4 54       		.byte	0x54
 5830 03f5 5E000000 		.4byte	.LVL77
 5831 03f9 68000000 		.4byte	.LFE38
 5832 03fd 0400     		.2byte	0x4
 5833 03ff F3       		.byte	0xf3
 5834 0400 01       		.uleb128 0x1
 5835 0401 50       		.byte	0x50
 5836 0402 9F       		.byte	0x9f
 5837 0403 00000000 		.4byte	0
 5838 0407 00000000 		.4byte	0
 5839              	.LLST26:
 5840 040b 0A000000 		.4byte	.LVL68
 5841 040f 0C000000 		.4byte	.LVL69
 5842 0413 0100     		.2byte	0x1
 5843 0415 50       		.byte	0x50
 5844 0416 0C000000 		.4byte	.LVL69
 5845 041a 68000000 		.4byte	.LFE38
 5846 041e 0200     		.2byte	0x2
 5847 0420 7D       		.byte	0x7d
 5848 0421 00       		.sleb128 0
 5849 0422 00000000 		.4byte	0
 5850 0426 00000000 		.4byte	0
 5851              	.LLST27:
 5852 042a 18000000 		.4byte	.LVL79
 5853 042e 29000000 		.4byte	.LVL80-1
 5854 0432 0100     		.2byte	0x1
 5855 0434 50       		.byte	0x50
 5856 0435 00000000 		.4byte	0
 5857 0439 00000000 		.4byte	0
 5858              	.LLST28:
 5859 043d 0A000000 		.4byte	.LVL83
 5860 0441 10000000 		.4byte	.LVL85
 5861 0445 0100     		.2byte	0x1
 5862 0447 54       		.byte	0x54
 5863 0448 10000000 		.4byte	.LVL85
 5864 044c 18000000 		.4byte	.LFE43
 5865 0450 0100     		.2byte	0x1
 5866 0452 50       		.byte	0x50
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 158


 5867 0453 00000000 		.4byte	0
 5868 0457 00000000 		.4byte	0
 5869              	.LLST29:
 5870 045b 0A000000 		.4byte	.LVL87
 5871 045f 10000000 		.4byte	.LVL89
 5872 0463 0100     		.2byte	0x1
 5873 0465 54       		.byte	0x54
 5874 0466 10000000 		.4byte	.LVL89
 5875 046a 18000000 		.4byte	.LFE44
 5876 046e 0100     		.2byte	0x1
 5877 0470 50       		.byte	0x50
 5878 0471 00000000 		.4byte	0
 5879 0475 00000000 		.4byte	0
 5880              	.LLST30:
 5881 0479 06000000 		.4byte	.LVL86
 5882 047d 0D000000 		.4byte	.LVL88-1
 5883 0481 0100     		.2byte	0x1
 5884 0483 50       		.byte	0x50
 5885 0484 00000000 		.4byte	0
 5886 0488 00000000 		.4byte	0
 5887              	.LLST31:
 5888 048c 3C000000 		.4byte	.LVL96
 5889 0490 3E000000 		.4byte	.LVL97
 5890 0494 0500     		.2byte	0x5
 5891 0496 73       		.byte	0x73
 5892 0497 0C       		.sleb128 12
 5893 0498 06       		.byte	0x6
 5894 0499 23       		.byte	0x23
 5895 049a 0C       		.uleb128 0xc
 5896 049b 3E000000 		.4byte	.LVL97
 5897 049f 40000000 		.4byte	.LVL98
 5898 04a3 0200     		.2byte	0x2
 5899 04a5 73       		.byte	0x73
 5900 04a6 0C       		.sleb128 12
 5901 04a7 40000000 		.4byte	.LVL98
 5902 04ab 42000000 		.4byte	.LVL99
 5903 04af 0100     		.2byte	0x1
 5904 04b1 53       		.byte	0x53
 5905 04b2 9E000000 		.4byte	.LVL108
 5906 04b6 EA000000 		.4byte	.LVL115
 5907 04ba 0100     		.2byte	0x1
 5908 04bc 55       		.byte	0x55
 5909 04bd 00000000 		.4byte	0
 5910 04c1 00000000 		.4byte	0
 5911              	.LLST32:
 5912 04c5 A0000000 		.4byte	.LVL109
 5913 04c9 AC000000 		.4byte	.LVL110
 5914 04cd 0100     		.2byte	0x1
 5915 04cf 53       		.byte	0x53
 5916 04d0 AC000000 		.4byte	.LVL110
 5917 04d4 B3000000 		.4byte	.LVL111-1
 5918 04d8 0200     		.2byte	0x2
 5919 04da 75       		.byte	0x75
 5920 04db 04       		.sleb128 4
 5921 04dc 00000000 		.4byte	0
 5922 04e0 00000000 		.4byte	0
 5923              	.LLST33:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 159


 5924 04e4 00000000 		.4byte	.LVL90
 5925 04e8 4E000000 		.4byte	.LVL100
 5926 04ec 0200     		.2byte	0x2
 5927 04ee 30       		.byte	0x30
 5928 04ef 9F       		.byte	0x9f
 5929 04f0 4E000000 		.4byte	.LVL100
 5930 04f4 80000000 		.4byte	.LVL104
 5931 04f8 0100     		.2byte	0x1
 5932 04fa 56       		.byte	0x56
 5933 04fb 80000000 		.4byte	.LVL104
 5934 04ff 8C000000 		.4byte	.LVL105
 5935 0503 0200     		.2byte	0x2
 5936 0505 30       		.byte	0x30
 5937 0506 9F       		.byte	0x9f
 5938 0507 8C000000 		.4byte	.LVL105
 5939 050b E8000000 		.4byte	.LVL114
 5940 050f 0100     		.2byte	0x1
 5941 0511 56       		.byte	0x56
 5942 0512 EA000000 		.4byte	.LVL115
 5943 0516 EC000000 		.4byte	.LVL116
 5944 051a 0100     		.2byte	0x1
 5945 051c 56       		.byte	0x56
 5946 051d EC000000 		.4byte	.LVL116
 5947 0521 FC000000 		.4byte	.LFE46
 5948 0525 0100     		.2byte	0x1
 5949 0527 50       		.byte	0x50
 5950 0528 00000000 		.4byte	0
 5951 052c 00000000 		.4byte	0
 5952              	.LLST34:
 5953 0530 16000000 		.4byte	.LVL91
 5954 0534 1A000000 		.4byte	.LVL92
 5955 0538 0100     		.2byte	0x1
 5956 053a 52       		.byte	0x52
 5957 053b 1A000000 		.4byte	.LVL92
 5958 053f 20000000 		.4byte	.LVL93
 5959 0543 0100     		.2byte	0x1
 5960 0545 51       		.byte	0x51
 5961 0546 20000000 		.4byte	.LVL93
 5962 054a 80000000 		.4byte	.LVL104
 5963 054e 0200     		.2byte	0x2
 5964 0550 7D       		.byte	0x7d
 5965 0551 00       		.sleb128 0
 5966 0552 96000000 		.4byte	.LVL107
 5967 0556 EA000000 		.4byte	.LVL115
 5968 055a 0200     		.2byte	0x2
 5969 055c 7D       		.byte	0x7d
 5970 055d 00       		.sleb128 0
 5971 055e 00000000 		.4byte	0
 5972 0562 00000000 		.4byte	0
 5973              	.LLST35:
 5974 0566 20000000 		.4byte	.LVL93
 5975 056a 28000000 		.4byte	.LVL94
 5976 056e 0100     		.2byte	0x1
 5977 0570 51       		.byte	0x51
 5978 0571 28000000 		.4byte	.LVL94
 5979 0575 2C000000 		.4byte	.LVL95
 5980 0579 0500     		.2byte	0x5
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 160


 5981 057b 03       		.byte	0x3
 5982 057c 08000000 		.4byte	pxOverflowDelayedTaskList
 5983 0580 00000000 		.4byte	0
 5984 0584 00000000 		.4byte	0
 5985              	.LLST36:
 5986 0588 2A000000 		.4byte	.LVL119
 5987 058c 64000000 		.4byte	.LVL123
 5988 0590 0100     		.2byte	0x1
 5989 0592 56       		.byte	0x56
 5990 0593 00000000 		.4byte	0
 5991 0597 00000000 		.4byte	0
 5992              	.LLST37:
 5993 059b 00000000 		.4byte	.LVL117
 5994 059f 70000000 		.4byte	.LVL124
 5995 05a3 0200     		.2byte	0x2
 5996 05a5 30       		.byte	0x30
 5997 05a6 9F       		.byte	0x9f
 5998 05a7 70000000 		.4byte	.LVL124
 5999 05ab 76000000 		.4byte	.LVL126
 6000 05af 0200     		.2byte	0x2
 6001 05b1 31       		.byte	0x31
 6002 05b2 9F       		.byte	0x9f
 6003 05b3 76000000 		.4byte	.LVL126
 6004 05b7 90000000 		.4byte	.LVL128
 6005 05bb 0200     		.2byte	0x2
 6006 05bd 30       		.byte	0x30
 6007 05be 9F       		.byte	0x9f
 6008 05bf 90000000 		.4byte	.LVL128
 6009 05c3 96000000 		.4byte	.LVL130
 6010 05c7 0100     		.2byte	0x1
 6011 05c9 54       		.byte	0x54
 6012 05ca 96000000 		.4byte	.LVL130
 6013 05ce A0000000 		.4byte	.LFE42
 6014 05d2 0100     		.2byte	0x1
 6015 05d4 50       		.byte	0x50
 6016 05d5 00000000 		.4byte	0
 6017 05d9 00000000 		.4byte	0
 6018              	.LLST38:
 6019 05dd 00000000 		.4byte	.LVL131
 6020 05e1 09000000 		.4byte	.LVL132-1
 6021 05e5 0100     		.2byte	0x1
 6022 05e7 50       		.byte	0x50
 6023 05e8 09000000 		.4byte	.LVL132-1
 6024 05ec 4A000000 		.4byte	.LVL142
 6025 05f0 0100     		.2byte	0x1
 6026 05f2 55       		.byte	0x55
 6027 05f3 4A000000 		.4byte	.LVL142
 6028 05f7 50000000 		.4byte	.LFE33
 6029 05fb 0400     		.2byte	0x4
 6030 05fd F3       		.byte	0xf3
 6031 05fe 01       		.uleb128 0x1
 6032 05ff 50       		.byte	0x50
 6033 0600 9F       		.byte	0x9f
 6034 0601 00000000 		.4byte	0
 6035 0605 00000000 		.4byte	0
 6036              	.LLST39:
 6037 0609 00000000 		.4byte	.LVL131
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 161


 6038 060d 09000000 		.4byte	.LVL132-1
 6039 0611 0100     		.2byte	0x1
 6040 0613 51       		.byte	0x51
 6041 0614 09000000 		.4byte	.LVL132-1
 6042 0618 12000000 		.4byte	.LVL134
 6043 061c 0100     		.2byte	0x1
 6044 061e 54       		.byte	0x54
 6045 061f 12000000 		.4byte	.LVL134
 6046 0623 50000000 		.4byte	.LFE33
 6047 0627 0400     		.2byte	0x4
 6048 0629 F3       		.byte	0xf3
 6049 062a 01       		.uleb128 0x1
 6050 062b 51       		.byte	0x51
 6051 062c 9F       		.byte	0x9f
 6052 062d 00000000 		.4byte	0
 6053 0631 00000000 		.4byte	0
 6054              	.LLST40:
 6055 0635 12000000 		.4byte	.LVL134
 6056 0639 4A000000 		.4byte	.LVL141
 6057 063d 0100     		.2byte	0x1
 6058 063f 54       		.byte	0x54
 6059 0640 00000000 		.4byte	0
 6060 0644 00000000 		.4byte	0
 6061              	.LLST41:
 6062 0648 42000000 		.4byte	.LVL139
 6063 064c 49000000 		.4byte	.LVL140-1
 6064 0650 0100     		.2byte	0x1
 6065 0652 50       		.byte	0x50
 6066 0653 00000000 		.4byte	0
 6067 0657 00000000 		.4byte	0
 6068              	.LLST42:
 6069 065b 00000000 		.4byte	.LVL131
 6070 065f 2A000000 		.4byte	.LVL136
 6071 0663 0200     		.2byte	0x2
 6072 0665 30       		.byte	0x30
 6073 0666 9F       		.byte	0x9f
 6074 0667 00000000 		.4byte	0
 6075 066b 00000000 		.4byte	0
 6076              	.LLST43:
 6077 066f 10000000 		.4byte	.LVL133
 6078 0673 28000000 		.4byte	.LVL135
 6079 0677 0100     		.2byte	0x1
 6080 0679 53       		.byte	0x53
 6081 067a 00000000 		.4byte	0
 6082 067e 00000000 		.4byte	0
 6083              	.LLST44:
 6084 0682 00000000 		.4byte	.LVL143
 6085 0686 06000000 		.4byte	.LVL144
 6086 068a 0100     		.2byte	0x1
 6087 068c 50       		.byte	0x50
 6088 068d 06000000 		.4byte	.LVL144
 6089 0691 0C000000 		.4byte	.LVL146
 6090 0695 0400     		.2byte	0x4
 6091 0697 F3       		.byte	0xf3
 6092 0698 01       		.uleb128 0x1
 6093 0699 50       		.byte	0x50
 6094 069a 9F       		.byte	0x9f
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 162


 6095 069b 0C000000 		.4byte	.LVL146
 6096 069f 0F000000 		.4byte	.LVL147-1
 6097 06a3 0100     		.2byte	0x1
 6098 06a5 50       		.byte	0x50
 6099 06a6 0F000000 		.4byte	.LVL147-1
 6100 06aa 18000000 		.4byte	.LVL148
 6101 06ae 0100     		.2byte	0x1
 6102 06b0 54       		.byte	0x54
 6103 06b1 18000000 		.4byte	.LVL148
 6104 06b5 34000000 		.4byte	.LFE34
 6105 06b9 0400     		.2byte	0x4
 6106 06bb F3       		.byte	0xf3
 6107 06bc 01       		.uleb128 0x1
 6108 06bd 50       		.byte	0x50
 6109 06be 9F       		.byte	0x9f
 6110 06bf 00000000 		.4byte	0
 6111 06c3 00000000 		.4byte	0
 6112              	.LLST45:
 6113 06c7 18000000 		.4byte	.LVL148
 6114 06cb 2C000000 		.4byte	.LVL152
 6115 06cf 0100     		.2byte	0x1
 6116 06d1 54       		.byte	0x54
 6117 06d2 00000000 		.4byte	0
 6118 06d6 00000000 		.4byte	0
 6119              	.LLST46:
 6120 06da 00000000 		.4byte	.LVL143
 6121 06de 06000000 		.4byte	.LVL144
 6122 06e2 0200     		.2byte	0x2
 6123 06e4 30       		.byte	0x30
 6124 06e5 9F       		.byte	0x9f
 6125 06e6 0C000000 		.4byte	.LVL146
 6126 06ea 28000000 		.4byte	.LVL151
 6127 06ee 0200     		.2byte	0x2
 6128 06f0 30       		.byte	0x30
 6129 06f1 9F       		.byte	0x9f
 6130 06f2 28000000 		.4byte	.LVL151
 6131 06f6 2C000000 		.4byte	.LVL152
 6132 06fa 0100     		.2byte	0x1
 6133 06fc 50       		.byte	0x50
 6134 06fd 00000000 		.4byte	0
 6135 0701 00000000 		.4byte	0
 6136              	.LLST47:
 6137 0705 60000000 		.4byte	.LVL156
 6138 0709 82000000 		.4byte	.LVL157
 6139 070d 0B00     		.2byte	0xb
 6140 070f 70       		.byte	0x70
 6141 0710 00       		.sleb128 0
 6142 0711 44       		.byte	0x44
 6143 0712 1E       		.byte	0x1e
 6144 0713 03       		.byte	0x3
 6145 0714 14000000 		.4byte	pxReadyTasksLists
 6146 0718 22       		.byte	0x22
 6147 0719 9F       		.byte	0x9f
 6148 071a 00000000 		.4byte	0
 6149 071e 00000000 		.4byte	0
 6150              	.LLST48:
 6151 0722 00000000 		.4byte	.LVL158
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 163


 6152 0726 07000000 		.4byte	.LVL159-1
 6153 072a 0100     		.2byte	0x1
 6154 072c 50       		.byte	0x50
 6155 072d 07000000 		.4byte	.LVL159-1
 6156 0731 10000000 		.4byte	.LVL160
 6157 0735 0100     		.2byte	0x1
 6158 0737 54       		.byte	0x54
 6159 0738 00000000 		.4byte	0
 6160 073c 00000000 		.4byte	0
 6161              	.LLST49:
 6162 0740 10000000 		.4byte	.LVL160
 6163 0744 58000000 		.4byte	.LVL167
 6164 0748 0100     		.2byte	0x1
 6165 074a 54       		.byte	0x54
 6166 074b 58000000 		.4byte	.LVL167
 6167 074f 58000000 		.4byte	.LVL168
 6168 0753 0300     		.2byte	0x3
 6169 0755 77       		.byte	0x77
 6170 0756 7C       		.sleb128 -4
 6171 0757 9F       		.byte	0x9f
 6172 0758 00000000 		.4byte	0
 6173 075c 00000000 		.4byte	0
 6174              	.LLST50:
 6175 0760 00000000 		.4byte	.LVL169
 6176 0764 0D000000 		.4byte	.LVL171-1
 6177 0768 0100     		.2byte	0x1
 6178 076a 50       		.byte	0x50
 6179 076b 0D000000 		.4byte	.LVL171-1
 6180 076f 3C000000 		.4byte	.LFE48
 6181 0773 0400     		.2byte	0x4
 6182 0775 F3       		.byte	0xf3
 6183 0776 01       		.uleb128 0x1
 6184 0777 50       		.byte	0x50
 6185 0778 9F       		.byte	0x9f
 6186 0779 00000000 		.4byte	0
 6187 077d 00000000 		.4byte	0
 6188              	.LLST51:
 6189 0781 00000000 		.4byte	.LVL169
 6190 0785 08000000 		.4byte	.LVL170
 6191 0789 0100     		.2byte	0x1
 6192 078b 51       		.byte	0x51
 6193 078c 08000000 		.4byte	.LVL170
 6194 0790 30000000 		.4byte	.LVL177
 6195 0794 0100     		.2byte	0x1
 6196 0796 55       		.byte	0x55
 6197 0797 30000000 		.4byte	.LVL177
 6198 079b 3C000000 		.4byte	.LFE48
 6199 079f 0400     		.2byte	0x4
 6200 07a1 F3       		.byte	0xf3
 6201 07a2 01       		.uleb128 0x1
 6202 07a3 51       		.byte	0x51
 6203 07a4 9F       		.byte	0x9f
 6204 07a5 00000000 		.4byte	0
 6205 07a9 00000000 		.4byte	0
 6206              	.LLST52:
 6207 07ad 2A000000 		.4byte	.LVL174
 6208 07b1 2C000000 		.4byte	.LVL175
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 164


 6209 07b5 0600     		.2byte	0x6
 6210 07b7 75       		.byte	0x75
 6211 07b8 00       		.sleb128 0
 6212 07b9 70       		.byte	0x70
 6213 07ba 00       		.sleb128 0
 6214 07bb 22       		.byte	0x22
 6215 07bc 9F       		.byte	0x9f
 6216 07bd 2C000000 		.4byte	.LVL175
 6217 07c1 2F000000 		.4byte	.LVL176-1
 6218 07c5 0100     		.2byte	0x1
 6219 07c7 50       		.byte	0x50
 6220 07c8 00000000 		.4byte	0
 6221 07cc 00000000 		.4byte	0
 6222              	.LLST53:
 6223 07d0 00000000 		.4byte	.LVL178
 6224 07d4 0C000000 		.4byte	.LVL180
 6225 07d8 0100     		.2byte	0x1
 6226 07da 50       		.byte	0x50
 6227 07db 0C000000 		.4byte	.LVL180
 6228 07df 5C000000 		.4byte	.LFE49
 6229 07e3 0400     		.2byte	0x4
 6230 07e5 F3       		.byte	0xf3
 6231 07e6 01       		.uleb128 0x1
 6232 07e7 50       		.byte	0x50
 6233 07e8 9F       		.byte	0x9f
 6234 07e9 00000000 		.4byte	0
 6235 07ed 00000000 		.4byte	0
 6236              	.LLST54:
 6237 07f1 06000000 		.4byte	.LVL179
 6238 07f5 52000000 		.4byte	.LVL186
 6239 07f9 0100     		.2byte	0x1
 6240 07fb 55       		.byte	0x55
 6241 07fc 00000000 		.4byte	0
 6242 0800 00000000 		.4byte	0
 6243              	.LLST55:
 6244 0804 4E000000 		.4byte	.LVL184
 6245 0808 52000000 		.4byte	.LVL185
 6246 080c 0200     		.2byte	0x2
 6247 080e 31       		.byte	0x31
 6248 080f 9F       		.byte	0x9f
 6249 0810 52000000 		.4byte	.LVL185
 6250 0814 5C000000 		.4byte	.LFE49
 6251 0818 0100     		.2byte	0x1
 6252 081a 50       		.byte	0x50
 6253 081b 00000000 		.4byte	0
 6254 081f 00000000 		.4byte	0
 6255              	.LLST56:
 6256 0823 00000000 		.4byte	.LVL188
 6257 0827 09000000 		.4byte	.LVL189-1
 6258 082b 0100     		.2byte	0x1
 6259 082d 50       		.byte	0x50
 6260 082e 09000000 		.4byte	.LVL189-1
 6261 0832 44000000 		.4byte	.LVL194
 6262 0836 0100     		.2byte	0x1
 6263 0838 54       		.byte	0x54
 6264 0839 44000000 		.4byte	.LVL194
 6265 083d 50000000 		.4byte	.LFE51
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 165


 6266 0841 0400     		.2byte	0x4
 6267 0843 F3       		.byte	0xf3
 6268 0844 01       		.uleb128 0x1
 6269 0845 50       		.byte	0x50
 6270 0846 9F       		.byte	0x9f
 6271 0847 00000000 		.4byte	0
 6272 084b 00000000 		.4byte	0
 6273              	.LLST57:
 6274 084f 00000000 		.4byte	.LVL188
 6275 0853 09000000 		.4byte	.LVL189-1
 6276 0857 0100     		.2byte	0x1
 6277 0859 51       		.byte	0x51
 6278 085a 09000000 		.4byte	.LVL189-1
 6279 085e 44000000 		.4byte	.LVL195
 6280 0862 0100     		.2byte	0x1
 6281 0864 55       		.byte	0x55
 6282 0865 44000000 		.4byte	.LVL195
 6283 0869 50000000 		.4byte	.LFE51
 6284 086d 0400     		.2byte	0x4
 6285 086f F3       		.byte	0xf3
 6286 0870 01       		.uleb128 0x1
 6287 0871 51       		.byte	0x51
 6288 0872 9F       		.byte	0x9f
 6289 0873 00000000 		.4byte	0
 6290 0877 00000000 		.4byte	0
 6291              	.LLST58:
 6292 087b 3C000000 		.4byte	.LVL191
 6293 087f 3E000000 		.4byte	.LVL192
 6294 0883 0200     		.2byte	0x2
 6295 0885 30       		.byte	0x30
 6296 0886 9F       		.byte	0x9f
 6297 0887 3E000000 		.4byte	.LVL192
 6298 088b 44000000 		.4byte	.LVL196
 6299 088f 0100     		.2byte	0x1
 6300 0891 56       		.byte	0x56
 6301 0892 44000000 		.4byte	.LVL196
 6302 0896 50000000 		.4byte	.LFE51
 6303 089a 0100     		.2byte	0x1
 6304 089c 50       		.byte	0x50
 6305 089d 00000000 		.4byte	0
 6306 08a1 00000000 		.4byte	0
 6307              	.LLST59:
 6308 08a5 10000000 		.4byte	.LVL190
 6309 08a9 3B000000 		.4byte	.LVL191-1
 6310 08ad 0100     		.2byte	0x1
 6311 08af 51       		.byte	0x51
 6312 08b0 00000000 		.4byte	0
 6313 08b4 00000000 		.4byte	0
 6314              	.LLST60:
 6315 08b8 00000000 		.4byte	.LVL197
 6316 08bc 08000000 		.4byte	.LVL198
 6317 08c0 0100     		.2byte	0x1
 6318 08c2 50       		.byte	0x50
 6319 08c3 00000000 		.4byte	0
 6320 08c7 00000000 		.4byte	0
 6321              	.LLST61:
 6322 08cb 08000000 		.4byte	.LVL198
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 166


 6323 08cf 0C000000 		.4byte	.LVL199
 6324 08d3 0100     		.2byte	0x1
 6325 08d5 50       		.byte	0x50
 6326 08d6 00000000 		.4byte	0
 6327 08da 00000000 		.4byte	0
 6328              	.LLST62:
 6329 08de 16000000 		.4byte	.LVL202
 6330 08e2 18000000 		.4byte	.LVL203
 6331 08e6 0900     		.2byte	0x9
 6332 08e8 70       		.byte	0x70
 6333 08e9 00       		.sleb128 0
 6334 08ea 32       		.byte	0x32
 6335 08eb 25       		.byte	0x25
 6336 08ec 0A       		.byte	0xa
 6337 08ed FFFF     		.2byte	0xffff
 6338 08ef 1A       		.byte	0x1a
 6339 08f0 9F       		.byte	0x9f
 6340 08f1 00000000 		.4byte	0
 6341 08f5 00000000 		.4byte	0
 6342              	.LLST63:
 6343 08f9 10000000 		.4byte	.LVL200
 6344 08fd 12000000 		.4byte	.LVL201
 6345 0901 0600     		.2byte	0x6
 6346 0903 71       		.byte	0x71
 6347 0904 00       		.sleb128 0
 6348 0905 73       		.byte	0x73
 6349 0906 00       		.sleb128 0
 6350 0907 22       		.byte	0x22
 6351 0908 9F       		.byte	0x9f
 6352 0909 12000000 		.4byte	.LVL201
 6353 090d 16000000 		.4byte	.LVL202
 6354 0911 0800     		.2byte	0x8
 6355 0913 71       		.byte	0x71
 6356 0914 00       		.sleb128 0
 6357 0915 73       		.byte	0x73
 6358 0916 00       		.sleb128 0
 6359 0917 22       		.byte	0x22
 6360 0918 31       		.byte	0x31
 6361 0919 1C       		.byte	0x1c
 6362 091a 9F       		.byte	0x9f
 6363 091b 00000000 		.4byte	0
 6364 091f 00000000 		.4byte	0
 6365              	.LLST64:
 6366 0923 10000000 		.4byte	.LVL200
 6367 0927 16000000 		.4byte	.LVL202
 6368 092b 0100     		.2byte	0x1
 6369 092d 50       		.byte	0x50
 6370 092e 00000000 		.4byte	0
 6371 0932 00000000 		.4byte	0
 6372              	.LLST65:
 6373 0936 00000000 		.4byte	.LVL205
 6374 093a 18000000 		.4byte	.LVL206
 6375 093e 0100     		.2byte	0x1
 6376 0940 50       		.byte	0x50
 6377 0941 18000000 		.4byte	.LVL206
 6378 0945 5C000000 		.4byte	.LVL209
 6379 0949 0100     		.2byte	0x1
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 167


 6380 094b 54       		.byte	0x54
 6381 094c 5C000000 		.4byte	.LVL209
 6382 0950 68000000 		.4byte	.LFE62
 6383 0954 0400     		.2byte	0x4
 6384 0956 F3       		.byte	0xf3
 6385 0957 01       		.uleb128 0x1
 6386 0958 50       		.byte	0x50
 6387 0959 9F       		.byte	0x9f
 6388 095a 00000000 		.4byte	0
 6389 095e 00000000 		.4byte	0
 6390              	.LLST66:
 6391 0962 00000000 		.4byte	.LVL205
 6392 0966 18000000 		.4byte	.LVL206
 6393 096a 0100     		.2byte	0x1
 6394 096c 50       		.byte	0x50
 6395 096d 18000000 		.4byte	.LVL206
 6396 0971 5C000000 		.4byte	.LVL209
 6397 0975 0100     		.2byte	0x1
 6398 0977 54       		.byte	0x54
 6399 0978 5C000000 		.4byte	.LVL209
 6400 097c 68000000 		.4byte	.LFE62
 6401 0980 0400     		.2byte	0x4
 6402 0982 F3       		.byte	0xf3
 6403 0983 01       		.uleb128 0x1
 6404 0984 50       		.byte	0x50
 6405 0985 9F       		.byte	0x9f
 6406 0986 00000000 		.4byte	0
 6407 098a 00000000 		.4byte	0
 6408              	.LLST67:
 6409 098e 00000000 		.4byte	.LVL210
 6410 0992 12000000 		.4byte	.LVL211
 6411 0996 0100     		.2byte	0x1
 6412 0998 50       		.byte	0x50
 6413 0999 12000000 		.4byte	.LVL211
 6414 099d 3A000000 		.4byte	.LVL214
 6415 09a1 0100     		.2byte	0x1
 6416 09a3 54       		.byte	0x54
 6417 09a4 3A000000 		.4byte	.LVL214
 6418 09a8 44000000 		.4byte	.LFE63
 6419 09ac 0400     		.2byte	0x4
 6420 09ae F3       		.byte	0xf3
 6421 09af 01       		.uleb128 0x1
 6422 09b0 50       		.byte	0x50
 6423 09b1 9F       		.byte	0x9f
 6424 09b2 00000000 		.4byte	0
 6425 09b6 00000000 		.4byte	0
 6426              	.LLST68:
 6427 09ba 00000000 		.4byte	.LVL210
 6428 09be 12000000 		.4byte	.LVL211
 6429 09c2 0100     		.2byte	0x1
 6430 09c4 50       		.byte	0x50
 6431 09c5 12000000 		.4byte	.LVL211
 6432 09c9 3A000000 		.4byte	.LVL214
 6433 09cd 0100     		.2byte	0x1
 6434 09cf 54       		.byte	0x54
 6435 09d0 3A000000 		.4byte	.LVL214
 6436 09d4 44000000 		.4byte	.LFE63
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 168


 6437 09d8 0400     		.2byte	0x4
 6438 09da F3       		.byte	0xf3
 6439 09db 01       		.uleb128 0x1
 6440 09dc 50       		.byte	0x50
 6441 09dd 9F       		.byte	0x9f
 6442 09de 00000000 		.4byte	0
 6443 09e2 00000000 		.4byte	0
 6444              		.section	.debug_aranges,"",%progbits
 6445 0000 EC000000 		.4byte	0xec
 6446 0004 0200     		.2byte	0x2
 6447 0006 00000000 		.4byte	.Ldebug_info0
 6448 000a 04       		.byte	0x4
 6449 000b 00       		.byte	0
 6450 000c 0000     		.2byte	0
 6451 000e 0000     		.2byte	0
 6452 0010 00000000 		.4byte	.LFB53
 6453 0014 02000000 		.4byte	.LFE53-.LFB53
 6454 0018 00000000 		.4byte	.LFB57
 6455 001c 3C000000 		.4byte	.LFE57-.LFB57
 6456 0020 00000000 		.4byte	.LFB32
 6457 0024 6C010000 		.4byte	.LFE32-.LFB32
 6458 0028 00000000 		.4byte	.LFB36
 6459 002c 24000000 		.4byte	.LFE36-.LFB36
 6460 0030 00000000 		.4byte	.LFB37
 6461 0034 5C000000 		.4byte	.LFE37-.LFB37
 6462 0038 00000000 		.4byte	.LFB38
 6463 003c 68000000 		.4byte	.LFE38-.LFB38
 6464 0040 00000000 		.4byte	.LFB39
 6465 0044 3C000000 		.4byte	.LFE39-.LFB39
 6466 0048 00000000 		.4byte	.LFB40
 6467 004c 14000000 		.4byte	.LFE40-.LFB40
 6468 0050 00000000 		.4byte	.LFB41
 6469 0054 10000000 		.4byte	.LFE41-.LFB41
 6470 0058 00000000 		.4byte	.LFB43
 6471 005c 18000000 		.4byte	.LFE43-.LFB43
 6472 0060 00000000 		.4byte	.LFB44
 6473 0064 18000000 		.4byte	.LFE44-.LFB44
 6474 0068 00000000 		.4byte	.LFB45
 6475 006c 0C000000 		.4byte	.LFE45-.LFB45
 6476 0070 00000000 		.4byte	.LFB46
 6477 0074 FC000000 		.4byte	.LFE46-.LFB46
 6478 0078 00000000 		.4byte	.LFB42
 6479 007c A0000000 		.4byte	.LFE42-.LFB42
 6480 0080 00000000 		.4byte	.LFB33
 6481 0084 50000000 		.4byte	.LFE33-.LFB33
 6482 0088 00000000 		.4byte	.LFB34
 6483 008c 34000000 		.4byte	.LFE34-.LFB34
 6484 0090 00000000 		.4byte	.LFB47
 6485 0094 90000000 		.4byte	.LFE47-.LFB47
 6486 0098 00000000 		.4byte	.LFB35
 6487 009c 64000000 		.4byte	.LFE35-.LFB35
 6488 00a0 00000000 		.4byte	.LFB48
 6489 00a4 3C000000 		.4byte	.LFE48-.LFB48
 6490 00a8 00000000 		.4byte	.LFB49
 6491 00ac 5C000000 		.4byte	.LFE49-.LFB49
 6492 00b0 00000000 		.4byte	.LFB50
 6493 00b4 18000000 		.4byte	.LFE50-.LFB50
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 169


 6494 00b8 00000000 		.4byte	.LFB51
 6495 00bc 50000000 		.4byte	.LFE51-.LFB51
 6496 00c0 00000000 		.4byte	.LFB52
 6497 00c4 0C000000 		.4byte	.LFE52-.LFB52
 6498 00c8 00000000 		.4byte	.LFB60
 6499 00cc 20000000 		.4byte	.LFE60-.LFB60
 6500 00d0 00000000 		.4byte	.LFB61
 6501 00d4 0C000000 		.4byte	.LFE61-.LFB61
 6502 00d8 00000000 		.4byte	.LFB62
 6503 00dc 68000000 		.4byte	.LFE62-.LFB62
 6504 00e0 00000000 		.4byte	.LFB63
 6505 00e4 44000000 		.4byte	.LFE63-.LFB63
 6506 00e8 00000000 		.4byte	0
 6507 00ec 00000000 		.4byte	0
 6508              		.section	.debug_ranges,"",%progbits
 6509              	.Ldebug_ranges0:
 6510 0000 04000000 		.4byte	.LBB17
 6511 0004 06000000 		.4byte	.LBE17
 6512 0008 0C000000 		.4byte	.LBB20
 6513 000c 3A000000 		.4byte	.LBE20
 6514 0010 00000000 		.4byte	0
 6515 0014 00000000 		.4byte	0
 6516 0018 12000000 		.4byte	.LBB30
 6517 001c 48000000 		.4byte	.LBE30
 6518 0020 4A000000 		.4byte	.LBB32
 6519 0024 60000000 		.4byte	.LBE32
 6520 0028 96000000 		.4byte	.LBB33
 6521 002c EA000000 		.4byte	.LBE33
 6522 0030 00000000 		.4byte	0
 6523 0034 00000000 		.4byte	0
 6524 0038 0A000000 		.4byte	.LBB34
 6525 003c 16000000 		.4byte	.LBE34
 6526 0040 18000000 		.4byte	.LBB35
 6527 0044 24000000 		.4byte	.LBE35
 6528 0048 2A000000 		.4byte	.LBB36
 6529 004c 3E000000 		.4byte	.LBE36
 6530 0050 00000000 		.4byte	0
 6531 0054 00000000 		.4byte	0
 6532 0058 00000000 		.4byte	.LFB53
 6533 005c 02000000 		.4byte	.LFE53
 6534 0060 00000000 		.4byte	.LFB57
 6535 0064 3C000000 		.4byte	.LFE57
 6536 0068 00000000 		.4byte	.LFB32
 6537 006c 6C010000 		.4byte	.LFE32
 6538 0070 00000000 		.4byte	.LFB36
 6539 0074 24000000 		.4byte	.LFE36
 6540 0078 00000000 		.4byte	.LFB37
 6541 007c 5C000000 		.4byte	.LFE37
 6542 0080 00000000 		.4byte	.LFB38
 6543 0084 68000000 		.4byte	.LFE38
 6544 0088 00000000 		.4byte	.LFB39
 6545 008c 3C000000 		.4byte	.LFE39
 6546 0090 00000000 		.4byte	.LFB40
 6547 0094 14000000 		.4byte	.LFE40
 6548 0098 00000000 		.4byte	.LFB41
 6549 009c 10000000 		.4byte	.LFE41
 6550 00a0 00000000 		.4byte	.LFB43
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 170


 6551 00a4 18000000 		.4byte	.LFE43
 6552 00a8 00000000 		.4byte	.LFB44
 6553 00ac 18000000 		.4byte	.LFE44
 6554 00b0 00000000 		.4byte	.LFB45
 6555 00b4 0C000000 		.4byte	.LFE45
 6556 00b8 00000000 		.4byte	.LFB46
 6557 00bc FC000000 		.4byte	.LFE46
 6558 00c0 00000000 		.4byte	.LFB42
 6559 00c4 A0000000 		.4byte	.LFE42
 6560 00c8 00000000 		.4byte	.LFB33
 6561 00cc 50000000 		.4byte	.LFE33
 6562 00d0 00000000 		.4byte	.LFB34
 6563 00d4 34000000 		.4byte	.LFE34
 6564 00d8 00000000 		.4byte	.LFB47
 6565 00dc 90000000 		.4byte	.LFE47
 6566 00e0 00000000 		.4byte	.LFB35
 6567 00e4 64000000 		.4byte	.LFE35
 6568 00e8 00000000 		.4byte	.LFB48
 6569 00ec 3C000000 		.4byte	.LFE48
 6570 00f0 00000000 		.4byte	.LFB49
 6571 00f4 5C000000 		.4byte	.LFE49
 6572 00f8 00000000 		.4byte	.LFB50
 6573 00fc 18000000 		.4byte	.LFE50
 6574 0100 00000000 		.4byte	.LFB51
 6575 0104 50000000 		.4byte	.LFE51
 6576 0108 00000000 		.4byte	.LFB52
 6577 010c 0C000000 		.4byte	.LFE52
 6578 0110 00000000 		.4byte	.LFB60
 6579 0114 20000000 		.4byte	.LFE60
 6580 0118 00000000 		.4byte	.LFB61
 6581 011c 0C000000 		.4byte	.LFE61
 6582 0120 00000000 		.4byte	.LFB62
 6583 0124 68000000 		.4byte	.LFE62
 6584 0128 00000000 		.4byte	.LFB63
 6585 012c 44000000 		.4byte	.LFE63
 6586 0130 00000000 		.4byte	0
 6587 0134 00000000 		.4byte	0
 6588              		.section	.debug_line,"",%progbits
 6589              	.Ldebug_line0:
 6590 0000 B6050000 		.section	.debug_str,"MS",%progbits,1
 6590      02007301 
 6590      00000201 
 6590      FB0E0D00 
 6590      01010101 
 6591              	.LASF46:
 6592 0000 70635461 		.ascii	"pcTaskName\000"
 6592      736B4E61 
 6592      6D6500
 6593              	.LASF26:
 6594 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 6594      6D626572 
 6594      4F664974 
 6594      656D7300 
 6595              	.LASF139:
 6596 001b 76506F72 		.ascii	"vPortExitCritical\000"
 6596      74457869 
 6596      74437269 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 171


 6596      74696361 
 6596      6C00
 6597              	.LASF144:
 6598 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 6598      74537461 
 6598      72745363 
 6598      68656475 
 6598      6C657200 
 6599              	.LASF44:
 6600 0041 75785072 		.ascii	"uxPriority\000"
 6600      696F7269 
 6600      747900
 6601              	.LASF58:
 6602 004c 7078436F 		.ascii	"pxConstList\000"
 6602      6E73744C 
 6602      69737400 
 6603              	.LASF140:
 6604 0058 76506F72 		.ascii	"vPortYield\000"
 6604      74596965 
 6604      6C6400
 6605              	.LASF40:
 6606 0063 74736B54 		.ascii	"tskTaskControlBlock\000"
 6606      61736B43 
 6606      6F6E7472 
 6606      6F6C426C 
 6606      6F636B00 
 6607              	.LASF156:
 6608 0077 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 6608      736B4765 
 6608      744E756D 
 6608      6265724F 
 6608      66546173 
 6609              	.LASF122:
 6610 008e 7578546F 		.ascii	"uxTopReadyPriority\000"
 6610      70526561 
 6610      64795072 
 6610      696F7269 
 6610      747900
 6611              	.LASF151:
 6612 00a1 443A5C31 		.ascii	"D:\\1_work\\my_project\\ReloadPro\\psoc42boot\\Relo"
 6612      5F776F72 
 6612      6B5C6D79 
 6612      5F70726F 
 6612      6A656374 
 6613 00cf 61642050 		.ascii	"ad Pro.cydsn\000"
 6613      726F2E63 
 6613      7964736E 
 6613      00
 6614              	.LASF0:
 6615 00dc 756E7369 		.ascii	"unsigned int\000"
 6615      676E6564 
 6615      20696E74 
 6615      00
 6616              	.LASF92:
 6617 00e9 70784576 		.ascii	"pxEventList\000"
 6617      656E744C 
 6617      69737400 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 172


 6618              	.LASF123:
 6619 00f5 78536368 		.ascii	"xSchedulerRunning\000"
 6619      6564756C 
 6619      65725275 
 6619      6E6E696E 
 6619      6700
 6620              	.LASF27:
 6621 0107 7078496E 		.ascii	"pxIndex\000"
 6621      64657800 
 6622              	.LASF110:
 6623 010f 76546173 		.ascii	"vTaskPriorityInherit\000"
 6623      6B507269 
 6623      6F726974 
 6623      79496E68 
 6623      65726974 
 6624              	.LASF31:
 6625 0124 7854494D 		.ascii	"xTIME_OUT\000"
 6625      455F4F55 
 6625      5400
 6626              	.LASF22:
 6627 012e 784C4953 		.ascii	"xLIST_ITEM\000"
 6627      545F4954 
 6627      454D00
 6628              	.LASF113:
 6629 0139 70785265 		.ascii	"pxReadyTasksLists\000"
 6629      61647954 
 6629      61736B73 
 6629      4C697374 
 6629      7300
 6630              	.LASF15:
 6631 014b 706F7274 		.ascii	"portTickType\000"
 6631      5469636B 
 6631      54797065 
 6631      00
 6632              	.LASF96:
 6633 0158 76546173 		.ascii	"vTaskSetTimeOutState\000"
 6633      6B536574 
 6633      54696D65 
 6633      4F757453 
 6633      74617465 
 6634              	.LASF77:
 6635 016d 78546173 		.ascii	"xTaskIncrementTick\000"
 6635      6B496E63 
 6635      72656D65 
 6635      6E745469 
 6635      636B00
 6636              	.LASF114:
 6637 0180 7844656C 		.ascii	"xDelayedTaskList1\000"
 6637      61796564 
 6637      5461736B 
 6637      4C697374 
 6637      3100
 6638              	.LASF115:
 6639 0192 7844656C 		.ascii	"xDelayedTaskList2\000"
 6639      61796564 
 6639      5461736B 
 6639      4C697374 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 173


 6639      3200
 6640              	.LASF32:
 6641 01a4 784F7665 		.ascii	"xOverflowCount\000"
 6641      72666C6F 
 6641      77436F75 
 6641      6E7400
 6642              	.LASF42:
 6643 01b3 7847656E 		.ascii	"xGenericListItem\000"
 6643      65726963 
 6643      4C697374 
 6643      4974656D 
 6643      00
 6644              	.LASF137:
 6645 01c4 76506F72 		.ascii	"vPortEnterCritical\000"
 6645      74456E74 
 6645      65724372 
 6645      69746963 
 6645      616C00
 6646              	.LASF38:
 6647 01d7 756C5061 		.ascii	"ulParameters\000"
 6647      72616D65 
 6647      74657273 
 6647      00
 6648              	.LASF102:
 6649 01e4 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 6649      6C6C6F63 
 6649      61746554 
 6649      4342416E 
 6649      64537461 
 6650              	.LASF66:
 6651 01fb 78546173 		.ascii	"xTaskToResume\000"
 6651      6B546F52 
 6651      6573756D 
 6651      6500
 6652              	.LASF108:
 6653 0209 75785265 		.ascii	"uxReturn\000"
 6653      7475726E 
 6653      00
 6654              	.LASF29:
 6655 0212 784C6973 		.ascii	"xList\000"
 6655      7400
 6656              	.LASF48:
 6657 0218 74736B54 		.ascii	"tskTCB\000"
 6657      434200
 6658              	.LASF70:
 6659 021f 75785361 		.ascii	"uxSavedInterruptStatus\000"
 6659      76656449 
 6659      6E746572 
 6659      72757074 
 6659      53746174 
 6660              	.LASF141:
 6661 0236 75784C69 		.ascii	"uxListRemove\000"
 6661      73745265 
 6661      6D6F7665 
 6661      00
 6662              	.LASF69:
 6663 0243 78596965 		.ascii	"xYieldRequired\000"
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 174


 6663      6C645265 
 6663      71756972 
 6663      656400
 6664              	.LASF13:
 6665 0252 666C6F61 		.ascii	"float\000"
 6665      7400
 6666              	.LASF95:
 6667 0258 7078556E 		.ascii	"pxUnblockedTCB\000"
 6667      626C6F63 
 6667      6B656454 
 6667      434200
 6668              	.LASF52:
 6669 0267 75735374 		.ascii	"usStackDepth\000"
 6669      61636B44 
 6669      65707468 
 6669      00
 6670              	.LASF119:
 6671 0274 78537573 		.ascii	"xSuspendedTaskList\000"
 6671      70656E64 
 6671      65645461 
 6671      736B4C69 
 6671      737400
 6672              	.LASF8:
 6673 0287 6C6F6E67 		.ascii	"long long unsigned int\000"
 6673      206C6F6E 
 6673      6720756E 
 6673      7369676E 
 6673      65642069 
 6674              	.LASF76:
 6675 029e 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 6675      6B476574 
 6675      5469636B 
 6675      436F756E 
 6675      7446726F 
 6676              	.LASF118:
 6677 02b7 7850656E 		.ascii	"xPendingReadyList\000"
 6677      64696E67 
 6677      52656164 
 6677      794C6973 
 6677      7400
 6678              	.LASF153:
 6679 02c9 78546173 		.ascii	"xTaskIsTaskSuspended\000"
 6679      6B497354 
 6679      61736B53 
 6679      75737065 
 6679      6E646564 
 6680              	.LASF18:
 6681 02de 70785072 		.ascii	"pxPrevious\000"
 6681      6576696F 
 6681      757300
 6682              	.LASF68:
 6683 02e9 78546173 		.ascii	"xTaskResumeFromISR\000"
 6683      6B526573 
 6683      756D6546 
 6683      726F6D49 
 6683      535200
 6684              	.LASF131:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 175


 6685 02fc 7076506F 		.ascii	"pvPortMalloc\000"
 6685      72744D61 
 6685      6C6C6F63 
 6685      00
 6686              	.LASF100:
 6687 0309 76546173 		.ascii	"vTaskSuspendAll\000"
 6687      6B537573 
 6687      70656E64 
 6687      416C6C00 
 6688              	.LASF106:
 6689 0319 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 6689      736B4765 
 6689      74537461 
 6689      636B4869 
 6689      67685761 
 6690              	.LASF30:
 6691 0335 78546173 		.ascii	"xTaskHandle\000"
 6691      6B48616E 
 6691      646C6500 
 6692              	.LASF11:
 6693 0341 73697A65 		.ascii	"size_t\000"
 6693      5F7400
 6694              	.LASF99:
 6695 0348 70785469 		.ascii	"pxTicksToWait\000"
 6695      636B7354 
 6695      6F576169 
 6695      7400
 6696              	.LASF23:
 6697 0356 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 6697      495F4C49 
 6697      53545F49 
 6697      54454D00 
 6698              	.LASF104:
 6699 0366 70756353 		.ascii	"pucStackByte\000"
 6699      7461636B 
 6699      42797465 
 6699      00
 6700              	.LASF25:
 6701 0373 784C4953 		.ascii	"xLIST\000"
 6701      5400
 6702              	.LASF73:
 6703 0379 76546173 		.ascii	"vTaskEndScheduler\000"
 6703      6B456E64 
 6703      53636865 
 6703      64756C65 
 6703      7200
 6704              	.LASF138:
 6705 038b 764C6973 		.ascii	"vListInsertEnd\000"
 6705      74496E73 
 6705      65727445 
 6705      6E6400
 6706              	.LASF79:
 6707 039a 78436F6E 		.ascii	"xConstTickCount\000"
 6707      73745469 
 6707      636B436F 
 6707      756E7400 
 6708              	.LASF117:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 176


 6709 03aa 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 6709      6572666C 
 6709      6F774465 
 6709      6C617965 
 6709      64546173 
 6710              	.LASF91:
 6711 03c4 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 6711      6B506C61 
 6711      63654F6E 
 6711      4576656E 
 6711      744C6973 
 6712              	.LASF87:
 6713 03da 76546173 		.ascii	"vTaskDelay\000"
 6713      6B44656C 
 6713      617900
 6714              	.LASF94:
 6715 03e5 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 6715      6B52656D 
 6715      6F766546 
 6715      726F6D45 
 6715      76656E74 
 6716              	.LASF10:
 6717 03fe 63686172 		.ascii	"char\000"
 6717      00
 6718              	.LASF155:
 6719 0403 70727649 		.ascii	"prvIdleTask\000"
 6719      646C6554 
 6719      61736B00 
 6720              	.LASF28:
 6721 040f 784C6973 		.ascii	"xListEnd\000"
 6721      74456E64 
 6721      00
 6722              	.LASF60:
 6723 0418 70784E65 		.ascii	"pxNewTCB\000"
 6723      77544342 
 6723      00
 6724              	.LASF107:
 6725 0421 7063456E 		.ascii	"pcEndOfStack\000"
 6725      644F6653 
 6725      7461636B 
 6725      00
 6726              	.LASF146:
 6727 042e 76417070 		.ascii	"vApplicationTickHook\000"
 6727      6C696361 
 6727      74696F6E 
 6727      5469636B 
 6727      486F6F6B 
 6728              	.LASF63:
 6729 0443 70785461 		.ascii	"pxTaskCode\000"
 6729      736B436F 
 6729      646500
 6730              	.LASF74:
 6731 044e 78546173 		.ascii	"xTaskGetTickCount\000"
 6731      6B476574 
 6731      5469636B 
 6731      436F756E 
 6731      7400
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 177


 6732              	.LASF129:
 6733 0460 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 6733      74546173 
 6733      6B556E62 
 6733      6C6F636B 
 6733      54696D65 
 6734              	.LASF136:
 6735 0475 7078506F 		.ascii	"pxPortInitialiseStack\000"
 6735      7274496E 
 6735      69746961 
 6735      6C697365 
 6735      53746163 
 6736              	.LASF121:
 6737 048b 78546963 		.ascii	"xTickCount\000"
 6737      6B436F75 
 6737      6E7400
 6738              	.LASF7:
 6739 0496 6C6F6E67 		.ascii	"long long int\000"
 6739      206C6F6E 
 6739      6720696E 
 6739      7400
 6740              	.LASF143:
 6741 04a4 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 6741      6172496E 
 6741      74657272 
 6741      7570744D 
 6741      61736B46 
 6742              	.LASF37:
 6743 04bf 756C4C65 		.ascii	"ulLengthInBytes\000"
 6743      6E677468 
 6743      496E4279 
 6743      74657300 
 6744              	.LASF150:
 6745 04cf 66726565 		.ascii	"freertos\\src\\tasks.c\000"
 6745      72746F73 
 6745      5C737263 
 6745      5C746173 
 6745      6B732E63 
 6746              	.LASF33:
 6747 04e4 7854696D 		.ascii	"xTimeOnEntering\000"
 6747      654F6E45 
 6747      6E746572 
 6747      696E6700 
 6748              	.LASF50:
 6749 04f4 70634E61 		.ascii	"pcName\000"
 6749      6D6500
 6750              	.LASF17:
 6751 04fb 70784E65 		.ascii	"pxNext\000"
 6751      787400
 6752              	.LASF133:
 6753 0502 6D656D73 		.ascii	"memset\000"
 6753      657400
 6754              	.LASF97:
 6755 0509 70785469 		.ascii	"pxTimeOut\000"
 6755      6D654F75 
 6755      7400
 6756              	.LASF88:
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 178


 6757 0513 78546963 		.ascii	"xTicksToDelay\000"
 6757      6B73546F 
 6757      44656C61 
 6757      7900
 6758              	.LASF128:
 6759 0521 75785461 		.ascii	"uxTaskNumber\000"
 6759      736B4E75 
 6759      6D626572 
 6759      00
 6760              	.LASF142:
 6761 052e 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 6761      74496E74 
 6761      65727275 
 6761      70744D61 
 6761      736B4672 
 6762              	.LASF39:
 6763 0548 784D656D 		.ascii	"xMemoryRegion\000"
 6763      6F727952 
 6763      6567696F 
 6763      6E00
 6764              	.LASF56:
 6765 0556 78546173 		.ascii	"xTask\000"
 6765      6B00
 6766              	.LASF86:
 6767 055c 7853686F 		.ascii	"xShouldDelay\000"
 6767      756C6444 
 6767      656C6179 
 6767      00
 6768              	.LASF53:
 6769 0569 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 6769      6E697469 
 6769      616C6973 
 6769      65544342 
 6769      56617269 
 6770              	.LASF35:
 6771 0583 784D454D 		.ascii	"xMEMORY_REGION\000"
 6771      4F52595F 
 6771      52454749 
 6771      4F4E00
 6772              	.LASF112:
 6773 0592 76546173 		.ascii	"vTaskPriorityDisinherit\000"
 6773      6B507269 
 6773      6F726974 
 6773      79446973 
 6773      696E6865 
 6774              	.LASF67:
 6775 05aa 78546173 		.ascii	"xTaskGenericCreate\000"
 6775      6B47656E 
 6775      65726963 
 6775      43726561 
 6775      746500
 6776              	.LASF154:
 6777 05bd 76546173 		.ascii	"vTaskSwitchContext\000"
 6777      6B537769 
 6777      74636843 
 6777      6F6E7465 
 6777      787400
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 179


 6778              	.LASF127:
 6779 05d0 784E756D 		.ascii	"xNumOfOverflows\000"
 6779      4F664F76 
 6779      6572666C 
 6779      6F777300 
 6780              	.LASF20:
 6781 05e0 7076436F 		.ascii	"pvContainer\000"
 6781      6E746169 
 6781      6E657200 
 6782              	.LASF157:
 6783 05ec 70784375 		.ascii	"pxCurrentTCB\000"
 6783      7272656E 
 6783      74544342 
 6783      00
 6784              	.LASF148:
 6785 05f9 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 6785      6C696361 
 6785      74696F6E 
 6785      53746163 
 6785      6B4F7665 
 6786              	.LASF3:
 6787 0617 73686F72 		.ascii	"short int\000"
 6787      7420696E 
 6787      7400
 6788              	.LASF134:
 6789 0621 764C6973 		.ascii	"vListInitialiseItem\000"
 6789      74496E69 
 6789      7469616C 
 6789      69736549 
 6789      74656D00 
 6790              	.LASF62:
 6791 0635 70765061 		.ascii	"pvParameters\000"
 6791      72616D65 
 6791      74657273 
 6791      00
 6792              	.LASF16:
 6793 0642 78497465 		.ascii	"xItemValue\000"
 6793      6D56616C 
 6793      756500
 6794              	.LASF5:
 6795 064d 6C6F6E67 		.ascii	"long int\000"
 6795      20696E74 
 6795      00
 6796              	.LASF45:
 6797 0656 70785374 		.ascii	"pxStack\000"
 6797      61636B00 
 6798              	.LASF81:
 6799 065e 78546173 		.ascii	"xTaskResumeAll\000"
 6799      6B526573 
 6799      756D6541 
 6799      6C6C00
 6800              	.LASF116:
 6801 066d 70784465 		.ascii	"pxDelayedTaskList\000"
 6801      6C617965 
 6801      64546173 
 6801      6B4C6973 
 6801      7400
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 180


 6802              	.LASF21:
 6803 067f 784C6973 		.ascii	"xListItem\000"
 6803      74497465 
 6803      6D00
 6804              	.LASF78:
 6805 0689 78537769 		.ascii	"xSwitchRequired\000"
 6805      74636852 
 6805      65717569 
 6805      72656400 
 6806              	.LASF147:
 6807 0699 6D656D63 		.ascii	"memcmp\000"
 6807      6D7000
 6808              	.LASF111:
 6809 06a0 70784D75 		.ascii	"pxMutexHolder\000"
 6809      74657848 
 6809      6F6C6465 
 6809      7200
 6810              	.LASF149:
 6811 06ae 474E5520 		.ascii	"GNU C99 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6811      43393920 
 6811      352E342E 
 6811      31203230 
 6811      31363036 
 6812 06e1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 6812      20726576 
 6812      6973696F 
 6812      6E203233 
 6812      37373135 
 6813 0714 73202D73 		.ascii	"s -std=gnu99 -ffunction-sections -ffat-lto-objects\000"
 6813      74643D67 
 6813      6E753939 
 6813      202D6666 
 6813      756E6374 
 6814              	.LASF90:
 6815 0747 78546173 		.ascii	"xTaskToSuspend\000"
 6815      6B546F53 
 6815      75737065 
 6815      6E6400
 6816              	.LASF98:
 6817 0756 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 6817      6B436865 
 6817      636B466F 
 6817      7254696D 
 6817      654F7574 
 6818              	.LASF145:
 6819 076b 76506F72 		.ascii	"vPortEndScheduler\000"
 6819      74456E64 
 6819      53636865 
 6819      64756C65 
 6819      7200
 6820              	.LASF132:
 6821 077d 76506F72 		.ascii	"vPortFree\000"
 6821      74467265 
 6821      6500
 6822              	.LASF84:
 6823 0787 70785072 		.ascii	"pxPreviousWakeTime\000"
 6823      6576696F 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 181


 6823      75735761 
 6823      6B655469 
 6823      6D6500
 6824              	.LASF57:
 6825 079a 78526574 		.ascii	"xReturn\000"
 6825      75726E00 
 6826              	.LASF9:
 6827 07a2 73697A65 		.ascii	"sizetype\000"
 6827      74797065 
 6827      00
 6828              	.LASF101:
 6829 07ab 76546173 		.ascii	"vTaskMissedYield\000"
 6829      6B4D6973 
 6829      73656459 
 6829      69656C64 
 6829      00
 6830              	.LASF125:
 6831 07bc 75785065 		.ascii	"uxPendedTicks\000"
 6831      6E646564 
 6831      5469636B 
 6831      7300
 6832              	.LASF6:
 6833 07ca 6C6F6E67 		.ascii	"long unsigned int\000"
 6833      20756E73 
 6833      69676E65 
 6833      6420696E 
 6833      7400
 6834              	.LASF75:
 6835 07dc 78546963 		.ascii	"xTicks\000"
 6835      6B7300
 6836              	.LASF72:
 6837 07e3 76546173 		.ascii	"vTaskStartScheduler\000"
 6837      6B537461 
 6837      72745363 
 6837      68656475 
 6837      6C657200 
 6838              	.LASF105:
 6839 07f7 7573436F 		.ascii	"usCount\000"
 6839      756E7400 
 6840              	.LASF36:
 6841 07ff 70764261 		.ascii	"pvBaseAddress\000"
 6841      73654164 
 6841      64726573 
 6841      7300
 6842              	.LASF80:
 6843 080d 70785465 		.ascii	"pxTemp\000"
 6843      6D7000
 6844              	.LASF2:
 6845 0814 756E7369 		.ascii	"unsigned char\000"
 6845      676E6564 
 6845      20636861 
 6845      7200
 6846              	.LASF135:
 6847 0822 764C6973 		.ascii	"vListInitialise\000"
 6847      74496E69 
 6847      7469616C 
 6847      69736500 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 182


 6848              	.LASF130:
 6849 0832 764C6973 		.ascii	"vListInsert\000"
 6849      74496E73 
 6849      65727400 
 6850              	.LASF47:
 6851 083e 75784261 		.ascii	"uxBasePriority\000"
 6851      73655072 
 6851      696F7269 
 6851      747900
 6852              	.LASF83:
 6853 084d 76546173 		.ascii	"vTaskDelayUntil\000"
 6853      6B44656C 
 6853      6179556E 
 6853      74696C00 
 6854              	.LASF43:
 6855 085d 78457665 		.ascii	"xEventListItem\000"
 6855      6E744C69 
 6855      73744974 
 6855      656D00
 6856              	.LASF24:
 6857 086c 784D696E 		.ascii	"xMiniListItem\000"
 6857      694C6973 
 6857      74497465 
 6857      6D00
 6858              	.LASF93:
 6859 087a 78546963 		.ascii	"xTicksToWait\000"
 6859      6B73546F 
 6859      57616974 
 6859      00
 6860              	.LASF19:
 6861 0887 70764F77 		.ascii	"pvOwner\000"
 6861      6E657200 
 6862              	.LASF89:
 6863 088f 76546173 		.ascii	"vTaskSuspend\000"
 6863      6B537573 
 6863      70656E64 
 6863      00
 6864              	.LASF82:
 6865 089c 78416C72 		.ascii	"xAlreadyYielded\000"
 6865      65616479 
 6865      5969656C 
 6865      64656400 
 6866              	.LASF109:
 6867 08ac 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 6867      6B476574 
 6867      43757272 
 6867      656E7454 
 6867      61736B48 
 6868              	.LASF103:
 6869 08c6 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 6869      61736B43 
 6869      6865636B 
 6869      46726565 
 6869      53746163 
 6870              	.LASF51:
 6871 08e1 78526567 		.ascii	"xRegions\000"
 6871      696F6E73 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 183


 6871      00
 6872              	.LASF54:
 6873 08ea 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 6873      64644375 
 6873      7272656E 
 6873      74546173 
 6873      6B546F44 
 6874              	.LASF34:
 6875 0909 7854696D 		.ascii	"xTimeOutType\000"
 6875      654F7574 
 6875      54797065 
 6875      00
 6876              	.LASF120:
 6877 0916 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 6877      7272656E 
 6877      744E756D 
 6877      6265724F 
 6877      66546173 
 6878              	.LASF85:
 6879 092d 7854696D 		.ascii	"xTimeIncrement\000"
 6879      65496E63 
 6879      72656D65 
 6879      6E7400
 6880              	.LASF1:
 6881 093c 7369676E 		.ascii	"signed char\000"
 6881      65642063 
 6881      68617200 
 6882              	.LASF4:
 6883 0948 73686F72 		.ascii	"short unsigned int\000"
 6883      7420756E 
 6883      7369676E 
 6883      65642069 
 6883      6E7400
 6884              	.LASF55:
 6885 095b 7854696D 		.ascii	"xTimeToWake\000"
 6885      65546F57 
 6885      616B6500 
 6886              	.LASF49:
 6887 0967 70785443 		.ascii	"pxTCB\000"
 6887      4200
 6888              	.LASF12:
 6889 096d 70645441 		.ascii	"pdTASK_CODE\000"
 6889      534B5F43 
 6889      4F444500 
 6890              	.LASF14:
 6891 0979 646F7562 		.ascii	"double\000"
 6891      6C6500
 6892              	.LASF124:
 6893 0980 75785363 		.ascii	"uxSchedulerSuspended\000"
 6893      68656475 
 6893      6C657253 
 6893      75737065 
 6893      6E646564 
 6894              	.LASF59:
 6895 0995 70757853 		.ascii	"puxStackBuffer\000"
 6895      7461636B 
 6895      42756666 
ARM GAS  C:\Users\VIDEOH~1\AppData\Local\Temp\cclxgSgX.s 			page 184


 6895      657200
 6896              	.LASF41:
 6897 09a4 7078546F 		.ascii	"pxTopOfStack\000"
 6897      704F6653 
 6897      7461636B 
 6897      00
 6898              	.LASF71:
 6899 09b1 76546173 		.ascii	"vTaskResume\000"
 6899      6B526573 
 6899      756D6500 
 6900              	.LASF61:
 6901 09bd 70727649 		.ascii	"prvInitialiseTaskLists\000"
 6901      6E697469 
 6901      616C6973 
 6901      65546173 
 6901      6B4C6973 
 6902              	.LASF64:
 6903 09d4 70784372 		.ascii	"pxCreatedTask\000"
 6903      65617465 
 6903      64546173 
 6903      6B00
 6904              	.LASF152:
 6905 09e2 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 6905      6865636B 
 6905      5461736B 
 6905      73576169 
 6905      74696E67 
 6906              	.LASF65:
 6907 0a02 75634578 		.ascii	"ucExpectedStackBytes\000"
 6907      70656374 
 6907      65645374 
 6907      61636B42 
 6907      79746573 
 6908              	.LASF126:
 6909 0a17 78596965 		.ascii	"xYieldPending\000"
 6909      6C645065 
 6909      6E64696E 
 6909      6700
 6910              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
